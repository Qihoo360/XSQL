{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Contents ================= \u9879\u76ee\u6982\u51b5-Overview \u81ea\u5b9a\u4e49\u914d\u7f6e-Configuration \u7279\u6b8a\u8bed\u6cd5-Special Syntax \u652f\u6301\u7684API \u6570\u636e\u6e90\u8be6\u60c5-Data Sources \u6027\u80fd\u62a5\u544a-Performance Report \u5e38\u89c1\u95ee\u9898-Troubleshooting \u66f4\u65b0\u65e5\u5fd7-ReleaseNote External Resources 360\u5206\u5e03\u5f0f\u67e5\u8be2\u5f15\u64ceXSQL\uff1a\u6280\u672f\u63ed\u79d8\u4e0e\u4f7f\u7528\u4ecb\u7ecd XSQL\u63a8\u5e7fPPT Release Notes \u7248\u672c\u53f7 \u53d1\u5e03\u65e5\u671f Bug Improvement New Feature 2.3.1.xsql-0.1.0 2019.01.31 2.3.1.xsql-0.2.0 2019.03.04 1.Desc Table\u5c55\u793aElasticsearch\u65f6\uff0c\u5217\u7c7b\u578b\u663e\u793a\u4e0d\u6b63\u786e 2.\u89e3\u51b3NoSuchDatabaseException\u5f02\u5e38\u6570\u636e\u5e93\u540d\u548c\u6570\u636e\u6e90\u540d\u79f0\u98a0\u5012\u7684\u95ee\u9898 3.Alter table\u65f6\uff0c\u65e0\u6cd5\u5c06Spark\u7684\u5217\u7c7b\u578b\u8f6c\u6362\u4e3aElasticsearch\u7684 4.\u5c06XSQL\u5185\u90e8\u7684\u6570\u636e\u5e93\u540d\u8f6c\u5316\u4e3a\u7269\u7406\u4e0a\u7684\u5b9e\u9645\u6570\u636e\u5e93\u540d\u79f0 5.\u4fee\u590dSQL\u9875\u9762\u4e22\u5931\u7684\u95ee\u9898 6.RenameXSQLTable must update the collection property in CatalogTable. 1.\u652f\u6301\u5bf9limit 0\u65f6\u7684\u63a2\u6d4b 2.show databases\u5c06\u6570\u636e\u5e93\u540d\u653e\u5728\u7b2c\u4e00\u5217\uff0cshow tables\u5c06\u8868\u540d\u653e\u5728\u7b2c\u4e00\u5217 3.\u4f18\u5316ElasticSearchManager\uff0c\u62bd\u8c61getTableOption 4.\u907f\u514d\u7f16\u8bd1Spark core\u6a21\u5757 5.\u5b8c\u5584XSQLSqlParser\u7684\u6ce8\u91ca 6.\u5b9e\u73b0\u9ed8\u8ba4listDatabases(ds, pattern) 7.Add default options for ES and mongo. 1.\u589e\u52a0Cache Level\u673a\u5236 2.\u652f\u6301 SQL\u9875\u9762\u663e\u793a\u67e5\u8be2\u8bed\u53e5 3.HBase\u9650\u5236\u975e\u7d22\u5f15\u5b57\u6bb5\u67e5\u8be2\u548c\u589e\u5220\u8868, force=true\u5f3a\u5236\u5f00\u542f 4.Add rename table syntax for MongoDB. 2.3.1.xsql-0.2.1 2019.03.06 1.\u89e3\u51b3spark.mongodb.input.uri\u6ca1\u6709\u4f20\u9012\u7ed9CatalogTable\u7684\u95ee\u9898 2.\u89e3\u51b3\u90e8\u5206jersey\u5305\u51b2\u7a81 \u66f4\u65b0XSQL\u6587\u6863\uff0c\u589e\u52a0\u5bf9Cache Level\u3001Whitelist\u3001spark.xsql.properties.file\u7b49\u7684\u63cf\u8ff0 2.3.1.xsql-0.2.2 2019.03.14 1.\u89e3\u51b3\uff1a\u89e3\u6790Elasticsearch\u7684object\u7c7b\u578b\u65f6\u51fa\u9519\u7684\u95ee\u9898 2.\u89e3\u51b3\uff1a\u5f53Elasticsearch\u7684discover\u6587\u4ef6\u4e0d\u5b58\u5728\u65f6\u51fa\u9519\u7684\u95ee\u9898 3.\u89e3\u51b3\uff1aElasticsearch relation\u6ca1\u6709\u5305\u542bes.read.field.as.array.include\u5c5e\u6027\u7684\u95ee\u9898 4.\u89e3\u51b3\uff1aElasticsearch\u7684float\u548carray[float]\u5728\u89e3\u6790\u65f6\u53d1\u751f\u6df7\u6dc6\u7684\u95ee\u9898 1.\u589e\u52a0\u8fd0\u7ef4\u8bca\u65ad\u6587\u6863 2.\u51cf\u5c11\u8026\u5408\uff0c\u4e0d\u518d\u4fee\u6539InsertIntoHiveTable 1.\u589e\u52a0Add datasource\u8bed\u6cd5 2.\u589e\u52a0Remove|Refresh datasource\u8bed\u6cd5 3.\u589e\u52a0\u63a2\u7d22Elasticsearch\u7684\u5b57\u6bb5schema\u7684\u529f\u80fd 2.3.1.xsql-0.2.3 2019.03.22 1.\u89e3\u51b3\uff1aElasticsearch\u4e0b\u63a8\u89e3\u6790\u6570\u636e\u65f6\uff0c\u5b57\u6bb5\u4e3anull\u65f6\u7684\u5f02\u5e38 2.\u89e3\u51b3\uff1aDruid\u5728SQL\u5305\u542b\u4e2d\u6587\u65f6\u89e3\u6790\u51fa\u9519\u7684\u95ee\u9898 3.\u89e3\u51b3\uff1a\u6267\u884cselect * group by\u65f6\u51fa\u9519\u7684\u95ee\u9898 1.Druid\u67e5\u8be2\u65f6\u6ca1\u6709\u6307\u5b9a__time\u65f6,\u53cb\u597d\u63d0\u793a\u7528\u6237 2.\u5b8c\u5584Getting_Started\u6587\u6863\u7684\u7528\u4f8b 3.\u524d\u7f6eSQL\u8bed\u6cd5\u6821\u9a8c\u5230Local\u6a21\u5f0f\u5207\u6362Yarn\u6a21\u5f0f\u4e4b\u524d 1.Druid\u652f\u6301\u4e8c\u7ea7\u7f13\u5b58 2.3.1.xsql-0.3.0 2019.04.04 1.\u89e3\u51b3\uff1a\u907f\u514d\u4e0b\u63a8Mysql\u4e0d\u652f\u6301\u7684\u51fd\u6570 2.\u89e3\u51b3\uff1aMysql\u5206\u533a\u4fe1\u606f\u4e22\u5931 1.Hbase,Druid \u6a21\u5757\u5316 2.\u4f18\u5316 DataSourceManager\u63d2\u4ef6\u5316\u4ee3\u7801 3.\u6e05\u7406\u5197\u4f59\u7684\u4f9d\u8d56 1.\u652f\u6301\u7ed9SQL\u4e2d\u53ef\u4ee5\u4e0b\u63a8\u7684\u5b50\u67e5\u8be2\u52a0\u522b\u540d 2.Elasticsearch\u652f\u6301Scroll\u63a5\u53e3\uff0c\u52a0\u901f\u67e5\u8be2\u6548\u7387 3.Elasticsearch\u652f\u6301es.read.field.empty.as.null\u914d\u7f6e 4.\u589e\u52a0Hive \u6743\u9650\u9a8c\u8bc1\u6a21\u5757spark-authorizer 2.3.1.xsql-0.3.1 2019.04.09 1.\u89e3\u51b3\uff1aLocal\u6a21\u5f0f\u5207\u6362Yarn\u6a21\u5f0f\u65f6\uff0c\u4efb\u52a1\u94fe\u63a5\u90e8\u5206\u6807\u7b7e\u9875\u4e0d\u663e\u793a\u7684\u95ee\u9898 2.\u89e3\u51b3\uff1aLocal\u6a21\u5f0f\u6267\u884ccreate table using parquet\u7b49\u540e\uff0c\u5207\u6362Yarn\u6a21\u5f0f\u5bfc\u81f4\u5e95\u5c42\u521b\u5efa\u7684HadoopFsRelation\u8fd8\u662fLocal\u6a21\u5f0f\u4e0b\u5df2\u7ecf\u5173\u95ed\u7684SparkSession 3.\u89e3\u51b3\uff1a\u79fb\u9664spark-hive\u811a\u672c\u540e\uff0c\u96be\u4ee5\u65e0\u7f1d\u8fc1\u79fb 4.\u89e3\u51b3\uff1aHbase,Druid \u6a21\u5757\u5316\u540e\uff0cServiceLoader\u627e\u4e0d\u5230\u5bf9\u5e94DataSourceRegister\u5b9e\u73b0\u7684Bug 1. \u4fdd\u7559\u652f\u6301bin/spark-hive 2. Hbase\u3001Druid\u9700\u989d\u5916\u914d\u7f6e\uff0c\u4ece\u800c\u63a7\u5236jars\u5927\u5c0f 2.3.1.xsql-0.3.2 2019.05.25 1. bin/spark-xsql\u652f\u6301${}\u5b57\u7b26\u4e32\u53d8\u91cf 2. datasource\u5173\u952e\u5b57\u4e0e\u5217\u540d\u51b2\u7a81 3. processSingleTable assert\u5931\u8d25 4. !\u5f00\u5934\u7684\u547d\u4ee4cast\u62a5\u9519 5. OutOfDriectMemoryError 1. \u652f\u6301Hive\u7684remove datasource if exists 2. \u652f\u6301Hive\u7684insert overwrite directory using xxx 3. \u589e\u52a0Yarn\u4f18\u5148\u7ea7\u63a7\u5236\u53c2\u6570spark-sql --priority 2.3.1.xsql-0.4.0 2019.07.01 1. load data partition 2. StackOverflow caused by window functions 3. select using script 1. set \u4e0d\u518d\u89e6\u53d1job 2. local\u6a21\u5f0f\u4e0d\u518d\u4ea7\u751f\u65e5\u5fd7\u6587\u4ef6 1.\u652f\u6301Hive\u7684distribute by 2.\u63a5\u5165Kafka\u6570\u636e\u6e90 2.4.3.xsql-0.5.0 2019.08.01 1.\u4fee\u590d\u4efb\u52a1\u7ed3\u675f\u65f6\u62a5\u9519java.io.IOException: Filesystem closed 2.\u89e3\u51b3HDFS0.2\u7248\u672c\u4e0eSpark\u6d41\u5f0fSQL\u6240\u4f7f\u7528HDFS\u9ad8\u7248\u672c\u7684\u517c\u5bb9\u6027\u95ee\u9898 3.\u4fee\u590dMongoManager\u3001ElasticSearchManager\u5728Local\u6a21\u5f0f\u4e0b\uff0c\u4f7f\u7528SparkSession.getActiveSession\u7684bug 4.\u89e3\u51b3XSQL\u5347\u7ea7Spark2.4.3\u540e\uff0c\u6d41\u5f0fSQL\u65e0\u6cd5\u652f\u6301\u4e0b\u63a8\u7684\u95ee\u9898 \u5347\u7ea7\u81f3Spark2.4.3\u6838\u5fc3 \u652f\u6301\u6d41\u5f0fSQL\u8ba1\u7b97Kafka\u6570\u636e 2.4.3.xsql-0.6.0 2019.08.30 1.\u4fee\u6539SparkXSQLShell\u4e2d\u9519\u8bef\u7684\u6253\u5370SparkHiveShell\u4fe1\u606f 1.\u901a\u8fc7ServiceLoader\u52a0\u8f7dDatasourceManager\u5b9e\u73b0 2.\u589e\u52a0\u5de5\u4f5c\u6570\u636e\u6e90\uff0c\u51cf\u5c11\u5728\u6570\u636e\u5b57\u5178\u8bfb\u5199\u8fc7\u7a0b\u4e2d\uff0c\u53cd\u590d\u83b7\u53d6\u6570\u636e\u6e90 3.DataSourceManager\u7ee7\u627fExternalCatalog\uff0c\u51cf\u5c11\u76f8\u540c\u7684\u65b9\u6cd5\u7b7e\u540d 4.\u4fee\u6539mkdocs\u6587\u6863\u98ce\u683c 5.\u589e\u52a0xsql.conf.template 6.\u6dfb\u52a0\u76d1\u63a7\u6a21\u5757 1.\u652f\u6301\u63d2\u4ef6\u5316 2.\u589e\u52a0\u4e2d\u82f1\u6587README 3.\u589e\u52a0LOGO 2.4.3.xsql-0.6.1 2019.08.11 1. Rename the prefix of jars from spark to xsql. 2. Fix the bug that can't find default database when default database's name is not default 3. Solve sql select query that select is followed by \\n can't run when we use -e sql 4. Fix cannot find spark-xsql-shell. 5. .hiverc is loaded twice making create function throw exception 6. Correct the content of license file for XSQL. 1. Fix com.fasterxml.jackson.core:jackson-databind vulnerabilities. 2. Fix org.jpmml:pmml-model vulnerabilities. 3. Fix zookeeper vulnerabilities 4. build-plugin.sh should use build/mvn to find mvn or install mvn 5. Fix puppycrawl vulnerabilities 6. Fix libthrift vulnerabilities. 6. Migrate some XSQL test classes to github 7. Upgrade jackson-databind to 2.9.10 and fix vulnerabilities. 8. Add Github pull request template Version Compatibility Compute/Storage/Language Version Grade Documentation Notes 2.11.8 PRODUCTION Data API is built on scala 2.11.8 2.4.3 This is the recommended version 2.7.3 This is the recommended version 1.2 PRODUCTION Hive Doc 5.6.19 PRODUCTION Mysql Doc POWER BY mysql-jdbc 0.10+ PRODUCTION Kafka Doc 5.2 PRODUCTION ElasticSearch Doc POWER BY ElasticSearch-Hadoop 0.10.0 PRODUCTION Druid Doc 2.3.0 PRODUCTION MongoDB Doc POWER BY MongoDB Connector 2.0 PRODUCTION WITH LIMITATIONS HBase Doc POWER BY SHC Connector 4.0.10 EXPERIMENTAL Redis Doc POWER BY jedis","title":"Home"},{"location":"#contents","text":"================= \u9879\u76ee\u6982\u51b5-Overview \u81ea\u5b9a\u4e49\u914d\u7f6e-Configuration \u7279\u6b8a\u8bed\u6cd5-Special Syntax \u652f\u6301\u7684API \u6570\u636e\u6e90\u8be6\u60c5-Data Sources \u6027\u80fd\u62a5\u544a-Performance Report \u5e38\u89c1\u95ee\u9898-Troubleshooting \u66f4\u65b0\u65e5\u5fd7-ReleaseNote","title":"Contents"},{"location":"#external-resources","text":"360\u5206\u5e03\u5f0f\u67e5\u8be2\u5f15\u64ceXSQL\uff1a\u6280\u672f\u63ed\u79d8\u4e0e\u4f7f\u7528\u4ecb\u7ecd XSQL\u63a8\u5e7fPPT","title":"External Resources"},{"location":"#release-notes","text":"\u7248\u672c\u53f7 \u53d1\u5e03\u65e5\u671f Bug Improvement New Feature 2.3.1.xsql-0.1.0 2019.01.31 2.3.1.xsql-0.2.0 2019.03.04 1.Desc Table\u5c55\u793aElasticsearch\u65f6\uff0c\u5217\u7c7b\u578b\u663e\u793a\u4e0d\u6b63\u786e 2.\u89e3\u51b3NoSuchDatabaseException\u5f02\u5e38\u6570\u636e\u5e93\u540d\u548c\u6570\u636e\u6e90\u540d\u79f0\u98a0\u5012\u7684\u95ee\u9898 3.Alter table\u65f6\uff0c\u65e0\u6cd5\u5c06Spark\u7684\u5217\u7c7b\u578b\u8f6c\u6362\u4e3aElasticsearch\u7684 4.\u5c06XSQL\u5185\u90e8\u7684\u6570\u636e\u5e93\u540d\u8f6c\u5316\u4e3a\u7269\u7406\u4e0a\u7684\u5b9e\u9645\u6570\u636e\u5e93\u540d\u79f0 5.\u4fee\u590dSQL\u9875\u9762\u4e22\u5931\u7684\u95ee\u9898 6.RenameXSQLTable must update the collection property in CatalogTable. 1.\u652f\u6301\u5bf9limit 0\u65f6\u7684\u63a2\u6d4b 2.show databases\u5c06\u6570\u636e\u5e93\u540d\u653e\u5728\u7b2c\u4e00\u5217\uff0cshow tables\u5c06\u8868\u540d\u653e\u5728\u7b2c\u4e00\u5217 3.\u4f18\u5316ElasticSearchManager\uff0c\u62bd\u8c61getTableOption 4.\u907f\u514d\u7f16\u8bd1Spark core\u6a21\u5757 5.\u5b8c\u5584XSQLSqlParser\u7684\u6ce8\u91ca 6.\u5b9e\u73b0\u9ed8\u8ba4listDatabases(ds, pattern) 7.Add default options for ES and mongo. 1.\u589e\u52a0Cache Level\u673a\u5236 2.\u652f\u6301 SQL\u9875\u9762\u663e\u793a\u67e5\u8be2\u8bed\u53e5 3.HBase\u9650\u5236\u975e\u7d22\u5f15\u5b57\u6bb5\u67e5\u8be2\u548c\u589e\u5220\u8868, force=true\u5f3a\u5236\u5f00\u542f 4.Add rename table syntax for MongoDB. 2.3.1.xsql-0.2.1 2019.03.06 1.\u89e3\u51b3spark.mongodb.input.uri\u6ca1\u6709\u4f20\u9012\u7ed9CatalogTable\u7684\u95ee\u9898 2.\u89e3\u51b3\u90e8\u5206jersey\u5305\u51b2\u7a81 \u66f4\u65b0XSQL\u6587\u6863\uff0c\u589e\u52a0\u5bf9Cache Level\u3001Whitelist\u3001spark.xsql.properties.file\u7b49\u7684\u63cf\u8ff0 2.3.1.xsql-0.2.2 2019.03.14 1.\u89e3\u51b3\uff1a\u89e3\u6790Elasticsearch\u7684object\u7c7b\u578b\u65f6\u51fa\u9519\u7684\u95ee\u9898 2.\u89e3\u51b3\uff1a\u5f53Elasticsearch\u7684discover\u6587\u4ef6\u4e0d\u5b58\u5728\u65f6\u51fa\u9519\u7684\u95ee\u9898 3.\u89e3\u51b3\uff1aElasticsearch relation\u6ca1\u6709\u5305\u542bes.read.field.as.array.include\u5c5e\u6027\u7684\u95ee\u9898 4.\u89e3\u51b3\uff1aElasticsearch\u7684float\u548carray[float]\u5728\u89e3\u6790\u65f6\u53d1\u751f\u6df7\u6dc6\u7684\u95ee\u9898 1.\u589e\u52a0\u8fd0\u7ef4\u8bca\u65ad\u6587\u6863 2.\u51cf\u5c11\u8026\u5408\uff0c\u4e0d\u518d\u4fee\u6539InsertIntoHiveTable 1.\u589e\u52a0Add datasource\u8bed\u6cd5 2.\u589e\u52a0Remove|Refresh datasource\u8bed\u6cd5 3.\u589e\u52a0\u63a2\u7d22Elasticsearch\u7684\u5b57\u6bb5schema\u7684\u529f\u80fd 2.3.1.xsql-0.2.3 2019.03.22 1.\u89e3\u51b3\uff1aElasticsearch\u4e0b\u63a8\u89e3\u6790\u6570\u636e\u65f6\uff0c\u5b57\u6bb5\u4e3anull\u65f6\u7684\u5f02\u5e38 2.\u89e3\u51b3\uff1aDruid\u5728SQL\u5305\u542b\u4e2d\u6587\u65f6\u89e3\u6790\u51fa\u9519\u7684\u95ee\u9898 3.\u89e3\u51b3\uff1a\u6267\u884cselect * group by\u65f6\u51fa\u9519\u7684\u95ee\u9898 1.Druid\u67e5\u8be2\u65f6\u6ca1\u6709\u6307\u5b9a__time\u65f6,\u53cb\u597d\u63d0\u793a\u7528\u6237 2.\u5b8c\u5584Getting_Started\u6587\u6863\u7684\u7528\u4f8b 3.\u524d\u7f6eSQL\u8bed\u6cd5\u6821\u9a8c\u5230Local\u6a21\u5f0f\u5207\u6362Yarn\u6a21\u5f0f\u4e4b\u524d 1.Druid\u652f\u6301\u4e8c\u7ea7\u7f13\u5b58 2.3.1.xsql-0.3.0 2019.04.04 1.\u89e3\u51b3\uff1a\u907f\u514d\u4e0b\u63a8Mysql\u4e0d\u652f\u6301\u7684\u51fd\u6570 2.\u89e3\u51b3\uff1aMysql\u5206\u533a\u4fe1\u606f\u4e22\u5931 1.Hbase,Druid \u6a21\u5757\u5316 2.\u4f18\u5316 DataSourceManager\u63d2\u4ef6\u5316\u4ee3\u7801 3.\u6e05\u7406\u5197\u4f59\u7684\u4f9d\u8d56 1.\u652f\u6301\u7ed9SQL\u4e2d\u53ef\u4ee5\u4e0b\u63a8\u7684\u5b50\u67e5\u8be2\u52a0\u522b\u540d 2.Elasticsearch\u652f\u6301Scroll\u63a5\u53e3\uff0c\u52a0\u901f\u67e5\u8be2\u6548\u7387 3.Elasticsearch\u652f\u6301es.read.field.empty.as.null\u914d\u7f6e 4.\u589e\u52a0Hive \u6743\u9650\u9a8c\u8bc1\u6a21\u5757spark-authorizer 2.3.1.xsql-0.3.1 2019.04.09 1.\u89e3\u51b3\uff1aLocal\u6a21\u5f0f\u5207\u6362Yarn\u6a21\u5f0f\u65f6\uff0c\u4efb\u52a1\u94fe\u63a5\u90e8\u5206\u6807\u7b7e\u9875\u4e0d\u663e\u793a\u7684\u95ee\u9898 2.\u89e3\u51b3\uff1aLocal\u6a21\u5f0f\u6267\u884ccreate table using parquet\u7b49\u540e\uff0c\u5207\u6362Yarn\u6a21\u5f0f\u5bfc\u81f4\u5e95\u5c42\u521b\u5efa\u7684HadoopFsRelation\u8fd8\u662fLocal\u6a21\u5f0f\u4e0b\u5df2\u7ecf\u5173\u95ed\u7684SparkSession 3.\u89e3\u51b3\uff1a\u79fb\u9664spark-hive\u811a\u672c\u540e\uff0c\u96be\u4ee5\u65e0\u7f1d\u8fc1\u79fb 4.\u89e3\u51b3\uff1aHbase,Druid \u6a21\u5757\u5316\u540e\uff0cServiceLoader\u627e\u4e0d\u5230\u5bf9\u5e94DataSourceRegister\u5b9e\u73b0\u7684Bug 1. \u4fdd\u7559\u652f\u6301bin/spark-hive 2. Hbase\u3001Druid\u9700\u989d\u5916\u914d\u7f6e\uff0c\u4ece\u800c\u63a7\u5236jars\u5927\u5c0f 2.3.1.xsql-0.3.2 2019.05.25 1. bin/spark-xsql\u652f\u6301${}\u5b57\u7b26\u4e32\u53d8\u91cf 2. datasource\u5173\u952e\u5b57\u4e0e\u5217\u540d\u51b2\u7a81 3. processSingleTable assert\u5931\u8d25 4. !\u5f00\u5934\u7684\u547d\u4ee4cast\u62a5\u9519 5. OutOfDriectMemoryError 1. \u652f\u6301Hive\u7684remove datasource if exists 2. \u652f\u6301Hive\u7684insert overwrite directory using xxx 3. \u589e\u52a0Yarn\u4f18\u5148\u7ea7\u63a7\u5236\u53c2\u6570spark-sql --priority 2.3.1.xsql-0.4.0 2019.07.01 1. load data partition 2. StackOverflow caused by window functions 3. select using script 1. set \u4e0d\u518d\u89e6\u53d1job 2. local\u6a21\u5f0f\u4e0d\u518d\u4ea7\u751f\u65e5\u5fd7\u6587\u4ef6 1.\u652f\u6301Hive\u7684distribute by 2.\u63a5\u5165Kafka\u6570\u636e\u6e90 2.4.3.xsql-0.5.0 2019.08.01 1.\u4fee\u590d\u4efb\u52a1\u7ed3\u675f\u65f6\u62a5\u9519java.io.IOException: Filesystem closed 2.\u89e3\u51b3HDFS0.2\u7248\u672c\u4e0eSpark\u6d41\u5f0fSQL\u6240\u4f7f\u7528HDFS\u9ad8\u7248\u672c\u7684\u517c\u5bb9\u6027\u95ee\u9898 3.\u4fee\u590dMongoManager\u3001ElasticSearchManager\u5728Local\u6a21\u5f0f\u4e0b\uff0c\u4f7f\u7528SparkSession.getActiveSession\u7684bug 4.\u89e3\u51b3XSQL\u5347\u7ea7Spark2.4.3\u540e\uff0c\u6d41\u5f0fSQL\u65e0\u6cd5\u652f\u6301\u4e0b\u63a8\u7684\u95ee\u9898 \u5347\u7ea7\u81f3Spark2.4.3\u6838\u5fc3 \u652f\u6301\u6d41\u5f0fSQL\u8ba1\u7b97Kafka\u6570\u636e 2.4.3.xsql-0.6.0 2019.08.30 1.\u4fee\u6539SparkXSQLShell\u4e2d\u9519\u8bef\u7684\u6253\u5370SparkHiveShell\u4fe1\u606f 1.\u901a\u8fc7ServiceLoader\u52a0\u8f7dDatasourceManager\u5b9e\u73b0 2.\u589e\u52a0\u5de5\u4f5c\u6570\u636e\u6e90\uff0c\u51cf\u5c11\u5728\u6570\u636e\u5b57\u5178\u8bfb\u5199\u8fc7\u7a0b\u4e2d\uff0c\u53cd\u590d\u83b7\u53d6\u6570\u636e\u6e90 3.DataSourceManager\u7ee7\u627fExternalCatalog\uff0c\u51cf\u5c11\u76f8\u540c\u7684\u65b9\u6cd5\u7b7e\u540d 4.\u4fee\u6539mkdocs\u6587\u6863\u98ce\u683c 5.\u589e\u52a0xsql.conf.template 6.\u6dfb\u52a0\u76d1\u63a7\u6a21\u5757 1.\u652f\u6301\u63d2\u4ef6\u5316 2.\u589e\u52a0\u4e2d\u82f1\u6587README 3.\u589e\u52a0LOGO 2.4.3.xsql-0.6.1 2019.08.11 1. Rename the prefix of jars from spark to xsql. 2. Fix the bug that can't find default database when default database's name is not default 3. Solve sql select query that select is followed by \\n can't run when we use -e sql 4. Fix cannot find spark-xsql-shell. 5. .hiverc is loaded twice making create function throw exception 6. Correct the content of license file for XSQL. 1. Fix com.fasterxml.jackson.core:jackson-databind vulnerabilities. 2. Fix org.jpmml:pmml-model vulnerabilities. 3. Fix zookeeper vulnerabilities 4. build-plugin.sh should use build/mvn to find mvn or install mvn 5. Fix puppycrawl vulnerabilities 6. Fix libthrift vulnerabilities. 6. Migrate some XSQL test classes to github 7. Upgrade jackson-databind to 2.9.10 and fix vulnerabilities. 8. Add Github pull request template","title":"Release Notes"},{"location":"#version-compatibility","text":"Compute/Storage/Language Version Grade Documentation Notes 2.11.8 PRODUCTION Data API is built on scala 2.11.8 2.4.3 This is the recommended version 2.7.3 This is the recommended version 1.2 PRODUCTION Hive Doc 5.6.19 PRODUCTION Mysql Doc POWER BY mysql-jdbc 0.10+ PRODUCTION Kafka Doc 5.2 PRODUCTION ElasticSearch Doc POWER BY ElasticSearch-Hadoop 0.10.0 PRODUCTION Druid Doc 2.3.0 PRODUCTION MongoDB Doc POWER BY MongoDB Connector 2.0 PRODUCTION WITH LIMITATIONS HBase Doc POWER BY SHC Connector 4.0.10 EXPERIMENTAL Redis Doc POWER BY jedis","title":"Version Compatibility"},{"location":"functions/","text":"! ! expr - Logical not. % expr1 % expr2 - Returns the remainder after expr1 / expr2 . Examples: SELECT 2 % 1.8; 0.2 SELECT MOD(2, 1.8); 0.2 expr1 expr2 - Returns the result of bitwise AND of expr1 and expr2 . Examples: SELECT 3 5; 1 * expr1 * expr2 - Returns expr1 * expr2 . Examples: SELECT 2 * 3; 6 + expr1 + expr2 - Returns expr1 + expr2 . Examples: SELECT 1 + 2; 3 - expr1 - expr2 - Returns expr1 - expr2 . Examples: SELECT 2 - 1; 1 / expr1 / expr2 - Returns expr1 / expr2 . It always performs floating point division. Examples: SELECT 3 / 2; 1.5 SELECT 2L / 2L; 1.0 expr1 expr2 - Returns true if expr1 is less than expr2 . Arguments: expr1, expr2 - the two expressions must be same type or can be casted to a common type, and must be a type that can be ordered. For example, map type is not orderable, so it is not supported. For complex types such array/struct, the data types of fields must be orderable. Examples: SELECT 1 2; true SELECT 1.1 '1'; false SELECT to_date('2009-07-30 04:17:52') to_date('2009-07-30 04:17:52'); false SELECT to_date('2009-07-30 04:17:52') to_date('2009-08-01 04:17:52'); true SELECT 1 NULL; NULL = expr1 = expr2 - Returns true if expr1 is less than or equal to expr2 . Arguments: expr1, expr2 - the two expressions must be same type or can be casted to a common type, and must be a type that can be ordered. For example, map type is not orderable, so it is not supported. For complex types such array/struct, the data types of fields must be orderable. Examples: SELECT 2 = 2; true SELECT 1.0 = '1'; true SELECT to_date('2009-07-30 04:17:52') = to_date('2009-07-30 04:17:52'); true SELECT to_date('2009-07-30 04:17:52') = to_date('2009-08-01 04:17:52'); true SELECT 1 = NULL; NULL = expr1 = expr2 - Returns same result as the EQUAL(=) operator for non-null operands, but returns true if both are null, false if one of the them is null. Arguments: expr1, expr2 - the two expressions must be same type or can be casted to a common type, and must be a type that can be used in equality comparison. Map type is not supported. For complex types such array/struct, the data types of fields must be orderable. Examples: SELECT 2 = 2; true SELECT 1 = '1'; true SELECT true = NULL; false SELECT NULL = NULL; true = expr1 = expr2 - Returns true if expr1 equals expr2 , or false otherwise. Arguments: expr1, expr2 - the two expressions must be same type or can be casted to a common type, and must be a type that can be used in equality comparison. Map type is not supported. For complex types such array/struct, the data types of fields must be orderable. Examples: SELECT 2 = 2; true SELECT 1 = '1'; true SELECT true = NULL; NULL SELECT NULL = NULL; NULL == expr1 == expr2 - Returns true if expr1 equals expr2 , or false otherwise. Arguments: expr1, expr2 - the two expressions must be same type or can be casted to a common type, and must be a type that can be used in equality comparison. Map type is not supported. For complex types such array/struct, the data types of fields must be orderable. Examples: SELECT 2 == 2; true SELECT 1 == '1'; true SELECT true == NULL; NULL SELECT NULL == NULL; NULL expr1 expr2 - Returns true if expr1 is greater than expr2 . Arguments: expr1, expr2 - the two expressions must be same type or can be casted to a common type, and must be a type that can be ordered. For example, map type is not orderable, so it is not supported. For complex types such array/struct, the data types of fields must be orderable. Examples: SELECT 2 1; true SELECT 2 '1.1'; true SELECT to_date('2009-07-30 04:17:52') to_date('2009-07-30 04:17:52'); false SELECT to_date('2009-07-30 04:17:52') to_date('2009-08-01 04:17:52'); false SELECT 1 NULL; NULL = expr1 = expr2 - Returns true if expr1 is greater than or equal to expr2 . Arguments: expr1, expr2 - the two expressions must be same type or can be casted to a common type, and must be a type that can be ordered. For example, map type is not orderable, so it is not supported. For complex types such array/struct, the data types of fields must be orderable. Examples: SELECT 2 = 1; true SELECT 2.0 = '2.1'; false SELECT to_date('2009-07-30 04:17:52') = to_date('2009-07-30 04:17:52'); true SELECT to_date('2009-07-30 04:17:52') = to_date('2009-08-01 04:17:52'); false SELECT 1 = NULL; NULL ^ expr1 ^ expr2 - Returns the result of bitwise exclusive OR of expr1 and expr2 . Examples: SELECT 3 ^ 5; 2 abs abs(expr) - Returns the absolute value of the numeric value. Examples: SELECT abs(-1); 1 acos acos(expr) - Returns the inverse cosine (a.k.a. arc cosine) of expr , as if computed by java.lang.Math.acos . Examples: SELECT acos(1); 0.0 SELECT acos(2); NaN add_months add_months(start_date, num_months) - Returns the date that is num_months after start_date . Examples: SELECT add_months('2016-08-31', 1); 2016-09-30 Since: 1.5.0 and expr1 and expr2 - Logical AND. approx_count_distinct approx_count_distinct(expr[, relativeSD]) - Returns the estimated cardinality by HyperLogLog++. relativeSD defines the maximum estimation error allowed. approx_percentile approx_percentile(col, percentage [, accuracy]) - Returns the approximate percentile value of numeric column col at the given percentage. The value of percentage must be between 0.0 and 1.0. The accuracy parameter (default: 10000) is a positive numeric literal which controls approximation accuracy at the cost of memory. Higher value of accuracy yields better accuracy, 1.0/accuracy is the relative error of the approximation. When percentage is an array, each value of the percentage array must be between 0.0 and 1.0. In this case, returns the approximate percentile array of column col at the given percentage array. Examples: SELECT approx_percentile(10.0, array(0.5, 0.4, 0.1), 100); [10.0,10.0,10.0] SELECT approx_percentile(10.0, 0.5, 100); 10.0 array array(expr, ...) - Returns an array with the given elements. Examples: SELECT array(1, 2, 3); [1,2,3] array_contains array_contains(array, value) - Returns true if the array contains the value. Examples: SELECT array_contains(array(1, 2, 3), 2); true ascii ascii(str) - Returns the numeric value of the first character of str . Examples: SELECT ascii('222'); 50 SELECT ascii(2); 50 asin asin(expr) - Returns the inverse sine (a.k.a. arc sine) the arc sin of expr , as if computed by java.lang.Math.asin . Examples: SELECT asin(0); 0.0 SELECT asin(2); NaN assert_true assert_true(expr) - Throws an exception if expr is not true. Examples: SELECT assert_true(0 1); NULL atan atan(expr) - Returns the inverse tangent (a.k.a. arc tangent) of expr , as if computed by java.lang.Math.atan Examples: SELECT atan(0); 0.0 atan2 atan2(exprY, exprX) - Returns the angle in radians between the positive x-axis of a plane and the point given by the coordinates ( exprX , exprY ), as if computed by java.lang.Math.atan2 . Arguments: exprY - coordinate on y-axis exprX - coordinate on x-axis Examples: SELECT atan2(0, 0); 0.0 avg avg(expr) - Returns the mean calculated from values of a group. base64 base64(bin) - Converts the argument from a binary bin to a base 64 string. Examples: SELECT base64('Spark SQL'); U3BhcmsgU1FM bigint bigint(expr) - Casts the value expr to the target data type bigint . bin bin(expr) - Returns the string representation of the long value expr represented in binary. Examples: SELECT bin(13); 1101 SELECT bin(-13); 1111111111111111111111111111111111111111111111111111111111110011 SELECT bin(13.3); 1101 binary binary(expr) - Casts the value expr to the target data type binary . bit_length bit_length(expr) - Returns the bit length of string data or number of bits of binary data. Examples: SELECT bit_length('Spark SQL'); 72 boolean boolean(expr) - Casts the value expr to the target data type boolean . bround bround(expr, d) - Returns expr rounded to d decimal places using HALF_EVEN rounding mode. Examples: SELECT bround(2.5, 0); 2.0 cast cast(expr AS type) - Casts the value expr to the target data type type . Examples: SELECT cast('10' as int); 10 cbrt cbrt(expr) - Returns the cube root of expr . Examples: SELECT cbrt(27.0); 3.0 ceil ceil(expr) - Returns the smallest integer not smaller than expr . Examples: SELECT ceil(-0.1); 0 SELECT ceil(5); 5 ceiling ceiling(expr) - Returns the smallest integer not smaller than expr . Examples: SELECT ceiling(-0.1); 0 SELECT ceiling(5); 5 char char(expr) - Returns the ASCII character having the binary equivalent to expr . If n is larger than 256 the result is equivalent to chr(n % 256) Examples: SELECT char(65); A char_length char_length(expr) - Returns the character length of string data or number of bytes of binary data. The length of string data includes the trailing spaces. The length of binary data includes binary zeros. Examples: SELECT char_length('Spark SQL '); 10 SELECT CHAR_LENGTH('Spark SQL '); 10 SELECT CHARACTER_LENGTH('Spark SQL '); 10 character_length character_length(expr) - Returns the character length of string data or number of bytes of binary data. The length of string data includes the trailing spaces. The length of binary data includes binary zeros. Examples: SELECT character_length('Spark SQL '); 10 SELECT CHAR_LENGTH('Spark SQL '); 10 SELECT CHARACTER_LENGTH('Spark SQL '); 10 chr chr(expr) - Returns the ASCII character having the binary equivalent to expr . If n is larger than 256 the result is equivalent to chr(n % 256) Examples: SELECT chr(65); A coalesce coalesce(expr1, expr2, ...) - Returns the first non-null argument if exists. Otherwise, null. Examples: SELECT coalesce(NULL, 1, NULL); 1 collect_list collect_list(expr) - Collects and returns a list of non-unique elements. collect_set collect_set(expr) - Collects and returns a set of unique elements. concat concat(str1, str2, ..., strN) - Returns the concatenation of str1, str2, ..., strN. Examples: SELECT concat('Spark', 'SQL'); SparkSQL concat_ws concat_ws(sep, [str | array(str)]+) - Returns the concatenation of the strings separated by sep . Examples: SELECT concat_ws(' ', 'Spark', 'SQL'); Spark SQL conv conv(num, from_base, to_base) - Convert num from from_base to to_base . Examples: SELECT conv('100', 2, 10); 4 SELECT conv(-10, 16, -10); -16 corr corr(expr1, expr2) - Returns Pearson coefficient of correlation between a set of number pairs. cos cos(expr) - Returns the cosine of expr , as if computed by java.lang.Math.cos . Arguments: expr - angle in radians Examples: SELECT cos(0); 1.0 cosh cosh(expr) - Returns the hyperbolic cosine of expr , as if computed by java.lang.Math.cosh . Arguments: expr - hyperbolic angle Examples: SELECT cosh(0); 1.0 cot cot(expr) - Returns the cotangent of expr , as if computed by 1/java.lang.Math.cot . Arguments: expr - angle in radians Examples: SELECT cot(1); 0.6420926159343306 count count(*) - Returns the total number of retrieved rows, including rows containing null. count(expr) - Returns the number of rows for which the supplied expression is non-null. count(DISTINCT expr[, expr...]) - Returns the number of rows for which the supplied expression(s) are unique and non-null. count_min_sketch count_min_sketch(col, eps, confidence, seed) - Returns a count-min sketch of a column with the given esp, confidence and seed. The result is an array of bytes, which can be deserialized to a CountMinSketch before usage. Count-min sketch is a probabilistic data structure used for cardinality estimation using sub-linear space. covar_pop covar_pop(expr1, expr2) - Returns the population covariance of a set of number pairs. covar_samp covar_samp(expr1, expr2) - Returns the sample covariance of a set of number pairs. crc32 crc32(expr) - Returns a cyclic redundancy check value of the expr as a bigint. Examples: SELECT crc32('Spark'); 1557323817 cube cume_dist cume_dist() - Computes the position of a value relative to all values in the partition. current_database current_database() - Returns the current database. Examples: SELECT current_database(); default current_date current_date() - Returns the current date at the start of query evaluation. Since: 1.5.0 current_timestamp current_timestamp() - Returns the current timestamp at the start of query evaluation. Since: 1.5.0 date date(expr) - Casts the value expr to the target data type date . date_add date_add(start_date, num_days) - Returns the date that is num_days after start_date . Examples: SELECT date_add('2016-07-30', 1); 2016-07-31 Since: 1.5.0 date_format date_format(timestamp, fmt) - Converts timestamp to a value of string in the format specified by the date format fmt . Examples: SELECT date_format('2016-04-08', 'y'); 2016 Since: 1.5.0 date_sub date_sub(start_date, num_days) - Returns the date that is num_days before start_date . Examples: SELECT date_sub('2016-07-30', 1); 2016-07-29 Since: 1.5.0 date_trunc date_trunc(fmt, ts) - Returns timestamp ts truncated to the unit specified by the format model fmt . fmt should be one of [\"YEAR\", \"YYYY\", \"YY\", \"MON\", \"MONTH\", \"MM\", \"DAY\", \"DD\", \"HOUR\", \"MINUTE\", \"SECOND\", \"WEEK\", \"QUARTER\"] Examples: SELECT date_trunc('2015-03-05T09:32:05.359', 'YEAR'); 2015-01-01T00:00:00 SELECT date_trunc('2015-03-05T09:32:05.359', 'MM'); 2015-03-01T00:00:00 SELECT date_trunc('2015-03-05T09:32:05.359', 'DD'); 2015-03-05T00:00:00 SELECT date_trunc('2015-03-05T09:32:05.359', 'HOUR'); 2015-03-05T09:00:00 Since: 2.3.0 datediff datediff(endDate, startDate) - Returns the number of days from startDate to endDate . Examples: SELECT datediff('2009-07-31', '2009-07-30'); 1 SELECT datediff('2009-07-30', '2009-07-31'); -1 Since: 1.5.0 day day(date) - Returns the day of month of the date/timestamp. Examples: SELECT day('2009-07-30'); 30 Since: 1.5.0 dayofmonth dayofmonth(date) - Returns the day of month of the date/timestamp. Examples: SELECT dayofmonth('2009-07-30'); 30 Since: 1.5.0 dayofweek dayofweek(date) - Returns the day of the week for date/timestamp (1 = Sunday, 2 = Monday, ..., 7 = Saturday). Examples: SELECT dayofweek('2009-07-30'); 5 Since: 2.3.0 dayofyear dayofyear(date) - Returns the day of year of the date/timestamp. Examples: SELECT dayofyear('2016-04-09'); 100 Since: 1.5.0 decimal decimal(expr) - Casts the value expr to the target data type decimal . decode decode(bin, charset) - Decodes the first argument using the second argument character set. Examples: SELECT decode(encode('abc', 'utf-8'), 'utf-8'); abc degrees degrees(expr) - Converts radians to degrees. Arguments: expr - angle in radians Examples: SELECT degrees(3.141592653589793); 180.0 dense_rank dense_rank() - Computes the rank of a value in a group of values. The result is one plus the previously assigned rank value. Unlike the function rank, dense_rank will not produce gaps in the ranking sequence. double double(expr) - Casts the value expr to the target data type double . e e() - Returns Euler's number, e. Examples: SELECT e(); 2.718281828459045 elt elt(n, input1, input2, ...) - Returns the n -th input, e.g., returns input2 when n is 2. Examples: SELECT elt(1, 'scala', 'java'); scala encode encode(str, charset) - Encodes the first argument using the second argument character set. Examples: SELECT encode('abc', 'utf-8'); abc exp exp(expr) - Returns e to the power of expr . Examples: SELECT exp(0); 1.0 explode explode(expr) - Separates the elements of array expr into multiple rows, or the elements of map expr into multiple rows and columns. Examples: SELECT explode(array(10, 20)); 10 20 explode_outer explode_outer(expr) - Separates the elements of array expr into multiple rows, or the elements of map expr into multiple rows and columns. Examples: SELECT explode_outer(array(10, 20)); 10 20 expm1 expm1(expr) - Returns exp( expr ) - 1. Examples: SELECT expm1(0); 0.0 factorial factorial(expr) - Returns the factorial of expr . expr is [0..20]. Otherwise, null. Examples: SELECT factorial(5); 120 find_in_set find_in_set(str, str_array) - Returns the index (1-based) of the given string ( str ) in the comma-delimited list ( str_array ). Returns 0, if the string was not found or if the given string ( str ) contains a comma. Examples: SELECT find_in_set('ab','abc,b,ab,c,def'); 3 first first(expr[, isIgnoreNull]) - Returns the first value of expr for a group of rows. If isIgnoreNull is true, returns only non-null values. first_value first_value(expr[, isIgnoreNull]) - Returns the first value of expr for a group of rows. If isIgnoreNull is true, returns only non-null values. float float(expr) - Casts the value expr to the target data type float . floor floor(expr) - Returns the largest integer not greater than expr . Examples: SELECT floor(-0.1); -1 SELECT floor(5); 5 format_number format_number(expr1, expr2) - Formats the number expr1 like '#,###,###.##', rounded to expr2 decimal places. If expr2 is 0, the result has no decimal point or fractional part. This is supposed to function like MySQL's FORMAT. Examples: SELECT format_number(12332.123456, 4); 12,332.1235 format_string format_string(strfmt, obj, ...) - Returns a formatted string from printf-style format strings. Examples: SELECT format_string( Hello World %d %s , 100, days ); Hello World 100 days from_json from_json(jsonStr, schema[, options]) - Returns a struct value with the given jsonStr and schema . Examples: SELECT from_json('{ a :1, b :0.8}', 'a INT, b DOUBLE'); { a :1, b :0.8} SELECT from_json('{ time : 26/08/2015 }', 'time Timestamp', map('timestampFormat', 'dd/MM/yyyy')); { time : 2015-08-26 00:00:00.0 } Since: 2.2.0 from_unixtime from_unixtime(unix_time, format) - Returns unix_time in the specified format . Examples: SELECT from_unixtime(0, 'yyyy-MM-dd HH:mm:ss'); 1970-01-01 00:00:00 Since: 1.5.0 from_utc_timestamp from_utc_timestamp(timestamp, timezone) - Given a timestamp like '2017-07-14 02:40:00.0', interprets it as a time in UTC, and renders that time as a timestamp in the given time zone. For example, 'GMT+1' would yield '2017-07-14 03:40:00.0'. Examples: SELECT from_utc_timestamp('2016-08-31', 'Asia/Seoul'); 2016-08-31 09:00:00 Since: 1.5.0 get_json_object get_json_object(json_txt, path) - Extracts a json object from path . Examples: SELECT get_json_object('{ a : b }', '$.a'); b greatest greatest(expr, ...) - Returns the greatest value of all parameters, skipping null values. Examples: SELECT greatest(10, 9, 2, 4, 3); 10 grouping grouping_id hash hash(expr1, expr2, ...) - Returns a hash value of the arguments. Examples: SELECT hash('Spark', array(123), 2); -1321691492 hex hex(expr) - Converts expr to hexadecimal. Examples: SELECT hex(17); 11 SELECT hex('Spark SQL'); 537061726B2053514C hour hour(timestamp) - Returns the hour component of the string/timestamp. Examples: SELECT hour('2009-07-30 12:58:59'); 12 Since: 1.5.0 hypot hypot(expr1, expr2) - Returns sqrt( expr1 2 + expr2 2). Examples: SELECT hypot(3, 4); 5.0 if if(expr1, expr2, expr3) - If expr1 evaluates to true, then returns expr2 ; otherwise returns expr3 . Examples: SELECT if(1 2, 'a', 'b'); a ifnull ifnull(expr1, expr2) - Returns expr2 if expr1 is null, or expr1 otherwise. Examples: SELECT ifnull(NULL, array('2')); [ 2 ] in expr1 in(expr2, expr3, ...) - Returns true if expr equals to any valN. Arguments: expr1, expr2, expr3, ... - the arguments must be same type. Examples: SELECT 1 in(1, 2, 3); true SELECT 1 in(2, 3, 4); false SELECT named_struct('a', 1, 'b', 2) in(named_struct('a', 1, 'b', 1), named_struct('a', 1, 'b', 3)); false SELECT named_struct('a', 1, 'b', 2) in(named_struct('a', 1, 'b', 2), named_struct('a', 1, 'b', 3)); true initcap initcap(str) - Returns str with the first letter of each word in uppercase. All other letters are in lowercase. Words are delimited by white space. Examples: SELECT initcap('sPark sql'); Spark Sql inline inline(expr) - Explodes an array of structs into a table. Examples: SELECT inline(array(struct(1, 'a'), struct(2, 'b'))); 1 a 2 b inline_outer inline_outer(expr) - Explodes an array of structs into a table. Examples: SELECT inline_outer(array(struct(1, 'a'), struct(2, 'b'))); 1 a 2 b input_file_block_length input_file_block_length() - Returns the length of the block being read, or -1 if not available. input_file_block_start input_file_block_start() - Returns the start offset of the block being read, or -1 if not available. input_file_name input_file_name() - Returns the name of the file being read, or empty string if not available. instr instr(str, substr) - Returns the (1-based) index of the first occurrence of substr in str . Examples: SELECT instr('SparkSQL', 'SQL'); 6 int int(expr) - Casts the value expr to the target data type int . isnan isnan(expr) - Returns true if expr is NaN, or false otherwise. Examples: SELECT isnan(cast('NaN' as double)); true isnotnull isnotnull(expr) - Returns true if expr is not null, or false otherwise. Examples: SELECT isnotnull(1); true isnull isnull(expr) - Returns true if expr is null, or false otherwise. Examples: SELECT isnull(1); false java_method java_method(class, method[, arg1[, arg2 ..]]) - Calls a method with reflection. Examples: SELECT java_method('java.util.UUID', 'randomUUID'); c33fb387-8500-4bfa-81d2-6e0e3e930df2 SELECT java_method('java.util.UUID', 'fromString', 'a5cf6c42-0c85-418f-af6c-3e4e5b1328f2'); a5cf6c42-0c85-418f-af6c-3e4e5b1328f2 json_tuple json_tuple(jsonStr, p1, p2, ..., pn) - Returns a tuple like the function get_json_object, but it takes multiple names. All the input parameters and output column types are string. Examples: SELECT json_tuple('{ a :1, b :2}', 'a', 'b'); 1 2 kurtosis kurtosis(expr) - Returns the kurtosis value calculated from values of a group. lag lag(input[, offset[, default]]) - Returns the value of input at the offset th row before the current row in the window. The default value of offset is 1 and the default value of default is null. If the value of input at the offset th row is null, null is returned. If there is no such offset row (e.g., when the offset is 1, the first row of the window does not have any previous row), default is returned. last last(expr[, isIgnoreNull]) - Returns the last value of expr for a group of rows. If isIgnoreNull is true, returns only non-null values. last_day last_day(date) - Returns the last day of the month which the date belongs to. Examples: SELECT last_day('2009-01-12'); 2009-01-31 Since: 1.5.0 last_value last_value(expr[, isIgnoreNull]) - Returns the last value of expr for a group of rows. If isIgnoreNull is true, returns only non-null values. lcase lcase(str) - Returns str with all characters changed to lowercase. Examples: SELECT lcase('SparkSql'); sparksql lead lead(input[, offset[, default]]) - Returns the value of input at the offset th row after the current row in the window. The default value of offset is 1 and the default value of default is null. If the value of input at the offset th row is null, null is returned. If there is no such an offset row (e.g., when the offset is 1, the last row of the window does not have any subsequent row), default is returned. least least(expr, ...) - Returns the least value of all parameters, skipping null values. Examples: SELECT least(10, 9, 2, 4, 3); 2 left left(str, len) - Returns the leftmost len ( len can be string type) characters from the string str ,if len is less or equal than 0 the result is an empty string. Examples: SELECT left('Spark SQL', 3); Spa length length(expr) - Returns the character length of string data or number of bytes of binary data. The length of string data includes the trailing spaces. The length of binary data includes binary zeros. Examples: SELECT length('Spark SQL '); 10 SELECT CHAR_LENGTH('Spark SQL '); 10 SELECT CHARACTER_LENGTH('Spark SQL '); 10 levenshtein levenshtein(str1, str2) - Returns the Levenshtein distance between the two given strings. Examples: SELECT levenshtein('kitten', 'sitting'); 3 like str like pattern - Returns true if str matches pattern, null if any arguments are null, false otherwise. Arguments: str - a string expression pattern - a string expression. The pattern is a string which is matched literally, with exception to the following special symbols: _ matches any one character in the input (similar to . in posix regular expressions) % matches zero or more characters in the input (similar to .* in posix regular expressions) The escape character is '\\'. If an escape character precedes a special symbol or another escape character, the following character is matched literally. It is invalid to escape any other character. Since Spark 2.0, string literals are unescaped in our SQL parser. For example, in order to match \"\\abc\", the pattern should be \"\\abc\". When SQL config 'spark.sql.parser.escapedStringLiterals' is enabled, it fallbacks to Spark 1.6 behavior regarding string literal parsing. For example, if the config is enabled, the pattern to match \"\\abc\" should be \"\\abc\". Examples: SELECT '%SystemDrive%\\Users\\John' like '\\%SystemDrive\\%\\\\Users%' true Note: Use RLIKE to match with standard regular expressions. ln ln(expr) - Returns the natural logarithm (base e) of expr . Examples: SELECT ln(1); 0.0 locate locate(substr, str[, pos]) - Returns the position of the first occurrence of substr in str after position pos . The given pos and return value are 1-based. Examples: SELECT locate('bar', 'foobarbar'); 4 SELECT locate('bar', 'foobarbar', 5); 7 SELECT POSITION('bar' IN 'foobarbar'); 4 log log(base, expr) - Returns the logarithm of expr with base . Examples: SELECT log(10, 100); 2.0 log10 log10(expr) - Returns the logarithm of expr with base 10. Examples: SELECT log10(10); 1.0 log1p log1p(expr) - Returns log(1 + expr ). Examples: SELECT log1p(0); 0.0 log2 log2(expr) - Returns the logarithm of expr with base 2. Examples: SELECT log2(2); 1.0 lower lower(str) - Returns str with all characters changed to lowercase. Examples: SELECT lower('SparkSql'); sparksql lpad lpad(str, len, pad) - Returns str , left-padded with pad to a length of len . If str is longer than len , the return value is shortened to len characters. Examples: SELECT lpad('hi', 5, '??'); ???hi SELECT lpad('hi', 1, '??'); h ltrim ltrim(str) - Removes the leading space characters from str . ltrim(trimStr, str) - Removes the leading string contains the characters from the trim string Arguments: str - a string expression trimStr - the trim string characters to trim, the default value is a single space Examples: SELECT ltrim(' SparkSQL '); SparkSQL SELECT ltrim('Sp', 'SSparkSQLS'); arkSQLS map map(key0, value0, key1, value1, ...) - Creates a map with the given key/value pairs. Examples: SELECT map(1.0, '2', 3.0, '4'); {1.0: 2 ,3.0: 4 } map_keys map_keys(map) - Returns an unordered array containing the keys of the map. Examples: SELECT map_keys(map(1, 'a', 2, 'b')); [1,2] map_values map_values(map) - Returns an unordered array containing the values of the map. Examples: SELECT map_values(map(1, 'a', 2, 'b')); [ a , b ] max max(expr) - Returns the maximum value of expr . md5 md5(expr) - Returns an MD5 128-bit checksum as a hex string of expr . Examples: SELECT md5('Spark'); 8cde774d6f7333752ed72cacddb05126 mean mean(expr) - Returns the mean calculated from values of a group. min min(expr) - Returns the minimum value of expr . minute minute(timestamp) - Returns the minute component of the string/timestamp. Examples: SELECT minute('2009-07-30 12:58:59'); 58 Since: 1.5.0 mod expr1 mod expr2 - Returns the remainder after expr1 / expr2 . Examples: SELECT 2 mod 1.8; 0.2 SELECT MOD(2, 1.8); 0.2 monotonically_increasing_id monotonically_increasing_id() - Returns monotonically increasing 64-bit integers. The generated ID is guaranteed to be monotonically increasing and unique, but not consecutive. The current implementation puts the partition ID in the upper 31 bits, and the lower 33 bits represent the record number within each partition. The assumption is that the data frame has less than 1 billion partitions, and each partition has less than 8 billion records. month month(date) - Returns the month component of the date/timestamp. Examples: SELECT month('2016-07-30'); 7 Since: 1.5.0 months_between months_between(timestamp1, timestamp2) - Returns number of months between timestamp1 and timestamp2 . Examples: SELECT months_between('1997-02-28 10:30:00', '1996-10-30'); 3.94959677 Since: 1.5.0 named_struct named_struct(name1, val1, name2, val2, ...) - Creates a struct with the given field names and values. Examples: SELECT named_struct( a , 1, b , 2, c , 3); { a :1, b :2, c :3} nanvl nanvl(expr1, expr2) - Returns expr1 if it's not NaN, or expr2 otherwise. Examples: SELECT nanvl(cast('NaN' as double), 123); 123.0 negative negative(expr) - Returns the negated value of expr . Examples: SELECT negative(1); -1 next_day next_day(start_date, day_of_week) - Returns the first date which is later than start_date and named as indicated. Examples: SELECT next_day('2015-01-14', 'TU'); 2015-01-20 Since: 1.5.0 not not expr - Logical not. now now() - Returns the current timestamp at the start of query evaluation. Since: 1.5.0 ntile ntile(n) - Divides the rows for each window partition into n buckets ranging from 1 to at most n . nullif nullif(expr1, expr2) - Returns null if expr1 equals to expr2 , or expr1 otherwise. Examples: SELECT nullif(2, 2); NULL nvl nvl(expr1, expr2) - Returns expr2 if expr1 is null, or expr1 otherwise. Examples: SELECT nvl(NULL, array('2')); [ 2 ] nvl2 nvl2(expr1, expr2, expr3) - Returns expr2 if expr1 is not null, or expr3 otherwise. Examples: SELECT nvl2(NULL, 2, 1); 1 octet_length octet_length(expr) - Returns the byte length of string data or number of bytes of binary data. Examples: SELECT octet_length('Spark SQL'); 9 or expr1 or expr2 - Logical OR. parse_url parse_url(url, partToExtract[, key]) - Extracts a part from a URL. Examples: SELECT parse_url('http://spark.apache.org/path?query=1', 'HOST') spark.apache.org SELECT parse_url('http://spark.apache.org/path?query=1', 'QUERY') query=1 SELECT parse_url('http://spark.apache.org/path?query=1', 'QUERY', 'query') 1 percent_rank percent_rank() - Computes the percentage ranking of a value in a group of values. percentile percentile(col, percentage [, frequency]) - Returns the exact percentile value of numeric column col at the given percentage. The value of percentage must be between 0.0 and 1.0. The value of frequency should be positive integral percentile(col, array(percentage1 [, percentage2]...) [, frequency]) - Returns the exact percentile value array of numeric column col at the given percentage(s). Each value of the percentage array must be between 0.0 and 1.0. The value of frequency should be positive integral percentile_approx percentile_approx(col, percentage [, accuracy]) - Returns the approximate percentile value of numeric column col at the given percentage. The value of percentage must be between 0.0 and 1.0. The accuracy parameter (default: 10000) is a positive numeric literal which controls approximation accuracy at the cost of memory. Higher value of accuracy yields better accuracy, 1.0/accuracy is the relative error of the approximation. When percentage is an array, each value of the percentage array must be between 0.0 and 1.0. In this case, returns the approximate percentile array of column col at the given percentage array. Examples: SELECT percentile_approx(10.0, array(0.5, 0.4, 0.1), 100); [10.0,10.0,10.0] SELECT percentile_approx(10.0, 0.5, 100); 10.0 pi pi() - Returns pi. Examples: SELECT pi(); 3.141592653589793 pmod pmod(expr1, expr2) - Returns the positive value of expr1 mod expr2 . Examples: SELECT pmod(10, 3); 1 SELECT pmod(-10, 3); 2 posexplode posexplode(expr) - Separates the elements of array expr into multiple rows with positions, or the elements of map expr into multiple rows and columns with positions. Examples: SELECT posexplode(array(10,20)); 0 10 1 20 posexplode_outer posexplode_outer(expr) - Separates the elements of array expr into multiple rows with positions, or the elements of map expr into multiple rows and columns with positions. Examples: SELECT posexplode_outer(array(10,20)); 0 10 1 20 position position(substr, str[, pos]) - Returns the position of the first occurrence of substr in str after position pos . The given pos and return value are 1-based. Examples: SELECT position('bar', 'foobarbar'); 4 SELECT position('bar', 'foobarbar', 5); 7 SELECT POSITION('bar' IN 'foobarbar'); 4 positive positive(expr) - Returns the value of expr . pow pow(expr1, expr2) - Raises expr1 to the power of expr2 . Examples: SELECT pow(2, 3); 8.0 power power(expr1, expr2) - Raises expr1 to the power of expr2 . Examples: SELECT power(2, 3); 8.0 printf printf(strfmt, obj, ...) - Returns a formatted string from printf-style format strings. Examples: SELECT printf( Hello World %d %s , 100, days ); Hello World 100 days quarter quarter(date) - Returns the quarter of the year for date, in the range 1 to 4. Examples: SELECT quarter('2016-08-31'); 3 Since: 1.5.0 radians radians(expr) - Converts degrees to radians. Arguments: expr - angle in degrees Examples: SELECT radians(180); 3.141592653589793 rand rand([seed]) - Returns a random value with independent and identically distributed (i.i.d.) uniformly distributed values in [0, 1). Examples: SELECT rand(); 0.9629742951434543 SELECT rand(0); 0.8446490682263027 SELECT rand(null); 0.8446490682263027 randn randn([seed]) - Returns a random value with independent and identically distributed (i.i.d.) values drawn from the standard normal distribution. Examples: SELECT randn(); -0.3254147983080288 SELECT randn(0); 1.1164209726833079 SELECT randn(null); 1.1164209726833079 rank rank() - Computes the rank of a value in a group of values. The result is one plus the number of rows preceding or equal to the current row in the ordering of the partition. The values will produce gaps in the sequence. reflect reflect(class, method[, arg1[, arg2 ..]]) - Calls a method with reflection. Examples: SELECT reflect('java.util.UUID', 'randomUUID'); c33fb387-8500-4bfa-81d2-6e0e3e930df2 SELECT reflect('java.util.UUID', 'fromString', 'a5cf6c42-0c85-418f-af6c-3e4e5b1328f2'); a5cf6c42-0c85-418f-af6c-3e4e5b1328f2 regexp_extract regexp_extract(str, regexp[, idx]) - Extracts a group that matches regexp . Examples: SELECT regexp_extract('100-200', '(\\d+)-(\\d+)', 1); 100 regexp_replace regexp_replace(str, regexp, rep) - Replaces all substrings of str that match regexp with rep . Examples: SELECT regexp_replace('100-200', '(\\d+)', 'num'); num-num repeat repeat(str, n) - Returns the string which repeats the given string value n times. Examples: SELECT repeat('123', 2); 123123 replace replace(str, search[, replace]) - Replaces all occurrences of search with replace . Arguments: str - a string expression search - a string expression. If search is not found in str , str is returned unchanged. replace - a string expression. If replace is not specified or is an empty string, nothing replaces the string that is removed from str . Examples: SELECT replace('ABCabc', 'abc', 'DEF'); ABCDEF reverse reverse(str) - Returns the reversed given string. Examples: SELECT reverse('Spark SQL'); LQS krapS right right(str, len) - Returns the rightmost len ( len can be string type) characters from the string str ,if len is less or equal than 0 the result is an empty string. Examples: SELECT right('Spark SQL', 3); SQL rint rint(expr) - Returns the double value that is closest in value to the argument and is equal to a mathematical integer. Examples: SELECT rint(12.3456); 12.0 rlike str rlike regexp - Returns true if str matches regexp , or false otherwise. Arguments: str - a string expression regexp - a string expression. The pattern string should be a Java regular expression. Since Spark 2.0, string literals (including regex patterns) are unescaped in our SQL parser. For example, to match \"\\abc\", a regular expression for regexp can be \"^\\abc$\". There is a SQL config 'spark.sql.parser.escapedStringLiterals' that can be used to fallback to the Spark 1.6 behavior regarding string literal parsing. For example, if the config is enabled, the regexp that can match \"\\abc\" is \"^\\abc$\". Examples: When spark.sql.parser.escapedStringLiterals is disabled (default). SELECT '%SystemDrive%\\Users\\John' rlike '%SystemDrive%\\\\Users.*' true When spark.sql.parser.escapedStringLiterals is enabled. SELECT '%SystemDrive%\\Users\\John' rlike '%SystemDrive%\\Users.*' true Note: Use LIKE to match with simple string pattern. rollup round round(expr, d) - Returns expr rounded to d decimal places using HALF_UP rounding mode. Examples: SELECT round(2.5, 0); 3.0 row_number row_number() - Assigns a unique, sequential number to each row, starting with one, according to the ordering of rows within the window partition. rpad rpad(str, len, pad) - Returns str , right-padded with pad to a length of len . If str is longer than len , the return value is shortened to len characters. Examples: SELECT rpad('hi', 5, '??'); hi??? SELECT rpad('hi', 1, '??'); h rtrim rtrim(str) - Removes the trailing space characters from str . rtrim(trimStr, str) - Removes the trailing string which contains the characters from the trim string from the str Arguments: str - a string expression trimStr - the trim string characters to trim, the default value is a single space Examples: SELECT rtrim(' SparkSQL '); SparkSQL SELECT rtrim('LQSa', 'SSparkSQLS'); SSpark second second(timestamp) - Returns the second component of the string/timestamp. Examples: SELECT second('2009-07-30 12:58:59'); 59 Since: 1.5.0 sentences sentences(str[, lang, country]) - Splits str into an array of array of words. Examples: SELECT sentences('Hi there! Good morning.'); [[ Hi , there ],[ Good , morning ]] sha sha(expr) - Returns a sha1 hash value as a hex string of the expr . Examples: SELECT sha('Spark'); 85f5955f4b27a9a4c2aab6ffe5d7189fc298b92c sha1 sha1(expr) - Returns a sha1 hash value as a hex string of the expr . Examples: SELECT sha1('Spark'); 85f5955f4b27a9a4c2aab6ffe5d7189fc298b92c sha2 sha2(expr, bitLength) - Returns a checksum of SHA-2 family as a hex string of expr . SHA-224, SHA-256, SHA-384, and SHA-512 are supported. Bit length of 0 is equivalent to 256. Examples: SELECT sha2('Spark', 256); 529bc3b07127ecb7e53a4dcf1991d9152c24537d919178022b2c42657f79a26b shiftleft shiftleft(base, expr) - Bitwise left shift. Examples: SELECT shiftleft(2, 1); 4 shiftright shiftright(base, expr) - Bitwise (signed) right shift. Examples: SELECT shiftright(4, 1); 2 shiftrightunsigned shiftrightunsigned(base, expr) - Bitwise unsigned right shift. Examples: SELECT shiftrightunsigned(4, 1); 2 sign sign(expr) - Returns -1.0, 0.0 or 1.0 as expr is negative, 0 or positive. Examples: SELECT sign(40); 1.0 signum signum(expr) - Returns -1.0, 0.0 or 1.0 as expr is negative, 0 or positive. Examples: SELECT signum(40); 1.0 sin sin(expr) - Returns the sine of expr , as if computed by java.lang.Math.sin . Arguments: expr - angle in radians Examples: SELECT sin(0); 0.0 sinh sinh(expr) - Returns hyperbolic sine of expr , as if computed by java.lang.Math.sinh . Arguments: expr - hyperbolic angle Examples: SELECT sinh(0); 0.0 size size(expr) - Returns the size of an array or a map. Returns -1 if null. Examples: SELECT size(array('b', 'd', 'c', 'a')); 4 skewness skewness(expr) - Returns the skewness value calculated from values of a group. smallint smallint(expr) - Casts the value expr to the target data type smallint . sort_array sort_array(array[, ascendingOrder]) - Sorts the input array in ascending or descending order according to the natural ordering of the array elements. Examples: SELECT sort_array(array('b', 'd', 'c', 'a'), true); [ a , b , c , d ] soundex soundex(str) - Returns Soundex code of the string. Examples: SELECT soundex('Miller'); M460 space space(n) - Returns a string consisting of n spaces. Examples: SELECT concat(space(2), '1'); 1 spark_partition_id spark_partition_id() - Returns the current partition id. split split(str, regex) - Splits str around occurrences that match regex . Examples: SELECT split('oneAtwoBthreeC', '[ABC]'); [ one , two , three , ] sqrt sqrt(expr) - Returns the square root of expr . Examples: SELECT sqrt(4); 2.0 stack stack(n, expr1, ..., exprk) - Separates expr1 , ..., exprk into n rows. Examples: SELECT stack(2, 1, 2, 3); 1 2 3 NULL std std(expr) - Returns the sample standard deviation calculated from values of a group. stddev stddev(expr) - Returns the sample standard deviation calculated from values of a group. stddev_pop stddev_pop(expr) - Returns the population standard deviation calculated from values of a group. stddev_samp stddev_samp(expr) - Returns the sample standard deviation calculated from values of a group. str_to_map str_to_map(text[, pairDelim[, keyValueDelim]]) - Creates a map after splitting the text into key/value pairs using delimiters. Default delimiters are ',' for pairDelim and ':' for keyValueDelim . Examples: SELECT str_to_map('a:1,b:2,c:3', ',', ':'); map( a : 1 , b : 2 , c : 3 ) SELECT str_to_map('a'); map( a :null) string string(expr) - Casts the value expr to the target data type string . struct struct(col1, col2, col3, ...) - Creates a struct with the given field values. substr substr(str, pos[, len]) - Returns the substring of str that starts at pos and is of length len , or the slice of byte array that starts at pos and is of length len . Examples: SELECT substr('Spark SQL', 5); k SQL SELECT substr('Spark SQL', -3); SQL SELECT substr('Spark SQL', 5, 1); k substring substring(str, pos[, len]) - Returns the substring of str that starts at pos and is of length len , or the slice of byte array that starts at pos and is of length len . Examples: SELECT substring('Spark SQL', 5); k SQL SELECT substring('Spark SQL', -3); SQL SELECT substring('Spark SQL', 5, 1); k substring_index substring_index(str, delim, count) - Returns the substring from str before count occurrences of the delimiter delim . If count is positive, everything to the left of the final delimiter (counting from the left) is returned. If count is negative, everything to the right of the final delimiter (counting from the right) is returned. The function substring_index performs a case-sensitive match when searching for delim . Examples: SELECT substring_index('www.apache.org', '.', 2); www.apache sum sum(expr) - Returns the sum calculated from values of a group. tan tan(expr) - Returns the tangent of expr , as if computed by java.lang.Math.tan . Arguments: expr - angle in radians Examples: SELECT tan(0); 0.0 tanh tanh(expr) - Returns the hyperbolic tangent of expr , as if computed by java.lang.Math.tanh . Arguments: expr - hyperbolic angle Examples: SELECT tanh(0); 0.0 timestamp timestamp(expr) - Casts the value expr to the target data type timestamp . tinyint tinyint(expr) - Casts the value expr to the target data type tinyint . to_date to_date(date_str[, fmt]) - Parses the date_str expression with the fmt expression to a date. Returns null with invalid input. By default, it follows casting rules to a date if the fmt is omitted. Examples: SELECT to_date('2009-07-30 04:17:52'); 2009-07-30 SELECT to_date('2016-12-31', 'yyyy-MM-dd'); 2016-12-31 Since: 1.5.0 to_json to_json(expr[, options]) - Returns a json string with a given struct value Examples: SELECT to_json(named_struct('a', 1, 'b', 2)); { a :1, b :2} SELECT to_json(named_struct('time', to_timestamp('2015-08-26', 'yyyy-MM-dd')), map('timestampFormat', 'dd/MM/yyyy')); { time : 26/08/2015 } SELECT to_json(array(named_struct('a', 1, 'b', 2)); [{ a :1, b :2}] SELECT to_json(map('a', named_struct('b', 1))); { a :{ b :1}} SELECT to_json(map(named_struct('a', 1),named_struct('b', 2))); { [1] :{ b :2}} SELECT to_json(map('a', 1)); { a :1} SELECT to_json(array((map('a', 1)))); [{ a :1}] Since: 2.2.0 to_timestamp to_timestamp(timestamp[, fmt]) - Parses the timestamp expression with the fmt expression to a timestamp. Returns null with invalid input. By default, it follows casting rules to a timestamp if the fmt is omitted. Examples: SELECT to_timestamp('2016-12-31 00:12:00'); 2016-12-31 00:12:00 SELECT to_timestamp('2016-12-31', 'yyyy-MM-dd'); 2016-12-31 00:00:00 Since: 2.2.0 to_unix_timestamp to_unix_timestamp(expr[, pattern]) - Returns the UNIX timestamp of the given time. Examples: SELECT to_unix_timestamp('2016-04-08', 'yyyy-MM-dd'); 1460041200 Since: 1.6.0 to_utc_timestamp to_utc_timestamp(timestamp, timezone) - Given a timestamp like '2017-07-14 02:40:00.0', interprets it as a time in the given time zone, and renders that time as a timestamp in UTC. For example, 'GMT+1' would yield '2017-07-14 01:40:00.0'. Examples: SELECT to_utc_timestamp('2016-08-31', 'Asia/Seoul'); 2016-08-30 15:00:00 Since: 1.5.0 translate translate(input, from, to) - Translates the input string by replacing the characters present in the from string with the corresponding characters in the to string. Examples: SELECT translate('AaBbCc', 'abc', '123'); A1B2C3 trim trim(str) - Removes the leading and trailing space characters from str . trim(BOTH trimStr FROM str) - Remove the leading and trailing trimStr characters from str trim(LEADING trimStr FROM str) - Remove the leading trimStr characters from str trim(TRAILING trimStr FROM str) - Remove the trailing trimStr characters from str Arguments: str - a string expression trimStr - the trim string characters to trim, the default value is a single space BOTH, FROM - these are keywords to specify trimming string characters from both ends of the string LEADING, FROM - these are keywords to specify trimming string characters from the left end of the string TRAILING, FROM - these are keywords to specify trimming string characters from the right end of the string Examples: SELECT trim(' SparkSQL '); SparkSQL SELECT trim('SL', 'SSparkSQLS'); parkSQ SELECT trim(BOTH 'SL' FROM 'SSparkSQLS'); parkSQ SELECT trim(LEADING 'SL' FROM 'SSparkSQLS'); parkSQLS SELECT trim(TRAILING 'SL' FROM 'SSparkSQLS'); SSparkSQ trunc trunc(date, fmt) - Returns date with the time portion of the day truncated to the unit specified by the format model fmt . fmt should be one of [\"year\", \"yyyy\", \"yy\", \"mon\", \"month\", \"mm\"] Examples: SELECT trunc('2009-02-12', 'MM'); 2009-02-01 SELECT trunc('2015-10-27', 'YEAR'); 2015-01-01 Since: 1.5.0 ucase ucase(str) - Returns str with all characters changed to uppercase. Examples: SELECT ucase('SparkSql'); SPARKSQL unbase64 unbase64(str) - Converts the argument from a base 64 string str to a binary. Examples: SELECT unbase64('U3BhcmsgU1FM'); Spark SQL unhex unhex(expr) - Converts hexadecimal expr to binary. Examples: SELECT decode(unhex('537061726B2053514C'), 'UTF-8'); Spark SQL unix_timestamp unix_timestamp([expr[, pattern]]) - Returns the UNIX timestamp of current or specified time. Examples: SELECT unix_timestamp(); 1476884637 SELECT unix_timestamp('2016-04-08', 'yyyy-MM-dd'); 1460041200 Since: 1.5.0 upper upper(str) - Returns str with all characters changed to uppercase. Examples: SELECT upper('SparkSql'); SPARKSQL uuid uuid() - Returns an universally unique identifier (UUID) string. The value is returned as a canonical UUID 36-character string. Examples: SELECT uuid(); 46707d92-02f4-4817-8116-a4c3b23e6266 var_pop var_pop(expr) - Returns the population variance calculated from values of a group. var_samp var_samp(expr) - Returns the sample variance calculated from values of a group. variance variance(expr) - Returns the sample variance calculated from values of a group. weekofyear weekofyear(date) - Returns the week of the year of the given date. A week is considered to start on a Monday and week 1 is the first week with 3 days. Examples: SELECT weekofyear('2008-02-20'); 8 Since: 1.5.0 when CASE WHEN expr1 THEN expr2 [WHEN expr3 THEN expr4]* [ELSE expr5] END - When expr1 = true, returns expr2 ; else when expr3 = true, returns expr4 ; else returns expr5 . Arguments: expr1, expr3 - the branch condition expressions should all be boolean type. expr2, expr4, expr5 - the branch value expressions and else value expression should all be same type or coercible to a common type. Examples: SELECT CASE WHEN 1 0 THEN 1 WHEN 2 0 THEN 2.0 ELSE 1.2 END; 1 SELECT CASE WHEN 1 0 THEN 1 WHEN 2 0 THEN 2.0 ELSE 1.2 END; 2 SELECT CASE WHEN 1 0 THEN 1 WHEN 2 0 THEN 2.0 END; NULL window xpath xpath(xml, xpath) - Returns a string array of values within the nodes of xml that match the XPath expression. Examples: SELECT xpath(' a b b1 /b b b2 /b b b3 /b c c1 /c c c2 /c /a ','a/b/text()'); ['b1','b2','b3'] xpath_boolean xpath_boolean(xml, xpath) - Returns true if the XPath expression evaluates to true, or if a matching node is found. Examples: SELECT xpath_boolean(' a b 1 /b /a ','a/b'); true xpath_double xpath_double(xml, xpath) - Returns a double value, the value zero if no match is found, or NaN if a match is found but the value is non-numeric. Examples: SELECT xpath_double(' a b 1 /b b 2 /b /a ', 'sum(a/b)'); 3.0 xpath_float xpath_float(xml, xpath) - Returns a float value, the value zero if no match is found, or NaN if a match is found but the value is non-numeric. Examples: SELECT xpath_float(' a b 1 /b b 2 /b /a ', 'sum(a/b)'); 3.0 xpath_int xpath_int(xml, xpath) - Returns an integer value, or the value zero if no match is found, or a match is found but the value is non-numeric. Examples: SELECT xpath_int(' a b 1 /b b 2 /b /a ', 'sum(a/b)'); 3 xpath_long xpath_long(xml, xpath) - Returns a long integer value, or the value zero if no match is found, or a match is found but the value is non-numeric. Examples: SELECT xpath_long(' a b 1 /b b 2 /b /a ', 'sum(a/b)'); 3 xpath_number xpath_number(xml, xpath) - Returns a double value, the value zero if no match is found, or NaN if a match is found but the value is non-numeric. Examples: SELECT xpath_number(' a b 1 /b b 2 /b /a ', 'sum(a/b)'); 3.0 xpath_short xpath_short(xml, xpath) - Returns a short integer value, or the value zero if no match is found, or a match is found but the value is non-numeric. Examples: SELECT xpath_short(' a b 1 /b b 2 /b /a ', 'sum(a/b)'); 3 xpath_string xpath_string(xml, xpath) - Returns the text contents of the first xml node that matches the XPath expression. Examples: SELECT xpath_string(' a b b /b c cc /c /a ','a/c'); cc year year(date) - Returns the year component of the date/timestamp. Examples: SELECT year('2016-07-30'); 2016 Since: 1.5.0 | expr1 | expr2 - Returns the result of bitwise OR of expr1 and expr2 . Examples: SELECT 3 | 5; 7 ~ ~ expr - Returns the result of bitwise NOT of expr . Examples: SELECT ~ 0; -1","title":"Functions"},{"location":"functions/#_1","text":"! expr - Logical not.","title":"!"},{"location":"functions/#_2","text":"expr1 % expr2 - Returns the remainder after expr1 / expr2 . Examples: SELECT 2 % 1.8; 0.2 SELECT MOD(2, 1.8); 0.2","title":"%"},{"location":"functions/#_3","text":"expr1 expr2 - Returns the result of bitwise AND of expr1 and expr2 . Examples: SELECT 3 5; 1","title":"&amp;"},{"location":"functions/#_4","text":"expr1 * expr2 - Returns expr1 * expr2 . Examples: SELECT 2 * 3; 6","title":"*"},{"location":"functions/#_5","text":"expr1 + expr2 - Returns expr1 + expr2 . Examples: SELECT 1 + 2; 3","title":"+"},{"location":"functions/#-","text":"expr1 - expr2 - Returns expr1 - expr2 . Examples: SELECT 2 - 1; 1","title":"-"},{"location":"functions/#_6","text":"expr1 / expr2 - Returns expr1 / expr2 . It always performs floating point division. Examples: SELECT 3 / 2; 1.5 SELECT 2L / 2L; 1.0","title":"/"},{"location":"functions/#_7","text":"expr1 expr2 - Returns true if expr1 is less than expr2 . Arguments: expr1, expr2 - the two expressions must be same type or can be casted to a common type, and must be a type that can be ordered. For example, map type is not orderable, so it is not supported. For complex types such array/struct, the data types of fields must be orderable. Examples: SELECT 1 2; true SELECT 1.1 '1'; false SELECT to_date('2009-07-30 04:17:52') to_date('2009-07-30 04:17:52'); false SELECT to_date('2009-07-30 04:17:52') to_date('2009-08-01 04:17:52'); true SELECT 1 NULL; NULL","title":"&lt;"},{"location":"functions/#_8","text":"expr1 = expr2 - Returns true if expr1 is less than or equal to expr2 . Arguments: expr1, expr2 - the two expressions must be same type or can be casted to a common type, and must be a type that can be ordered. For example, map type is not orderable, so it is not supported. For complex types such array/struct, the data types of fields must be orderable. Examples: SELECT 2 = 2; true SELECT 1.0 = '1'; true SELECT to_date('2009-07-30 04:17:52') = to_date('2009-07-30 04:17:52'); true SELECT to_date('2009-07-30 04:17:52') = to_date('2009-08-01 04:17:52'); true SELECT 1 = NULL; NULL","title":"&lt;="},{"location":"functions/#_9","text":"expr1 = expr2 - Returns same result as the EQUAL(=) operator for non-null operands, but returns true if both are null, false if one of the them is null. Arguments: expr1, expr2 - the two expressions must be same type or can be casted to a common type, and must be a type that can be used in equality comparison. Map type is not supported. For complex types such array/struct, the data types of fields must be orderable. Examples: SELECT 2 = 2; true SELECT 1 = '1'; true SELECT true = NULL; false SELECT NULL = NULL; true","title":"&lt;=&gt;"},{"location":"functions/#_10","text":"expr1 = expr2 - Returns true if expr1 equals expr2 , or false otherwise. Arguments: expr1, expr2 - the two expressions must be same type or can be casted to a common type, and must be a type that can be used in equality comparison. Map type is not supported. For complex types such array/struct, the data types of fields must be orderable. Examples: SELECT 2 = 2; true SELECT 1 = '1'; true SELECT true = NULL; NULL SELECT NULL = NULL; NULL","title":"="},{"location":"functions/#_11","text":"expr1 == expr2 - Returns true if expr1 equals expr2 , or false otherwise. Arguments: expr1, expr2 - the two expressions must be same type or can be casted to a common type, and must be a type that can be used in equality comparison. Map type is not supported. For complex types such array/struct, the data types of fields must be orderable. Examples: SELECT 2 == 2; true SELECT 1 == '1'; true SELECT true == NULL; NULL SELECT NULL == NULL; NULL","title":"=="},{"location":"functions/#_12","text":"expr1 expr2 - Returns true if expr1 is greater than expr2 . Arguments: expr1, expr2 - the two expressions must be same type or can be casted to a common type, and must be a type that can be ordered. For example, map type is not orderable, so it is not supported. For complex types such array/struct, the data types of fields must be orderable. Examples: SELECT 2 1; true SELECT 2 '1.1'; true SELECT to_date('2009-07-30 04:17:52') to_date('2009-07-30 04:17:52'); false SELECT to_date('2009-07-30 04:17:52') to_date('2009-08-01 04:17:52'); false SELECT 1 NULL; NULL","title":"&gt;"},{"location":"functions/#_13","text":"expr1 = expr2 - Returns true if expr1 is greater than or equal to expr2 . Arguments: expr1, expr2 - the two expressions must be same type or can be casted to a common type, and must be a type that can be ordered. For example, map type is not orderable, so it is not supported. For complex types such array/struct, the data types of fields must be orderable. Examples: SELECT 2 = 1; true SELECT 2.0 = '2.1'; false SELECT to_date('2009-07-30 04:17:52') = to_date('2009-07-30 04:17:52'); true SELECT to_date('2009-07-30 04:17:52') = to_date('2009-08-01 04:17:52'); false SELECT 1 = NULL; NULL","title":"&gt;="},{"location":"functions/#_14","text":"expr1 ^ expr2 - Returns the result of bitwise exclusive OR of expr1 and expr2 . Examples: SELECT 3 ^ 5; 2","title":"^"},{"location":"functions/#abs","text":"abs(expr) - Returns the absolute value of the numeric value. Examples: SELECT abs(-1); 1","title":"abs"},{"location":"functions/#acos","text":"acos(expr) - Returns the inverse cosine (a.k.a. arc cosine) of expr , as if computed by java.lang.Math.acos . Examples: SELECT acos(1); 0.0 SELECT acos(2); NaN","title":"acos"},{"location":"functions/#add_months","text":"add_months(start_date, num_months) - Returns the date that is num_months after start_date . Examples: SELECT add_months('2016-08-31', 1); 2016-09-30 Since: 1.5.0","title":"add_months"},{"location":"functions/#and","text":"expr1 and expr2 - Logical AND.","title":"and"},{"location":"functions/#approx_count_distinct","text":"approx_count_distinct(expr[, relativeSD]) - Returns the estimated cardinality by HyperLogLog++. relativeSD defines the maximum estimation error allowed.","title":"approx_count_distinct"},{"location":"functions/#approx_percentile","text":"approx_percentile(col, percentage [, accuracy]) - Returns the approximate percentile value of numeric column col at the given percentage. The value of percentage must be between 0.0 and 1.0. The accuracy parameter (default: 10000) is a positive numeric literal which controls approximation accuracy at the cost of memory. Higher value of accuracy yields better accuracy, 1.0/accuracy is the relative error of the approximation. When percentage is an array, each value of the percentage array must be between 0.0 and 1.0. In this case, returns the approximate percentile array of column col at the given percentage array. Examples: SELECT approx_percentile(10.0, array(0.5, 0.4, 0.1), 100); [10.0,10.0,10.0] SELECT approx_percentile(10.0, 0.5, 100); 10.0","title":"approx_percentile"},{"location":"functions/#array","text":"array(expr, ...) - Returns an array with the given elements. Examples: SELECT array(1, 2, 3); [1,2,3]","title":"array"},{"location":"functions/#array_contains","text":"array_contains(array, value) - Returns true if the array contains the value. Examples: SELECT array_contains(array(1, 2, 3), 2); true","title":"array_contains"},{"location":"functions/#ascii","text":"ascii(str) - Returns the numeric value of the first character of str . Examples: SELECT ascii('222'); 50 SELECT ascii(2); 50","title":"ascii"},{"location":"functions/#asin","text":"asin(expr) - Returns the inverse sine (a.k.a. arc sine) the arc sin of expr , as if computed by java.lang.Math.asin . Examples: SELECT asin(0); 0.0 SELECT asin(2); NaN","title":"asin"},{"location":"functions/#assert_true","text":"assert_true(expr) - Throws an exception if expr is not true. Examples: SELECT assert_true(0 1); NULL","title":"assert_true"},{"location":"functions/#atan","text":"atan(expr) - Returns the inverse tangent (a.k.a. arc tangent) of expr , as if computed by java.lang.Math.atan Examples: SELECT atan(0); 0.0","title":"atan"},{"location":"functions/#atan2","text":"atan2(exprY, exprX) - Returns the angle in radians between the positive x-axis of a plane and the point given by the coordinates ( exprX , exprY ), as if computed by java.lang.Math.atan2 . Arguments: exprY - coordinate on y-axis exprX - coordinate on x-axis Examples: SELECT atan2(0, 0); 0.0","title":"atan2"},{"location":"functions/#avg","text":"avg(expr) - Returns the mean calculated from values of a group.","title":"avg"},{"location":"functions/#base64","text":"base64(bin) - Converts the argument from a binary bin to a base 64 string. Examples: SELECT base64('Spark SQL'); U3BhcmsgU1FM","title":"base64"},{"location":"functions/#bigint","text":"bigint(expr) - Casts the value expr to the target data type bigint .","title":"bigint"},{"location":"functions/#bin","text":"bin(expr) - Returns the string representation of the long value expr represented in binary. Examples: SELECT bin(13); 1101 SELECT bin(-13); 1111111111111111111111111111111111111111111111111111111111110011 SELECT bin(13.3); 1101","title":"bin"},{"location":"functions/#binary","text":"binary(expr) - Casts the value expr to the target data type binary .","title":"binary"},{"location":"functions/#bit_length","text":"bit_length(expr) - Returns the bit length of string data or number of bits of binary data. Examples: SELECT bit_length('Spark SQL'); 72","title":"bit_length"},{"location":"functions/#boolean","text":"boolean(expr) - Casts the value expr to the target data type boolean .","title":"boolean"},{"location":"functions/#bround","text":"bround(expr, d) - Returns expr rounded to d decimal places using HALF_EVEN rounding mode. Examples: SELECT bround(2.5, 0); 2.0","title":"bround"},{"location":"functions/#cast","text":"cast(expr AS type) - Casts the value expr to the target data type type . Examples: SELECT cast('10' as int); 10","title":"cast"},{"location":"functions/#cbrt","text":"cbrt(expr) - Returns the cube root of expr . Examples: SELECT cbrt(27.0); 3.0","title":"cbrt"},{"location":"functions/#ceil","text":"ceil(expr) - Returns the smallest integer not smaller than expr . Examples: SELECT ceil(-0.1); 0 SELECT ceil(5); 5","title":"ceil"},{"location":"functions/#ceiling","text":"ceiling(expr) - Returns the smallest integer not smaller than expr . Examples: SELECT ceiling(-0.1); 0 SELECT ceiling(5); 5","title":"ceiling"},{"location":"functions/#char","text":"char(expr) - Returns the ASCII character having the binary equivalent to expr . If n is larger than 256 the result is equivalent to chr(n % 256) Examples: SELECT char(65); A","title":"char"},{"location":"functions/#char_length","text":"char_length(expr) - Returns the character length of string data or number of bytes of binary data. The length of string data includes the trailing spaces. The length of binary data includes binary zeros. Examples: SELECT char_length('Spark SQL '); 10 SELECT CHAR_LENGTH('Spark SQL '); 10 SELECT CHARACTER_LENGTH('Spark SQL '); 10","title":"char_length"},{"location":"functions/#character_length","text":"character_length(expr) - Returns the character length of string data or number of bytes of binary data. The length of string data includes the trailing spaces. The length of binary data includes binary zeros. Examples: SELECT character_length('Spark SQL '); 10 SELECT CHAR_LENGTH('Spark SQL '); 10 SELECT CHARACTER_LENGTH('Spark SQL '); 10","title":"character_length"},{"location":"functions/#chr","text":"chr(expr) - Returns the ASCII character having the binary equivalent to expr . If n is larger than 256 the result is equivalent to chr(n % 256) Examples: SELECT chr(65); A","title":"chr"},{"location":"functions/#coalesce","text":"coalesce(expr1, expr2, ...) - Returns the first non-null argument if exists. Otherwise, null. Examples: SELECT coalesce(NULL, 1, NULL); 1","title":"coalesce"},{"location":"functions/#collect_list","text":"collect_list(expr) - Collects and returns a list of non-unique elements.","title":"collect_list"},{"location":"functions/#collect_set","text":"collect_set(expr) - Collects and returns a set of unique elements.","title":"collect_set"},{"location":"functions/#concat","text":"concat(str1, str2, ..., strN) - Returns the concatenation of str1, str2, ..., strN. Examples: SELECT concat('Spark', 'SQL'); SparkSQL","title":"concat"},{"location":"functions/#concat_ws","text":"concat_ws(sep, [str | array(str)]+) - Returns the concatenation of the strings separated by sep . Examples: SELECT concat_ws(' ', 'Spark', 'SQL'); Spark SQL","title":"concat_ws"},{"location":"functions/#conv","text":"conv(num, from_base, to_base) - Convert num from from_base to to_base . Examples: SELECT conv('100', 2, 10); 4 SELECT conv(-10, 16, -10); -16","title":"conv"},{"location":"functions/#corr","text":"corr(expr1, expr2) - Returns Pearson coefficient of correlation between a set of number pairs.","title":"corr"},{"location":"functions/#cos","text":"cos(expr) - Returns the cosine of expr , as if computed by java.lang.Math.cos . Arguments: expr - angle in radians Examples: SELECT cos(0); 1.0","title":"cos"},{"location":"functions/#cosh","text":"cosh(expr) - Returns the hyperbolic cosine of expr , as if computed by java.lang.Math.cosh . Arguments: expr - hyperbolic angle Examples: SELECT cosh(0); 1.0","title":"cosh"},{"location":"functions/#cot","text":"cot(expr) - Returns the cotangent of expr , as if computed by 1/java.lang.Math.cot . Arguments: expr - angle in radians Examples: SELECT cot(1); 0.6420926159343306","title":"cot"},{"location":"functions/#count","text":"count(*) - Returns the total number of retrieved rows, including rows containing null. count(expr) - Returns the number of rows for which the supplied expression is non-null. count(DISTINCT expr[, expr...]) - Returns the number of rows for which the supplied expression(s) are unique and non-null.","title":"count"},{"location":"functions/#count_min_sketch","text":"count_min_sketch(col, eps, confidence, seed) - Returns a count-min sketch of a column with the given esp, confidence and seed. The result is an array of bytes, which can be deserialized to a CountMinSketch before usage. Count-min sketch is a probabilistic data structure used for cardinality estimation using sub-linear space.","title":"count_min_sketch"},{"location":"functions/#covar_pop","text":"covar_pop(expr1, expr2) - Returns the population covariance of a set of number pairs.","title":"covar_pop"},{"location":"functions/#covar_samp","text":"covar_samp(expr1, expr2) - Returns the sample covariance of a set of number pairs.","title":"covar_samp"},{"location":"functions/#crc32","text":"crc32(expr) - Returns a cyclic redundancy check value of the expr as a bigint. Examples: SELECT crc32('Spark'); 1557323817","title":"crc32"},{"location":"functions/#cube","text":"","title":"cube"},{"location":"functions/#cume_dist","text":"cume_dist() - Computes the position of a value relative to all values in the partition.","title":"cume_dist"},{"location":"functions/#current_database","text":"current_database() - Returns the current database. Examples: SELECT current_database(); default","title":"current_database"},{"location":"functions/#current_date","text":"current_date() - Returns the current date at the start of query evaluation. Since: 1.5.0","title":"current_date"},{"location":"functions/#current_timestamp","text":"current_timestamp() - Returns the current timestamp at the start of query evaluation. Since: 1.5.0","title":"current_timestamp"},{"location":"functions/#date","text":"date(expr) - Casts the value expr to the target data type date .","title":"date"},{"location":"functions/#date_add","text":"date_add(start_date, num_days) - Returns the date that is num_days after start_date . Examples: SELECT date_add('2016-07-30', 1); 2016-07-31 Since: 1.5.0","title":"date_add"},{"location":"functions/#date_format","text":"date_format(timestamp, fmt) - Converts timestamp to a value of string in the format specified by the date format fmt . Examples: SELECT date_format('2016-04-08', 'y'); 2016 Since: 1.5.0","title":"date_format"},{"location":"functions/#date_sub","text":"date_sub(start_date, num_days) - Returns the date that is num_days before start_date . Examples: SELECT date_sub('2016-07-30', 1); 2016-07-29 Since: 1.5.0","title":"date_sub"},{"location":"functions/#date_trunc","text":"date_trunc(fmt, ts) - Returns timestamp ts truncated to the unit specified by the format model fmt . fmt should be one of [\"YEAR\", \"YYYY\", \"YY\", \"MON\", \"MONTH\", \"MM\", \"DAY\", \"DD\", \"HOUR\", \"MINUTE\", \"SECOND\", \"WEEK\", \"QUARTER\"] Examples: SELECT date_trunc('2015-03-05T09:32:05.359', 'YEAR'); 2015-01-01T00:00:00 SELECT date_trunc('2015-03-05T09:32:05.359', 'MM'); 2015-03-01T00:00:00 SELECT date_trunc('2015-03-05T09:32:05.359', 'DD'); 2015-03-05T00:00:00 SELECT date_trunc('2015-03-05T09:32:05.359', 'HOUR'); 2015-03-05T09:00:00 Since: 2.3.0","title":"date_trunc"},{"location":"functions/#datediff","text":"datediff(endDate, startDate) - Returns the number of days from startDate to endDate . Examples: SELECT datediff('2009-07-31', '2009-07-30'); 1 SELECT datediff('2009-07-30', '2009-07-31'); -1 Since: 1.5.0","title":"datediff"},{"location":"functions/#day","text":"day(date) - Returns the day of month of the date/timestamp. Examples: SELECT day('2009-07-30'); 30 Since: 1.5.0","title":"day"},{"location":"functions/#dayofmonth","text":"dayofmonth(date) - Returns the day of month of the date/timestamp. Examples: SELECT dayofmonth('2009-07-30'); 30 Since: 1.5.0","title":"dayofmonth"},{"location":"functions/#dayofweek","text":"dayofweek(date) - Returns the day of the week for date/timestamp (1 = Sunday, 2 = Monday, ..., 7 = Saturday). Examples: SELECT dayofweek('2009-07-30'); 5 Since: 2.3.0","title":"dayofweek"},{"location":"functions/#dayofyear","text":"dayofyear(date) - Returns the day of year of the date/timestamp. Examples: SELECT dayofyear('2016-04-09'); 100 Since: 1.5.0","title":"dayofyear"},{"location":"functions/#decimal","text":"decimal(expr) - Casts the value expr to the target data type decimal .","title":"decimal"},{"location":"functions/#decode","text":"decode(bin, charset) - Decodes the first argument using the second argument character set. Examples: SELECT decode(encode('abc', 'utf-8'), 'utf-8'); abc","title":"decode"},{"location":"functions/#degrees","text":"degrees(expr) - Converts radians to degrees. Arguments: expr - angle in radians Examples: SELECT degrees(3.141592653589793); 180.0","title":"degrees"},{"location":"functions/#dense_rank","text":"dense_rank() - Computes the rank of a value in a group of values. The result is one plus the previously assigned rank value. Unlike the function rank, dense_rank will not produce gaps in the ranking sequence.","title":"dense_rank"},{"location":"functions/#double","text":"double(expr) - Casts the value expr to the target data type double .","title":"double"},{"location":"functions/#e","text":"e() - Returns Euler's number, e. Examples: SELECT e(); 2.718281828459045","title":"e"},{"location":"functions/#elt","text":"elt(n, input1, input2, ...) - Returns the n -th input, e.g., returns input2 when n is 2. Examples: SELECT elt(1, 'scala', 'java'); scala","title":"elt"},{"location":"functions/#encode","text":"encode(str, charset) - Encodes the first argument using the second argument character set. Examples: SELECT encode('abc', 'utf-8'); abc","title":"encode"},{"location":"functions/#exp","text":"exp(expr) - Returns e to the power of expr . Examples: SELECT exp(0); 1.0","title":"exp"},{"location":"functions/#explode","text":"explode(expr) - Separates the elements of array expr into multiple rows, or the elements of map expr into multiple rows and columns. Examples: SELECT explode(array(10, 20)); 10 20","title":"explode"},{"location":"functions/#explode_outer","text":"explode_outer(expr) - Separates the elements of array expr into multiple rows, or the elements of map expr into multiple rows and columns. Examples: SELECT explode_outer(array(10, 20)); 10 20","title":"explode_outer"},{"location":"functions/#expm1","text":"expm1(expr) - Returns exp( expr ) - 1. Examples: SELECT expm1(0); 0.0","title":"expm1"},{"location":"functions/#factorial","text":"factorial(expr) - Returns the factorial of expr . expr is [0..20]. Otherwise, null. Examples: SELECT factorial(5); 120","title":"factorial"},{"location":"functions/#find_in_set","text":"find_in_set(str, str_array) - Returns the index (1-based) of the given string ( str ) in the comma-delimited list ( str_array ). Returns 0, if the string was not found or if the given string ( str ) contains a comma. Examples: SELECT find_in_set('ab','abc,b,ab,c,def'); 3","title":"find_in_set"},{"location":"functions/#first","text":"first(expr[, isIgnoreNull]) - Returns the first value of expr for a group of rows. If isIgnoreNull is true, returns only non-null values.","title":"first"},{"location":"functions/#first_value","text":"first_value(expr[, isIgnoreNull]) - Returns the first value of expr for a group of rows. If isIgnoreNull is true, returns only non-null values.","title":"first_value"},{"location":"functions/#float","text":"float(expr) - Casts the value expr to the target data type float .","title":"float"},{"location":"functions/#floor","text":"floor(expr) - Returns the largest integer not greater than expr . Examples: SELECT floor(-0.1); -1 SELECT floor(5); 5","title":"floor"},{"location":"functions/#format_number","text":"format_number(expr1, expr2) - Formats the number expr1 like '#,###,###.##', rounded to expr2 decimal places. If expr2 is 0, the result has no decimal point or fractional part. This is supposed to function like MySQL's FORMAT. Examples: SELECT format_number(12332.123456, 4); 12,332.1235","title":"format_number"},{"location":"functions/#format_string","text":"format_string(strfmt, obj, ...) - Returns a formatted string from printf-style format strings. Examples: SELECT format_string( Hello World %d %s , 100, days ); Hello World 100 days","title":"format_string"},{"location":"functions/#from_json","text":"from_json(jsonStr, schema[, options]) - Returns a struct value with the given jsonStr and schema . Examples: SELECT from_json('{ a :1, b :0.8}', 'a INT, b DOUBLE'); { a :1, b :0.8} SELECT from_json('{ time : 26/08/2015 }', 'time Timestamp', map('timestampFormat', 'dd/MM/yyyy')); { time : 2015-08-26 00:00:00.0 } Since: 2.2.0","title":"from_json"},{"location":"functions/#from_unixtime","text":"from_unixtime(unix_time, format) - Returns unix_time in the specified format . Examples: SELECT from_unixtime(0, 'yyyy-MM-dd HH:mm:ss'); 1970-01-01 00:00:00 Since: 1.5.0","title":"from_unixtime"},{"location":"functions/#from_utc_timestamp","text":"from_utc_timestamp(timestamp, timezone) - Given a timestamp like '2017-07-14 02:40:00.0', interprets it as a time in UTC, and renders that time as a timestamp in the given time zone. For example, 'GMT+1' would yield '2017-07-14 03:40:00.0'. Examples: SELECT from_utc_timestamp('2016-08-31', 'Asia/Seoul'); 2016-08-31 09:00:00 Since: 1.5.0","title":"from_utc_timestamp"},{"location":"functions/#get_json_object","text":"get_json_object(json_txt, path) - Extracts a json object from path . Examples: SELECT get_json_object('{ a : b }', '$.a'); b","title":"get_json_object"},{"location":"functions/#greatest","text":"greatest(expr, ...) - Returns the greatest value of all parameters, skipping null values. Examples: SELECT greatest(10, 9, 2, 4, 3); 10","title":"greatest"},{"location":"functions/#grouping","text":"","title":"grouping"},{"location":"functions/#grouping_id","text":"","title":"grouping_id"},{"location":"functions/#hash","text":"hash(expr1, expr2, ...) - Returns a hash value of the arguments. Examples: SELECT hash('Spark', array(123), 2); -1321691492","title":"hash"},{"location":"functions/#hex","text":"hex(expr) - Converts expr to hexadecimal. Examples: SELECT hex(17); 11 SELECT hex('Spark SQL'); 537061726B2053514C","title":"hex"},{"location":"functions/#hour","text":"hour(timestamp) - Returns the hour component of the string/timestamp. Examples: SELECT hour('2009-07-30 12:58:59'); 12 Since: 1.5.0","title":"hour"},{"location":"functions/#hypot","text":"hypot(expr1, expr2) - Returns sqrt( expr1 2 + expr2 2). Examples: SELECT hypot(3, 4); 5.0","title":"hypot"},{"location":"functions/#if","text":"if(expr1, expr2, expr3) - If expr1 evaluates to true, then returns expr2 ; otherwise returns expr3 . Examples: SELECT if(1 2, 'a', 'b'); a","title":"if"},{"location":"functions/#ifnull","text":"ifnull(expr1, expr2) - Returns expr2 if expr1 is null, or expr1 otherwise. Examples: SELECT ifnull(NULL, array('2')); [ 2 ]","title":"ifnull"},{"location":"functions/#in","text":"expr1 in(expr2, expr3, ...) - Returns true if expr equals to any valN. Arguments: expr1, expr2, expr3, ... - the arguments must be same type. Examples: SELECT 1 in(1, 2, 3); true SELECT 1 in(2, 3, 4); false SELECT named_struct('a', 1, 'b', 2) in(named_struct('a', 1, 'b', 1), named_struct('a', 1, 'b', 3)); false SELECT named_struct('a', 1, 'b', 2) in(named_struct('a', 1, 'b', 2), named_struct('a', 1, 'b', 3)); true","title":"in"},{"location":"functions/#initcap","text":"initcap(str) - Returns str with the first letter of each word in uppercase. All other letters are in lowercase. Words are delimited by white space. Examples: SELECT initcap('sPark sql'); Spark Sql","title":"initcap"},{"location":"functions/#inline","text":"inline(expr) - Explodes an array of structs into a table. Examples: SELECT inline(array(struct(1, 'a'), struct(2, 'b'))); 1 a 2 b","title":"inline"},{"location":"functions/#inline_outer","text":"inline_outer(expr) - Explodes an array of structs into a table. Examples: SELECT inline_outer(array(struct(1, 'a'), struct(2, 'b'))); 1 a 2 b","title":"inline_outer"},{"location":"functions/#input_file_block_length","text":"input_file_block_length() - Returns the length of the block being read, or -1 if not available.","title":"input_file_block_length"},{"location":"functions/#input_file_block_start","text":"input_file_block_start() - Returns the start offset of the block being read, or -1 if not available.","title":"input_file_block_start"},{"location":"functions/#input_file_name","text":"input_file_name() - Returns the name of the file being read, or empty string if not available.","title":"input_file_name"},{"location":"functions/#instr","text":"instr(str, substr) - Returns the (1-based) index of the first occurrence of substr in str . Examples: SELECT instr('SparkSQL', 'SQL'); 6","title":"instr"},{"location":"functions/#int","text":"int(expr) - Casts the value expr to the target data type int .","title":"int"},{"location":"functions/#isnan","text":"isnan(expr) - Returns true if expr is NaN, or false otherwise. Examples: SELECT isnan(cast('NaN' as double)); true","title":"isnan"},{"location":"functions/#isnotnull","text":"isnotnull(expr) - Returns true if expr is not null, or false otherwise. Examples: SELECT isnotnull(1); true","title":"isnotnull"},{"location":"functions/#isnull","text":"isnull(expr) - Returns true if expr is null, or false otherwise. Examples: SELECT isnull(1); false","title":"isnull"},{"location":"functions/#java_method","text":"java_method(class, method[, arg1[, arg2 ..]]) - Calls a method with reflection. Examples: SELECT java_method('java.util.UUID', 'randomUUID'); c33fb387-8500-4bfa-81d2-6e0e3e930df2 SELECT java_method('java.util.UUID', 'fromString', 'a5cf6c42-0c85-418f-af6c-3e4e5b1328f2'); a5cf6c42-0c85-418f-af6c-3e4e5b1328f2","title":"java_method"},{"location":"functions/#json_tuple","text":"json_tuple(jsonStr, p1, p2, ..., pn) - Returns a tuple like the function get_json_object, but it takes multiple names. All the input parameters and output column types are string. Examples: SELECT json_tuple('{ a :1, b :2}', 'a', 'b'); 1 2","title":"json_tuple"},{"location":"functions/#kurtosis","text":"kurtosis(expr) - Returns the kurtosis value calculated from values of a group.","title":"kurtosis"},{"location":"functions/#lag","text":"lag(input[, offset[, default]]) - Returns the value of input at the offset th row before the current row in the window. The default value of offset is 1 and the default value of default is null. If the value of input at the offset th row is null, null is returned. If there is no such offset row (e.g., when the offset is 1, the first row of the window does not have any previous row), default is returned.","title":"lag"},{"location":"functions/#last","text":"last(expr[, isIgnoreNull]) - Returns the last value of expr for a group of rows. If isIgnoreNull is true, returns only non-null values.","title":"last"},{"location":"functions/#last_day","text":"last_day(date) - Returns the last day of the month which the date belongs to. Examples: SELECT last_day('2009-01-12'); 2009-01-31 Since: 1.5.0","title":"last_day"},{"location":"functions/#last_value","text":"last_value(expr[, isIgnoreNull]) - Returns the last value of expr for a group of rows. If isIgnoreNull is true, returns only non-null values.","title":"last_value"},{"location":"functions/#lcase","text":"lcase(str) - Returns str with all characters changed to lowercase. Examples: SELECT lcase('SparkSql'); sparksql","title":"lcase"},{"location":"functions/#lead","text":"lead(input[, offset[, default]]) - Returns the value of input at the offset th row after the current row in the window. The default value of offset is 1 and the default value of default is null. If the value of input at the offset th row is null, null is returned. If there is no such an offset row (e.g., when the offset is 1, the last row of the window does not have any subsequent row), default is returned.","title":"lead"},{"location":"functions/#least","text":"least(expr, ...) - Returns the least value of all parameters, skipping null values. Examples: SELECT least(10, 9, 2, 4, 3); 2","title":"least"},{"location":"functions/#left","text":"left(str, len) - Returns the leftmost len ( len can be string type) characters from the string str ,if len is less or equal than 0 the result is an empty string. Examples: SELECT left('Spark SQL', 3); Spa","title":"left"},{"location":"functions/#length","text":"length(expr) - Returns the character length of string data or number of bytes of binary data. The length of string data includes the trailing spaces. The length of binary data includes binary zeros. Examples: SELECT length('Spark SQL '); 10 SELECT CHAR_LENGTH('Spark SQL '); 10 SELECT CHARACTER_LENGTH('Spark SQL '); 10","title":"length"},{"location":"functions/#levenshtein","text":"levenshtein(str1, str2) - Returns the Levenshtein distance between the two given strings. Examples: SELECT levenshtein('kitten', 'sitting'); 3","title":"levenshtein"},{"location":"functions/#like","text":"str like pattern - Returns true if str matches pattern, null if any arguments are null, false otherwise. Arguments: str - a string expression pattern - a string expression. The pattern is a string which is matched literally, with exception to the following special symbols: _ matches any one character in the input (similar to . in posix regular expressions) % matches zero or more characters in the input (similar to .* in posix regular expressions) The escape character is '\\'. If an escape character precedes a special symbol or another escape character, the following character is matched literally. It is invalid to escape any other character. Since Spark 2.0, string literals are unescaped in our SQL parser. For example, in order to match \"\\abc\", the pattern should be \"\\abc\". When SQL config 'spark.sql.parser.escapedStringLiterals' is enabled, it fallbacks to Spark 1.6 behavior regarding string literal parsing. For example, if the config is enabled, the pattern to match \"\\abc\" should be \"\\abc\". Examples: SELECT '%SystemDrive%\\Users\\John' like '\\%SystemDrive\\%\\\\Users%' true Note: Use RLIKE to match with standard regular expressions.","title":"like"},{"location":"functions/#ln","text":"ln(expr) - Returns the natural logarithm (base e) of expr . Examples: SELECT ln(1); 0.0","title":"ln"},{"location":"functions/#locate","text":"locate(substr, str[, pos]) - Returns the position of the first occurrence of substr in str after position pos . The given pos and return value are 1-based. Examples: SELECT locate('bar', 'foobarbar'); 4 SELECT locate('bar', 'foobarbar', 5); 7 SELECT POSITION('bar' IN 'foobarbar'); 4","title":"locate"},{"location":"functions/#log","text":"log(base, expr) - Returns the logarithm of expr with base . Examples: SELECT log(10, 100); 2.0","title":"log"},{"location":"functions/#log10","text":"log10(expr) - Returns the logarithm of expr with base 10. Examples: SELECT log10(10); 1.0","title":"log10"},{"location":"functions/#log1p","text":"log1p(expr) - Returns log(1 + expr ). Examples: SELECT log1p(0); 0.0","title":"log1p"},{"location":"functions/#log2","text":"log2(expr) - Returns the logarithm of expr with base 2. Examples: SELECT log2(2); 1.0","title":"log2"},{"location":"functions/#lower","text":"lower(str) - Returns str with all characters changed to lowercase. Examples: SELECT lower('SparkSql'); sparksql","title":"lower"},{"location":"functions/#lpad","text":"lpad(str, len, pad) - Returns str , left-padded with pad to a length of len . If str is longer than len , the return value is shortened to len characters. Examples: SELECT lpad('hi', 5, '??'); ???hi SELECT lpad('hi', 1, '??'); h","title":"lpad"},{"location":"functions/#ltrim","text":"ltrim(str) - Removes the leading space characters from str . ltrim(trimStr, str) - Removes the leading string contains the characters from the trim string Arguments: str - a string expression trimStr - the trim string characters to trim, the default value is a single space Examples: SELECT ltrim(' SparkSQL '); SparkSQL SELECT ltrim('Sp', 'SSparkSQLS'); arkSQLS","title":"ltrim"},{"location":"functions/#map","text":"map(key0, value0, key1, value1, ...) - Creates a map with the given key/value pairs. Examples: SELECT map(1.0, '2', 3.0, '4'); {1.0: 2 ,3.0: 4 }","title":"map"},{"location":"functions/#map_keys","text":"map_keys(map) - Returns an unordered array containing the keys of the map. Examples: SELECT map_keys(map(1, 'a', 2, 'b')); [1,2]","title":"map_keys"},{"location":"functions/#map_values","text":"map_values(map) - Returns an unordered array containing the values of the map. Examples: SELECT map_values(map(1, 'a', 2, 'b')); [ a , b ]","title":"map_values"},{"location":"functions/#max","text":"max(expr) - Returns the maximum value of expr .","title":"max"},{"location":"functions/#md5","text":"md5(expr) - Returns an MD5 128-bit checksum as a hex string of expr . Examples: SELECT md5('Spark'); 8cde774d6f7333752ed72cacddb05126","title":"md5"},{"location":"functions/#mean","text":"mean(expr) - Returns the mean calculated from values of a group.","title":"mean"},{"location":"functions/#min","text":"min(expr) - Returns the minimum value of expr .","title":"min"},{"location":"functions/#minute","text":"minute(timestamp) - Returns the minute component of the string/timestamp. Examples: SELECT minute('2009-07-30 12:58:59'); 58 Since: 1.5.0","title":"minute"},{"location":"functions/#mod","text":"expr1 mod expr2 - Returns the remainder after expr1 / expr2 . Examples: SELECT 2 mod 1.8; 0.2 SELECT MOD(2, 1.8); 0.2","title":"mod"},{"location":"functions/#monotonically_increasing_id","text":"monotonically_increasing_id() - Returns monotonically increasing 64-bit integers. The generated ID is guaranteed to be monotonically increasing and unique, but not consecutive. The current implementation puts the partition ID in the upper 31 bits, and the lower 33 bits represent the record number within each partition. The assumption is that the data frame has less than 1 billion partitions, and each partition has less than 8 billion records.","title":"monotonically_increasing_id"},{"location":"functions/#month","text":"month(date) - Returns the month component of the date/timestamp. Examples: SELECT month('2016-07-30'); 7 Since: 1.5.0","title":"month"},{"location":"functions/#months_between","text":"months_between(timestamp1, timestamp2) - Returns number of months between timestamp1 and timestamp2 . Examples: SELECT months_between('1997-02-28 10:30:00', '1996-10-30'); 3.94959677 Since: 1.5.0","title":"months_between"},{"location":"functions/#named_struct","text":"named_struct(name1, val1, name2, val2, ...) - Creates a struct with the given field names and values. Examples: SELECT named_struct( a , 1, b , 2, c , 3); { a :1, b :2, c :3}","title":"named_struct"},{"location":"functions/#nanvl","text":"nanvl(expr1, expr2) - Returns expr1 if it's not NaN, or expr2 otherwise. Examples: SELECT nanvl(cast('NaN' as double), 123); 123.0","title":"nanvl"},{"location":"functions/#negative","text":"negative(expr) - Returns the negated value of expr . Examples: SELECT negative(1); -1","title":"negative"},{"location":"functions/#next_day","text":"next_day(start_date, day_of_week) - Returns the first date which is later than start_date and named as indicated. Examples: SELECT next_day('2015-01-14', 'TU'); 2015-01-20 Since: 1.5.0","title":"next_day"},{"location":"functions/#not","text":"not expr - Logical not.","title":"not"},{"location":"functions/#now","text":"now() - Returns the current timestamp at the start of query evaluation. Since: 1.5.0","title":"now"},{"location":"functions/#ntile","text":"ntile(n) - Divides the rows for each window partition into n buckets ranging from 1 to at most n .","title":"ntile"},{"location":"functions/#nullif","text":"nullif(expr1, expr2) - Returns null if expr1 equals to expr2 , or expr1 otherwise. Examples: SELECT nullif(2, 2); NULL","title":"nullif"},{"location":"functions/#nvl","text":"nvl(expr1, expr2) - Returns expr2 if expr1 is null, or expr1 otherwise. Examples: SELECT nvl(NULL, array('2')); [ 2 ]","title":"nvl"},{"location":"functions/#nvl2","text":"nvl2(expr1, expr2, expr3) - Returns expr2 if expr1 is not null, or expr3 otherwise. Examples: SELECT nvl2(NULL, 2, 1); 1","title":"nvl2"},{"location":"functions/#octet_length","text":"octet_length(expr) - Returns the byte length of string data or number of bytes of binary data. Examples: SELECT octet_length('Spark SQL'); 9","title":"octet_length"},{"location":"functions/#or","text":"expr1 or expr2 - Logical OR.","title":"or"},{"location":"functions/#parse_url","text":"parse_url(url, partToExtract[, key]) - Extracts a part from a URL. Examples: SELECT parse_url('http://spark.apache.org/path?query=1', 'HOST') spark.apache.org SELECT parse_url('http://spark.apache.org/path?query=1', 'QUERY') query=1 SELECT parse_url('http://spark.apache.org/path?query=1', 'QUERY', 'query') 1","title":"parse_url"},{"location":"functions/#percent_rank","text":"percent_rank() - Computes the percentage ranking of a value in a group of values.","title":"percent_rank"},{"location":"functions/#percentile","text":"percentile(col, percentage [, frequency]) - Returns the exact percentile value of numeric column col at the given percentage. The value of percentage must be between 0.0 and 1.0. The value of frequency should be positive integral percentile(col, array(percentage1 [, percentage2]...) [, frequency]) - Returns the exact percentile value array of numeric column col at the given percentage(s). Each value of the percentage array must be between 0.0 and 1.0. The value of frequency should be positive integral","title":"percentile"},{"location":"functions/#percentile_approx","text":"percentile_approx(col, percentage [, accuracy]) - Returns the approximate percentile value of numeric column col at the given percentage. The value of percentage must be between 0.0 and 1.0. The accuracy parameter (default: 10000) is a positive numeric literal which controls approximation accuracy at the cost of memory. Higher value of accuracy yields better accuracy, 1.0/accuracy is the relative error of the approximation. When percentage is an array, each value of the percentage array must be between 0.0 and 1.0. In this case, returns the approximate percentile array of column col at the given percentage array. Examples: SELECT percentile_approx(10.0, array(0.5, 0.4, 0.1), 100); [10.0,10.0,10.0] SELECT percentile_approx(10.0, 0.5, 100); 10.0","title":"percentile_approx"},{"location":"functions/#pi","text":"pi() - Returns pi. Examples: SELECT pi(); 3.141592653589793","title":"pi"},{"location":"functions/#pmod","text":"pmod(expr1, expr2) - Returns the positive value of expr1 mod expr2 . Examples: SELECT pmod(10, 3); 1 SELECT pmod(-10, 3); 2","title":"pmod"},{"location":"functions/#posexplode","text":"posexplode(expr) - Separates the elements of array expr into multiple rows with positions, or the elements of map expr into multiple rows and columns with positions. Examples: SELECT posexplode(array(10,20)); 0 10 1 20","title":"posexplode"},{"location":"functions/#posexplode_outer","text":"posexplode_outer(expr) - Separates the elements of array expr into multiple rows with positions, or the elements of map expr into multiple rows and columns with positions. Examples: SELECT posexplode_outer(array(10,20)); 0 10 1 20","title":"posexplode_outer"},{"location":"functions/#position","text":"position(substr, str[, pos]) - Returns the position of the first occurrence of substr in str after position pos . The given pos and return value are 1-based. Examples: SELECT position('bar', 'foobarbar'); 4 SELECT position('bar', 'foobarbar', 5); 7 SELECT POSITION('bar' IN 'foobarbar'); 4","title":"position"},{"location":"functions/#positive","text":"positive(expr) - Returns the value of expr .","title":"positive"},{"location":"functions/#pow","text":"pow(expr1, expr2) - Raises expr1 to the power of expr2 . Examples: SELECT pow(2, 3); 8.0","title":"pow"},{"location":"functions/#power","text":"power(expr1, expr2) - Raises expr1 to the power of expr2 . Examples: SELECT power(2, 3); 8.0","title":"power"},{"location":"functions/#printf","text":"printf(strfmt, obj, ...) - Returns a formatted string from printf-style format strings. Examples: SELECT printf( Hello World %d %s , 100, days ); Hello World 100 days","title":"printf"},{"location":"functions/#quarter","text":"quarter(date) - Returns the quarter of the year for date, in the range 1 to 4. Examples: SELECT quarter('2016-08-31'); 3 Since: 1.5.0","title":"quarter"},{"location":"functions/#radians","text":"radians(expr) - Converts degrees to radians. Arguments: expr - angle in degrees Examples: SELECT radians(180); 3.141592653589793","title":"radians"},{"location":"functions/#rand","text":"rand([seed]) - Returns a random value with independent and identically distributed (i.i.d.) uniformly distributed values in [0, 1). Examples: SELECT rand(); 0.9629742951434543 SELECT rand(0); 0.8446490682263027 SELECT rand(null); 0.8446490682263027","title":"rand"},{"location":"functions/#randn","text":"randn([seed]) - Returns a random value with independent and identically distributed (i.i.d.) values drawn from the standard normal distribution. Examples: SELECT randn(); -0.3254147983080288 SELECT randn(0); 1.1164209726833079 SELECT randn(null); 1.1164209726833079","title":"randn"},{"location":"functions/#rank","text":"rank() - Computes the rank of a value in a group of values. The result is one plus the number of rows preceding or equal to the current row in the ordering of the partition. The values will produce gaps in the sequence.","title":"rank"},{"location":"functions/#reflect","text":"reflect(class, method[, arg1[, arg2 ..]]) - Calls a method with reflection. Examples: SELECT reflect('java.util.UUID', 'randomUUID'); c33fb387-8500-4bfa-81d2-6e0e3e930df2 SELECT reflect('java.util.UUID', 'fromString', 'a5cf6c42-0c85-418f-af6c-3e4e5b1328f2'); a5cf6c42-0c85-418f-af6c-3e4e5b1328f2","title":"reflect"},{"location":"functions/#regexp_extract","text":"regexp_extract(str, regexp[, idx]) - Extracts a group that matches regexp . Examples: SELECT regexp_extract('100-200', '(\\d+)-(\\d+)', 1); 100","title":"regexp_extract"},{"location":"functions/#regexp_replace","text":"regexp_replace(str, regexp, rep) - Replaces all substrings of str that match regexp with rep . Examples: SELECT regexp_replace('100-200', '(\\d+)', 'num'); num-num","title":"regexp_replace"},{"location":"functions/#repeat","text":"repeat(str, n) - Returns the string which repeats the given string value n times. Examples: SELECT repeat('123', 2); 123123","title":"repeat"},{"location":"functions/#replace","text":"replace(str, search[, replace]) - Replaces all occurrences of search with replace . Arguments: str - a string expression search - a string expression. If search is not found in str , str is returned unchanged. replace - a string expression. If replace is not specified or is an empty string, nothing replaces the string that is removed from str . Examples: SELECT replace('ABCabc', 'abc', 'DEF'); ABCDEF","title":"replace"},{"location":"functions/#reverse","text":"reverse(str) - Returns the reversed given string. Examples: SELECT reverse('Spark SQL'); LQS krapS","title":"reverse"},{"location":"functions/#right","text":"right(str, len) - Returns the rightmost len ( len can be string type) characters from the string str ,if len is less or equal than 0 the result is an empty string. Examples: SELECT right('Spark SQL', 3); SQL","title":"right"},{"location":"functions/#rint","text":"rint(expr) - Returns the double value that is closest in value to the argument and is equal to a mathematical integer. Examples: SELECT rint(12.3456); 12.0","title":"rint"},{"location":"functions/#rlike","text":"str rlike regexp - Returns true if str matches regexp , or false otherwise. Arguments: str - a string expression regexp - a string expression. The pattern string should be a Java regular expression. Since Spark 2.0, string literals (including regex patterns) are unescaped in our SQL parser. For example, to match \"\\abc\", a regular expression for regexp can be \"^\\abc$\". There is a SQL config 'spark.sql.parser.escapedStringLiterals' that can be used to fallback to the Spark 1.6 behavior regarding string literal parsing. For example, if the config is enabled, the regexp that can match \"\\abc\" is \"^\\abc$\". Examples: When spark.sql.parser.escapedStringLiterals is disabled (default). SELECT '%SystemDrive%\\Users\\John' rlike '%SystemDrive%\\\\Users.*' true When spark.sql.parser.escapedStringLiterals is enabled. SELECT '%SystemDrive%\\Users\\John' rlike '%SystemDrive%\\Users.*' true Note: Use LIKE to match with simple string pattern.","title":"rlike"},{"location":"functions/#rollup","text":"","title":"rollup"},{"location":"functions/#round","text":"round(expr, d) - Returns expr rounded to d decimal places using HALF_UP rounding mode. Examples: SELECT round(2.5, 0); 3.0","title":"round"},{"location":"functions/#row_number","text":"row_number() - Assigns a unique, sequential number to each row, starting with one, according to the ordering of rows within the window partition.","title":"row_number"},{"location":"functions/#rpad","text":"rpad(str, len, pad) - Returns str , right-padded with pad to a length of len . If str is longer than len , the return value is shortened to len characters. Examples: SELECT rpad('hi', 5, '??'); hi??? SELECT rpad('hi', 1, '??'); h","title":"rpad"},{"location":"functions/#rtrim","text":"rtrim(str) - Removes the trailing space characters from str . rtrim(trimStr, str) - Removes the trailing string which contains the characters from the trim string from the str Arguments: str - a string expression trimStr - the trim string characters to trim, the default value is a single space Examples: SELECT rtrim(' SparkSQL '); SparkSQL SELECT rtrim('LQSa', 'SSparkSQLS'); SSpark","title":"rtrim"},{"location":"functions/#second","text":"second(timestamp) - Returns the second component of the string/timestamp. Examples: SELECT second('2009-07-30 12:58:59'); 59 Since: 1.5.0","title":"second"},{"location":"functions/#sentences","text":"sentences(str[, lang, country]) - Splits str into an array of array of words. Examples: SELECT sentences('Hi there! Good morning.'); [[ Hi , there ],[ Good , morning ]]","title":"sentences"},{"location":"functions/#sha","text":"sha(expr) - Returns a sha1 hash value as a hex string of the expr . Examples: SELECT sha('Spark'); 85f5955f4b27a9a4c2aab6ffe5d7189fc298b92c","title":"sha"},{"location":"functions/#sha1","text":"sha1(expr) - Returns a sha1 hash value as a hex string of the expr . Examples: SELECT sha1('Spark'); 85f5955f4b27a9a4c2aab6ffe5d7189fc298b92c","title":"sha1"},{"location":"functions/#sha2","text":"sha2(expr, bitLength) - Returns a checksum of SHA-2 family as a hex string of expr . SHA-224, SHA-256, SHA-384, and SHA-512 are supported. Bit length of 0 is equivalent to 256. Examples: SELECT sha2('Spark', 256); 529bc3b07127ecb7e53a4dcf1991d9152c24537d919178022b2c42657f79a26b","title":"sha2"},{"location":"functions/#shiftleft","text":"shiftleft(base, expr) - Bitwise left shift. Examples: SELECT shiftleft(2, 1); 4","title":"shiftleft"},{"location":"functions/#shiftright","text":"shiftright(base, expr) - Bitwise (signed) right shift. Examples: SELECT shiftright(4, 1); 2","title":"shiftright"},{"location":"functions/#shiftrightunsigned","text":"shiftrightunsigned(base, expr) - Bitwise unsigned right shift. Examples: SELECT shiftrightunsigned(4, 1); 2","title":"shiftrightunsigned"},{"location":"functions/#sign","text":"sign(expr) - Returns -1.0, 0.0 or 1.0 as expr is negative, 0 or positive. Examples: SELECT sign(40); 1.0","title":"sign"},{"location":"functions/#signum","text":"signum(expr) - Returns -1.0, 0.0 or 1.0 as expr is negative, 0 or positive. Examples: SELECT signum(40); 1.0","title":"signum"},{"location":"functions/#sin","text":"sin(expr) - Returns the sine of expr , as if computed by java.lang.Math.sin . Arguments: expr - angle in radians Examples: SELECT sin(0); 0.0","title":"sin"},{"location":"functions/#sinh","text":"sinh(expr) - Returns hyperbolic sine of expr , as if computed by java.lang.Math.sinh . Arguments: expr - hyperbolic angle Examples: SELECT sinh(0); 0.0","title":"sinh"},{"location":"functions/#size","text":"size(expr) - Returns the size of an array or a map. Returns -1 if null. Examples: SELECT size(array('b', 'd', 'c', 'a')); 4","title":"size"},{"location":"functions/#skewness","text":"skewness(expr) - Returns the skewness value calculated from values of a group.","title":"skewness"},{"location":"functions/#smallint","text":"smallint(expr) - Casts the value expr to the target data type smallint .","title":"smallint"},{"location":"functions/#sort_array","text":"sort_array(array[, ascendingOrder]) - Sorts the input array in ascending or descending order according to the natural ordering of the array elements. Examples: SELECT sort_array(array('b', 'd', 'c', 'a'), true); [ a , b , c , d ]","title":"sort_array"},{"location":"functions/#soundex","text":"soundex(str) - Returns Soundex code of the string. Examples: SELECT soundex('Miller'); M460","title":"soundex"},{"location":"functions/#space","text":"space(n) - Returns a string consisting of n spaces. Examples: SELECT concat(space(2), '1'); 1","title":"space"},{"location":"functions/#spark_partition_id","text":"spark_partition_id() - Returns the current partition id.","title":"spark_partition_id"},{"location":"functions/#split","text":"split(str, regex) - Splits str around occurrences that match regex . Examples: SELECT split('oneAtwoBthreeC', '[ABC]'); [ one , two , three , ]","title":"split"},{"location":"functions/#sqrt","text":"sqrt(expr) - Returns the square root of expr . Examples: SELECT sqrt(4); 2.0","title":"sqrt"},{"location":"functions/#stack","text":"stack(n, expr1, ..., exprk) - Separates expr1 , ..., exprk into n rows. Examples: SELECT stack(2, 1, 2, 3); 1 2 3 NULL","title":"stack"},{"location":"functions/#std","text":"std(expr) - Returns the sample standard deviation calculated from values of a group.","title":"std"},{"location":"functions/#stddev","text":"stddev(expr) - Returns the sample standard deviation calculated from values of a group.","title":"stddev"},{"location":"functions/#stddev_pop","text":"stddev_pop(expr) - Returns the population standard deviation calculated from values of a group.","title":"stddev_pop"},{"location":"functions/#stddev_samp","text":"stddev_samp(expr) - Returns the sample standard deviation calculated from values of a group.","title":"stddev_samp"},{"location":"functions/#str_to_map","text":"str_to_map(text[, pairDelim[, keyValueDelim]]) - Creates a map after splitting the text into key/value pairs using delimiters. Default delimiters are ',' for pairDelim and ':' for keyValueDelim . Examples: SELECT str_to_map('a:1,b:2,c:3', ',', ':'); map( a : 1 , b : 2 , c : 3 ) SELECT str_to_map('a'); map( a :null)","title":"str_to_map"},{"location":"functions/#string","text":"string(expr) - Casts the value expr to the target data type string .","title":"string"},{"location":"functions/#struct","text":"struct(col1, col2, col3, ...) - Creates a struct with the given field values.","title":"struct"},{"location":"functions/#substr","text":"substr(str, pos[, len]) - Returns the substring of str that starts at pos and is of length len , or the slice of byte array that starts at pos and is of length len . Examples: SELECT substr('Spark SQL', 5); k SQL SELECT substr('Spark SQL', -3); SQL SELECT substr('Spark SQL', 5, 1); k","title":"substr"},{"location":"functions/#substring","text":"substring(str, pos[, len]) - Returns the substring of str that starts at pos and is of length len , or the slice of byte array that starts at pos and is of length len . Examples: SELECT substring('Spark SQL', 5); k SQL SELECT substring('Spark SQL', -3); SQL SELECT substring('Spark SQL', 5, 1); k","title":"substring"},{"location":"functions/#substring_index","text":"substring_index(str, delim, count) - Returns the substring from str before count occurrences of the delimiter delim . If count is positive, everything to the left of the final delimiter (counting from the left) is returned. If count is negative, everything to the right of the final delimiter (counting from the right) is returned. The function substring_index performs a case-sensitive match when searching for delim . Examples: SELECT substring_index('www.apache.org', '.', 2); www.apache","title":"substring_index"},{"location":"functions/#sum","text":"sum(expr) - Returns the sum calculated from values of a group.","title":"sum"},{"location":"functions/#tan","text":"tan(expr) - Returns the tangent of expr , as if computed by java.lang.Math.tan . Arguments: expr - angle in radians Examples: SELECT tan(0); 0.0","title":"tan"},{"location":"functions/#tanh","text":"tanh(expr) - Returns the hyperbolic tangent of expr , as if computed by java.lang.Math.tanh . Arguments: expr - hyperbolic angle Examples: SELECT tanh(0); 0.0","title":"tanh"},{"location":"functions/#timestamp","text":"timestamp(expr) - Casts the value expr to the target data type timestamp .","title":"timestamp"},{"location":"functions/#tinyint","text":"tinyint(expr) - Casts the value expr to the target data type tinyint .","title":"tinyint"},{"location":"functions/#to_date","text":"to_date(date_str[, fmt]) - Parses the date_str expression with the fmt expression to a date. Returns null with invalid input. By default, it follows casting rules to a date if the fmt is omitted. Examples: SELECT to_date('2009-07-30 04:17:52'); 2009-07-30 SELECT to_date('2016-12-31', 'yyyy-MM-dd'); 2016-12-31 Since: 1.5.0","title":"to_date"},{"location":"functions/#to_json","text":"to_json(expr[, options]) - Returns a json string with a given struct value Examples: SELECT to_json(named_struct('a', 1, 'b', 2)); { a :1, b :2} SELECT to_json(named_struct('time', to_timestamp('2015-08-26', 'yyyy-MM-dd')), map('timestampFormat', 'dd/MM/yyyy')); { time : 26/08/2015 } SELECT to_json(array(named_struct('a', 1, 'b', 2)); [{ a :1, b :2}] SELECT to_json(map('a', named_struct('b', 1))); { a :{ b :1}} SELECT to_json(map(named_struct('a', 1),named_struct('b', 2))); { [1] :{ b :2}} SELECT to_json(map('a', 1)); { a :1} SELECT to_json(array((map('a', 1)))); [{ a :1}] Since: 2.2.0","title":"to_json"},{"location":"functions/#to_timestamp","text":"to_timestamp(timestamp[, fmt]) - Parses the timestamp expression with the fmt expression to a timestamp. Returns null with invalid input. By default, it follows casting rules to a timestamp if the fmt is omitted. Examples: SELECT to_timestamp('2016-12-31 00:12:00'); 2016-12-31 00:12:00 SELECT to_timestamp('2016-12-31', 'yyyy-MM-dd'); 2016-12-31 00:00:00 Since: 2.2.0","title":"to_timestamp"},{"location":"functions/#to_unix_timestamp","text":"to_unix_timestamp(expr[, pattern]) - Returns the UNIX timestamp of the given time. Examples: SELECT to_unix_timestamp('2016-04-08', 'yyyy-MM-dd'); 1460041200 Since: 1.6.0","title":"to_unix_timestamp"},{"location":"functions/#to_utc_timestamp","text":"to_utc_timestamp(timestamp, timezone) - Given a timestamp like '2017-07-14 02:40:00.0', interprets it as a time in the given time zone, and renders that time as a timestamp in UTC. For example, 'GMT+1' would yield '2017-07-14 01:40:00.0'. Examples: SELECT to_utc_timestamp('2016-08-31', 'Asia/Seoul'); 2016-08-30 15:00:00 Since: 1.5.0","title":"to_utc_timestamp"},{"location":"functions/#translate","text":"translate(input, from, to) - Translates the input string by replacing the characters present in the from string with the corresponding characters in the to string. Examples: SELECT translate('AaBbCc', 'abc', '123'); A1B2C3","title":"translate"},{"location":"functions/#trim","text":"trim(str) - Removes the leading and trailing space characters from str . trim(BOTH trimStr FROM str) - Remove the leading and trailing trimStr characters from str trim(LEADING trimStr FROM str) - Remove the leading trimStr characters from str trim(TRAILING trimStr FROM str) - Remove the trailing trimStr characters from str Arguments: str - a string expression trimStr - the trim string characters to trim, the default value is a single space BOTH, FROM - these are keywords to specify trimming string characters from both ends of the string LEADING, FROM - these are keywords to specify trimming string characters from the left end of the string TRAILING, FROM - these are keywords to specify trimming string characters from the right end of the string Examples: SELECT trim(' SparkSQL '); SparkSQL SELECT trim('SL', 'SSparkSQLS'); parkSQ SELECT trim(BOTH 'SL' FROM 'SSparkSQLS'); parkSQ SELECT trim(LEADING 'SL' FROM 'SSparkSQLS'); parkSQLS SELECT trim(TRAILING 'SL' FROM 'SSparkSQLS'); SSparkSQ","title":"trim"},{"location":"functions/#trunc","text":"trunc(date, fmt) - Returns date with the time portion of the day truncated to the unit specified by the format model fmt . fmt should be one of [\"year\", \"yyyy\", \"yy\", \"mon\", \"month\", \"mm\"] Examples: SELECT trunc('2009-02-12', 'MM'); 2009-02-01 SELECT trunc('2015-10-27', 'YEAR'); 2015-01-01 Since: 1.5.0","title":"trunc"},{"location":"functions/#ucase","text":"ucase(str) - Returns str with all characters changed to uppercase. Examples: SELECT ucase('SparkSql'); SPARKSQL","title":"ucase"},{"location":"functions/#unbase64","text":"unbase64(str) - Converts the argument from a base 64 string str to a binary. Examples: SELECT unbase64('U3BhcmsgU1FM'); Spark SQL","title":"unbase64"},{"location":"functions/#unhex","text":"unhex(expr) - Converts hexadecimal expr to binary. Examples: SELECT decode(unhex('537061726B2053514C'), 'UTF-8'); Spark SQL","title":"unhex"},{"location":"functions/#unix_timestamp","text":"unix_timestamp([expr[, pattern]]) - Returns the UNIX timestamp of current or specified time. Examples: SELECT unix_timestamp(); 1476884637 SELECT unix_timestamp('2016-04-08', 'yyyy-MM-dd'); 1460041200 Since: 1.5.0","title":"unix_timestamp"},{"location":"functions/#upper","text":"upper(str) - Returns str with all characters changed to uppercase. Examples: SELECT upper('SparkSql'); SPARKSQL","title":"upper"},{"location":"functions/#uuid","text":"uuid() - Returns an universally unique identifier (UUID) string. The value is returned as a canonical UUID 36-character string. Examples: SELECT uuid(); 46707d92-02f4-4817-8116-a4c3b23e6266","title":"uuid"},{"location":"functions/#var_pop","text":"var_pop(expr) - Returns the population variance calculated from values of a group.","title":"var_pop"},{"location":"functions/#var_samp","text":"var_samp(expr) - Returns the sample variance calculated from values of a group.","title":"var_samp"},{"location":"functions/#variance","text":"variance(expr) - Returns the sample variance calculated from values of a group.","title":"variance"},{"location":"functions/#weekofyear","text":"weekofyear(date) - Returns the week of the year of the given date. A week is considered to start on a Monday and week 1 is the first week with 3 days. Examples: SELECT weekofyear('2008-02-20'); 8 Since: 1.5.0","title":"weekofyear"},{"location":"functions/#when","text":"CASE WHEN expr1 THEN expr2 [WHEN expr3 THEN expr4]* [ELSE expr5] END - When expr1 = true, returns expr2 ; else when expr3 = true, returns expr4 ; else returns expr5 . Arguments: expr1, expr3 - the branch condition expressions should all be boolean type. expr2, expr4, expr5 - the branch value expressions and else value expression should all be same type or coercible to a common type. Examples: SELECT CASE WHEN 1 0 THEN 1 WHEN 2 0 THEN 2.0 ELSE 1.2 END; 1 SELECT CASE WHEN 1 0 THEN 1 WHEN 2 0 THEN 2.0 ELSE 1.2 END; 2 SELECT CASE WHEN 1 0 THEN 1 WHEN 2 0 THEN 2.0 END; NULL","title":"when"},{"location":"functions/#window","text":"","title":"window"},{"location":"functions/#xpath","text":"xpath(xml, xpath) - Returns a string array of values within the nodes of xml that match the XPath expression. Examples: SELECT xpath(' a b b1 /b b b2 /b b b3 /b c c1 /c c c2 /c /a ','a/b/text()'); ['b1','b2','b3']","title":"xpath"},{"location":"functions/#xpath_boolean","text":"xpath_boolean(xml, xpath) - Returns true if the XPath expression evaluates to true, or if a matching node is found. Examples: SELECT xpath_boolean(' a b 1 /b /a ','a/b'); true","title":"xpath_boolean"},{"location":"functions/#xpath_double","text":"xpath_double(xml, xpath) - Returns a double value, the value zero if no match is found, or NaN if a match is found but the value is non-numeric. Examples: SELECT xpath_double(' a b 1 /b b 2 /b /a ', 'sum(a/b)'); 3.0","title":"xpath_double"},{"location":"functions/#xpath_float","text":"xpath_float(xml, xpath) - Returns a float value, the value zero if no match is found, or NaN if a match is found but the value is non-numeric. Examples: SELECT xpath_float(' a b 1 /b b 2 /b /a ', 'sum(a/b)'); 3.0","title":"xpath_float"},{"location":"functions/#xpath_int","text":"xpath_int(xml, xpath) - Returns an integer value, or the value zero if no match is found, or a match is found but the value is non-numeric. Examples: SELECT xpath_int(' a b 1 /b b 2 /b /a ', 'sum(a/b)'); 3","title":"xpath_int"},{"location":"functions/#xpath_long","text":"xpath_long(xml, xpath) - Returns a long integer value, or the value zero if no match is found, or a match is found but the value is non-numeric. Examples: SELECT xpath_long(' a b 1 /b b 2 /b /a ', 'sum(a/b)'); 3","title":"xpath_long"},{"location":"functions/#xpath_number","text":"xpath_number(xml, xpath) - Returns a double value, the value zero if no match is found, or NaN if a match is found but the value is non-numeric. Examples: SELECT xpath_number(' a b 1 /b b 2 /b /a ', 'sum(a/b)'); 3.0","title":"xpath_number"},{"location":"functions/#xpath_short","text":"xpath_short(xml, xpath) - Returns a short integer value, or the value zero if no match is found, or a match is found but the value is non-numeric. Examples: SELECT xpath_short(' a b 1 /b b 2 /b /a ', 'sum(a/b)'); 3","title":"xpath_short"},{"location":"functions/#xpath_string","text":"xpath_string(xml, xpath) - Returns the text contents of the first xml node that matches the XPath expression. Examples: SELECT xpath_string(' a b b /b c cc /c /a ','a/c'); cc","title":"xpath_string"},{"location":"functions/#year","text":"year(date) - Returns the year component of the date/timestamp. Examples: SELECT year('2016-07-30'); 2016 Since: 1.5.0","title":"year"},{"location":"functions/#_15","text":"expr1 | expr2 - Returns the result of bitwise OR of expr1 and expr2 . Examples: SELECT 3 | 5; 7","title":"|"},{"location":"functions/#_16","text":"~ expr - Returns the result of bitwise NOT of expr . Examples: SELECT ~ 0; -1","title":"~"},{"location":"datasources/common/","text":"XSQL\u5df2\u7ecf\u5bf9\u591a\u79cd\u6570\u636e\u6e90\u8fdb\u884c\u4e86\u652f\u6301\uff0c\u5b83\u4eec\u5206\u522b\u662f\uff1a Hive MySQL Elasticsearch MongoDB Kafka HBASE Redis Druid Oracle\uff08Pending\uff09 Clickhouse\uff08Pending\uff09","title":"Common"},{"location":"datasources/common/#hive","text":"","title":"Hive"},{"location":"datasources/common/#mysql","text":"","title":"MySQL"},{"location":"datasources/common/#elasticsearch","text":"","title":"Elasticsearch"},{"location":"datasources/common/#mongodb","text":"","title":"MongoDB"},{"location":"datasources/common/#kafka","text":"","title":"Kafka"},{"location":"datasources/common/#hbase","text":"","title":"HBASE"},{"location":"datasources/common/#redis","text":"","title":"Redis"},{"location":"datasources/common/#druid","text":"Oracle\uff08Pending\uff09 Clickhouse\uff08Pending\uff09","title":"Druid"},{"location":"datasources/druid/","text":"Druid \u662f\u4e00\u4e2a\u5f00\u6e90\u7684\uff0c\u5206\u5e03\u5f0f\u7684\uff0c\u5217\u5b58\u50a8\u7684\uff0c\u9002\u7528\u4e8e\u5b9e\u65f6\u6570\u636e\u5206\u6790\u7684\u5b58\u50a8\u7cfb\u7edf\uff0c\u80fd\u591f\u5feb\u901f\u805a\u5408\u3001\u7075\u6d3b\u8fc7\u6ee4\u3001\u6beb\u79d2\u7ea7\u67e5\u8be2\u3001\u548c\u4f4e\u5ef6\u8fdf\u6570\u636e\u5bfc\u5165\u3002 Installation \u200b \u7531\u4e8eDruid\u63d0\u4f9b\u4e86Rest API\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u4efb\u4f55\u5b89\u88c5\u3002\u5bf9\u4e8e\u60f3\u8981\u4e86\u89e3Druid Rest API\u7684\u7528\u6237\u8bf7\u67e5\u9605 \u5b98\u65b9\u6587\u6863 \u3002 Configuration Druid\u63a5\u5165XSQL\u7684\u914d\u7f6e\u7ee7\u627f\u4e86 Configurations \u4e2d\u9488\u5bf9\u7279\u5b9a\u6570\u636e\u6e90\u7684type\u3001version\u3001schemas\u914d\u7f6e\u3002Druid\u63a5\u5165XSQL\u8fd8\u6709\u4e00\u4e9b\u7279\u6709\u7684\u914d\u7f6e\uff0c\u4e0b\u8868\u5c06\u5bf9\u4ed6\u4eec\u8fdb\u884c\u4ecb\u7ecd\u3002 Property Name Default Meaning spark.xsql.datasource.$dataSource.coordinator.uri None \u914d\u7f6ecoordinator uri \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2aDruid\u63a5\u5165XSQL\u7684\u914d\u7f6e\u793a\u4f8b\uff1a xsql.conf\u6587\u4ef6: spark.xsql.datasource.mydruid.type DRUID spark.xsql.datasource.mydruid.uri http://r883.dfs.shbt.qihoo.net:8082 spark.xsql.datasource.mydruid.coordinator.uri r883.dfs.shbt.qihoo.net:8081 spark.xsql.datasource.mydruid.user xxxx spark.xsql.datasource.mydruid.password xxxx spark.xsql.datasource.mydruid.version 0.10.1 spark.xsql.datasource.mydruid.whitelist druid-whitelist.conf druid-whitelist.conf\u6587\u4ef6\uff1a \u6570\u636e\u5e93\u540d\u79f0\u5fc5\u987b\u4e3a\uff1adruid lineitem10,xsql\u4e3aDruid\u7684DataSource { druid : { includes : [ lineitem10 , xsql ], excludes : [] } } Execution 1\u3001Select Queries select * from xx where __time = '' and __time = '' and xxx or xxx Examples select * from mydruid.druid.lineitem10 where __time ='1991-01-01' and __time '1999-01-01' and l_commitdate='1997-02-08' limit 10; \u7ed3\u679c\uff1a 1996-11-11T00:00:00.000+08:00 1 ic deposits. quickly 1997-02-08 0.07999999821186066 59096.3984375 3 O 36001798 1222868 33 1996-11-23 N COLLECT COD TRUCK 72893 0.07000000029802322 NULL 1996-11-11T00:00:00.000+08:00 1 ns. requests cajole blith 1997-02-08 0.05000000074505806 28436.0703125 2 O 43300226 57715 17 1996-11-12 N COLLECT COD MAIL 57716 0.05999999865889549 NULL 1996-11-11T00:00:00.000+08:00 1 lar sentiments. quickly pen 1997-02-08 0.07999999821186066 5510.1298828125 4 O 45456578 979757 3 1996-11-18 N NONE SHIP 29776 0.03999999910593033 NULL 1996-11-11T00:00:00.000+08:00 1 serve carefully along th 1997-02-08 0.019999999552965164 45402.4609375 2 O 47689120 455032 46 1996-11-16 N COLLECT COD MAIL 80037 0.07999999821186066 NULL 1996-11-11T00:00:00.000+08:00 1 ar requests wa 1997-02-08 0.03999999910593033 40127.4296875 1 O 47689120 934876 211996-12-05 N NONE AIR 34877 0.019999999552965164 NULL 1996-11-11T00:00:00.000+08:00 1 never final accounts wake carefully qu 1997-02-08 0.0 3999.659912109375 4 O 58656996 971262 3 1996-11-12 N NONE RAIL 46290 0.05000000074505806 NULL 1996-11-12T00:00:00.000+08:00 1 al requests wake. blithely unusual dep 1997-02-08 0.07999999821186066 68074.078125 4 O 31170243 1046893 37 1996-11-23 N DELIVER IN PERSON MAIL 46894 0.029999999329447746 NULL 1996-11-12T00:00:00.000+08:00 1 uctions affix carefully! furio 1997-02-08 0.029999999329447746 21567.69921875 2 O 35882630 1417623 14 1996-12-01 N COLLECT COD AIR 17624 0.029999999329447746 NULL 1996-11-12T00:00:00.000+08:00 1 carefully alo 1997-02-08 0.03999999910593033 9488.580078125 4 O 44366240 1192489 6 1996-11-20 N TAKE BACK RETURN FOB 42512 0.05000000074505806 NULL 1996-11-12T00:00:00.000+08:00 1 tes. fluffily ironic deposits 1997-02-08 0.05999999865889549 54193.6015625 1 O 46005638 1758635 32 1996-12-02 N COLLECT COD RAIL 33687 0.05999999865889549 NULL \u5b9e\u73b0\u65b9\u5f0f \u7b49\u6548\u67e5\u8be2 xsql select * from mydruid.druid.lineitem10 limit 3; druid json {\"queryType\":\"select\",\"dataSource\":\"lineitem10\",\"granularity\":\"all\"...} 1\u3001__time:\u5fc5\u5199\u9879 \u8f6c\u6362\u6210Druid intervals 2\u3001granularity: all , none , second , minute , fifteen_minute , thirty_minute , hour , day , week , month , quarter , year \u9ed8\u8ba4 all 3\u3001where \u540e\u9762\u7684\u6761\u4ef6\u9664\u4e86__time,granularity \u5176\u4ed6\u6761\u4ef6\u8f6c\u5316Druid\u7684filter /font 2\u3001GroupBy Queries select l_shipinstruct,sum(l_quantity),sum(l_discount) from mydruid.druid.lineitem10 where __time ='1991-01-01' and __time '1999-01-03' and l_commitdate='1997-02-08' group by l_shipinstruct limit 10; Examples select l_shipinstruct,sum(l_quantity) as l_quantity,sum(l_discount) from mydruid.druid.lineitem10 where __time ='1991-01-01' and __time '1999-01-03' and l_commitdate='1997-02-08' group by l_shipinstruct limit 10; \u7ed3\u679c: COLLECT COD 158972 311.4700002372265 DELIVER IN PERSON 158778 305.7599999830127 NONE 160785 313.9799999296665 TAKE BACK RETURN 160337 314.15999987721443 --\u4e5f\u652f\u6301granularity\u65f6\u95f4\u7c92\u5ea6\u7684\u67e5\u8be2 select l_shipinstruct,sum(l_quantity) as l_quantity,sum(l_discount),count(__time) from mydruid.druid.lineitem10 where __time ='1991-01-01' and __time '1999-01-01' and granularity = 'year' group by l_shipinstruct order by l_quantity asc limit 10; \u7ed3\u679c\uff1a DELIVER IN PERSON 48373277 94782.64012855478 1895995 TAKE BACK RETURN 48412356 94971.76013177447 1899524 NONE 48446820 94990.60012911633 1899514 COLLECT COD 48472785 95076.87012936734 1900477 TAKE BACK RETURN 58044094 113911.56015220843 2277249 DELIVER IN PERSON 58048477 113781.76015352085 2276162 \u5e26\u6709granularity\u65f6\u95f4\u7c92\u5ea6\u65f6\uff0c\u5982\u679c\u6ca1\u6709group by __time \u4e0d\u663e\u793a\u65f6\u95f4\uff0c\u4e5f\u53ef\u4ee5\u5982\u4e0b\u64cd\u4f5c \u8be5\u64cd\u4f5c\u5176\u5b9e\u662fdruid TopN query \u5e26\u65f6\u95f4\u7684group by select __time,l_shipinstruct,sum(l_quantity) as l_quantity,sum(l_discount),count(__time) from mydruid.druid.lineitem10 where __time ='1991-01-01' and __time '1999-01-01' and granularity = 'year' group by l_shipinstruct,__time order by l_quantity asc limit 10; \u7ed3\u679c\uff1a 1992-01-01T00:00:00.000+08:00 DELIVER IN PERSON 48373277 94782.63984715939 1895995 1992-01-01T00:00:00.000+08:00 TAKE BACK RETURN 48412356 94971.75982236862 1899524 1992-01-01T00:00:00.000+08:00 NONE 48446820 94990.59980535507 1899514 1992-01-01T00:00:00.000+08:00 COLLECT COD 48472785 95076.869743824 1900477 1993-01-01T00:00:00.000+08:00 TAKE BACK RETURN 58044094 113911.56018066406 2277249 1993-01-01T00:00:00.000+08:00 DELIVER IN PERSON 58048477 113781.75991821289 2276162 1993-01-01T00:00:00.000+08:00 COLLECT COD 58057693 113913.849609375 2276807 1993-01-01T00:00:00.000+08:00 NONE 58137066 113969.76986694336 2279423 1994-01-01T00:00:00.000+08:00 NONE 57931103 113608.79022216797 2272749 1994-01-01T00:00:00.000+08:00 TAKE BACK RETURN 58047015 113828.31967163086 2275702 \u8be5SQL\u4e0e\u4e0a\u9762\u7684SQL\u4e0d\u7528\uff0c\u8be5\u64cd\u4f5c\u662fDruid\u7684group by query \u5b9e\u73b0\u65b9\u5f0f \u7b49\u6548\u67e5\u8be2 xsql select l_shipinstruct,sum(l_quantity),sum(l_discount)...; druid json {\"queryType\":\"groupBy\",\"dataSource\":\"lineitem10\"...} 1\u3001\u652f\u6301\u7684\u805a\u5408\u51fd\u6570\uff1asum,max,min,count,count(distinct) 2\u3001count:\u5bf9\u5e94Druid { type : count , name : output_name } 3\u3001count(distinct a,b):\u652f\u6301\u591a\u4e2a\u5b57\u6bb5\uff0c\u4f1a\u6839\u636ea,b\u6570\u636e\u7c7b\u578b\u91c7\u7528\u4e0d\u540c\u7684\u7b97\u6cd5 hyperUnique:{ type : hyperUnique , name :, fieldName : metric_name } cardinality:{ type : cardinality , name : xxx , fields : xx, byRow : true} cardinality:{ type : cardinality , name : xxx , fields : xx, byRow : true} \u591a\u4e2a\u5b57\u6bb5\u65f6\u8f6c\u6362\u6210 { type : cardinality , name : distinct_people , fields : [ first_name , last_name ], byRow : true}\uff0ccardinality\u53ea\u652f\u6301 byRow : true 4\u3001order by \u76ee\u524d\u53ea\u652f\u6301\u6570\u5b57\u7c7b\u578b\u7684asc,desc \u5b57\u7b26\u7c7b\u578b\u7684\u652f\u6301asc (druid\u4e2d\u7684lexicographic) /font 3\u3001Timeseries queries select sum(l_extendedprice), sum(l_discount) from mydruid.druid.lineitem10 where __time ='1991-01-01' and __time '1999-01-03'; Examples select sum(l_extendedprice), sum(l_discount) from mydruid.druid.lineitem10 where __time ='1991-01-01' and __time '1999-01-03'; \u7ed3\u679c\uff1a 2.29381315672004E12 2999373.2440630347 \u5f53\u6709\u805a\u5408\u51fd\u6570\u4f46\u662f\u6ca1\u6709group by\u65f6\uff0c\u8f6c\u6362\u6210druid timeseries\u67e5\u8be2 select __time,sum(l_quantity) as l_quantity,sum(l_discount),count(__time) from mydruid.druid.lineitem10 where __time ='1991-01-01' and __time '1997-01-04' and granularity = 'year' group by __time limit 10; \u5b9e\u73b0\u65b9\u5f0f \u7b49\u6548\u67e5\u8be2 xsql select sum(l_extendedprice), sum(l_discount) where xxx druid json {\"queryType\":\"timeseries\",\"dataSource\":\"lineitem10\"...} select __time,sum(l_quantity) as l_quantity,sum(l_discount),count(__time) from mydruid.druid.lineitem10 where __time ='1991-01-01' and __time '1997-01-04' and granularity = 'year' group by __time limit 10; \u7ed3\u679c\uff1a 1992-01-01T00:00:00.000+08:00 193705238 379821.8705188129 7595510 1993-01-01T00:00:00.000+08:00 232287330 455576.94061456993 9109641 1994-01-01T00:00:00.000+08:00 232113470 454986.6906189304 9099165 1995-01-01T00:00:00.000+08:00 232236548 455190.7406086065 9106637 1996-01-01T00:00:00.000+08:00 232654414 456373.2906226516 9123688 1997-01-01T00:00:00.000+08:00 1904679 3737.5100051425397 74869 \u5b9e\u73b0\u65b9\u5f0f \u7b49\u6548\u67e5\u8be2 xsql select __time,sum(l_quantity) granularity = 'year' group by __time druid json {\"queryType\":\"timeseries\",\"dataSource\":\"lineitem10\"...} \u5f53group by \u53ea\u6709\u4e00\u4e2a\u5b57\u6bb5\u4e14\u4e3a__time\u65f6,\u4e5f\u4f1a\u8f6c\u6362\u6210druid timeseries\u67e5\u8be2 granularity\u6307\u7684\u662f\u65f6\u95f4\u7c92\u5ea6\u4e5f\u5c31\u662f\u5bf9\u67d0\u4e2a\u65f6\u95f4\u6bb5\u7684\u7edf\u8ba1 4\u3001TopN queries select l_shipinstruct,sum(l_quantity) as l_quantity,sum(l_discount),count(__time) from mydruid.druid.lineitem10 where __time ='1991-01-01' and __time '1999-01-01' group by l_shipinstruct order by l_quantity asc limit 10; \u5b9e\u73b0\u65b9\u5f0f \u7b49\u6548\u67e5\u8be2 xsql select sum(l_extendedprice), sum(l_discount) group by oder by druid json {\"queryType\":\"topN\",\"dataSource\":\"lineitem10\"...} select l_shipinstruct,sum(l_quantity) as l_quantity,sum(l_discount),count(__time) from mydruid.druid.lineitem10 where __time ='1991-01-01' and __time '1999-01-01' group by l_shipinstruct order by l_quantity asc limit 10; \u7ed3\u679c\uff1a TAKE BACK RETURN 382377564 749815.1810177844 14995638 COLLECT COD 382410465 749926.601011185 14995241 DELIVER IN PERSON 382437327 749621.3410196826 14994611 NONE 382512680 750010.1210143827 15000562","title":"Druid"},{"location":"datasources/druid/#installation","text":"\u200b \u7531\u4e8eDruid\u63d0\u4f9b\u4e86Rest API\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u4efb\u4f55\u5b89\u88c5\u3002\u5bf9\u4e8e\u60f3\u8981\u4e86\u89e3Druid Rest API\u7684\u7528\u6237\u8bf7\u67e5\u9605 \u5b98\u65b9\u6587\u6863 \u3002","title":"Installation"},{"location":"datasources/druid/#configuration","text":"Druid\u63a5\u5165XSQL\u7684\u914d\u7f6e\u7ee7\u627f\u4e86 Configurations \u4e2d\u9488\u5bf9\u7279\u5b9a\u6570\u636e\u6e90\u7684type\u3001version\u3001schemas\u914d\u7f6e\u3002Druid\u63a5\u5165XSQL\u8fd8\u6709\u4e00\u4e9b\u7279\u6709\u7684\u914d\u7f6e\uff0c\u4e0b\u8868\u5c06\u5bf9\u4ed6\u4eec\u8fdb\u884c\u4ecb\u7ecd\u3002 Property Name Default Meaning spark.xsql.datasource.$dataSource.coordinator.uri None \u914d\u7f6ecoordinator uri \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2aDruid\u63a5\u5165XSQL\u7684\u914d\u7f6e\u793a\u4f8b\uff1a xsql.conf\u6587\u4ef6: spark.xsql.datasource.mydruid.type DRUID spark.xsql.datasource.mydruid.uri http://r883.dfs.shbt.qihoo.net:8082 spark.xsql.datasource.mydruid.coordinator.uri r883.dfs.shbt.qihoo.net:8081 spark.xsql.datasource.mydruid.user xxxx spark.xsql.datasource.mydruid.password xxxx spark.xsql.datasource.mydruid.version 0.10.1 spark.xsql.datasource.mydruid.whitelist druid-whitelist.conf druid-whitelist.conf\u6587\u4ef6\uff1a \u6570\u636e\u5e93\u540d\u79f0\u5fc5\u987b\u4e3a\uff1adruid lineitem10,xsql\u4e3aDruid\u7684DataSource { druid : { includes : [ lineitem10 , xsql ], excludes : [] } }","title":"Configuration"},{"location":"datasources/druid/#execution","text":"","title":"Execution"},{"location":"datasources/druid/#1select-queries","text":"select * from xx where __time = '' and __time = '' and xxx or xxx Examples select * from mydruid.druid.lineitem10 where __time ='1991-01-01' and __time '1999-01-01' and l_commitdate='1997-02-08' limit 10; \u7ed3\u679c\uff1a 1996-11-11T00:00:00.000+08:00 1 ic deposits. quickly 1997-02-08 0.07999999821186066 59096.3984375 3 O 36001798 1222868 33 1996-11-23 N COLLECT COD TRUCK 72893 0.07000000029802322 NULL 1996-11-11T00:00:00.000+08:00 1 ns. requests cajole blith 1997-02-08 0.05000000074505806 28436.0703125 2 O 43300226 57715 17 1996-11-12 N COLLECT COD MAIL 57716 0.05999999865889549 NULL 1996-11-11T00:00:00.000+08:00 1 lar sentiments. quickly pen 1997-02-08 0.07999999821186066 5510.1298828125 4 O 45456578 979757 3 1996-11-18 N NONE SHIP 29776 0.03999999910593033 NULL 1996-11-11T00:00:00.000+08:00 1 serve carefully along th 1997-02-08 0.019999999552965164 45402.4609375 2 O 47689120 455032 46 1996-11-16 N COLLECT COD MAIL 80037 0.07999999821186066 NULL 1996-11-11T00:00:00.000+08:00 1 ar requests wa 1997-02-08 0.03999999910593033 40127.4296875 1 O 47689120 934876 211996-12-05 N NONE AIR 34877 0.019999999552965164 NULL 1996-11-11T00:00:00.000+08:00 1 never final accounts wake carefully qu 1997-02-08 0.0 3999.659912109375 4 O 58656996 971262 3 1996-11-12 N NONE RAIL 46290 0.05000000074505806 NULL 1996-11-12T00:00:00.000+08:00 1 al requests wake. blithely unusual dep 1997-02-08 0.07999999821186066 68074.078125 4 O 31170243 1046893 37 1996-11-23 N DELIVER IN PERSON MAIL 46894 0.029999999329447746 NULL 1996-11-12T00:00:00.000+08:00 1 uctions affix carefully! furio 1997-02-08 0.029999999329447746 21567.69921875 2 O 35882630 1417623 14 1996-12-01 N COLLECT COD AIR 17624 0.029999999329447746 NULL 1996-11-12T00:00:00.000+08:00 1 carefully alo 1997-02-08 0.03999999910593033 9488.580078125 4 O 44366240 1192489 6 1996-11-20 N TAKE BACK RETURN FOB 42512 0.05000000074505806 NULL 1996-11-12T00:00:00.000+08:00 1 tes. fluffily ironic deposits 1997-02-08 0.05999999865889549 54193.6015625 1 O 46005638 1758635 32 1996-12-02 N COLLECT COD RAIL 33687 0.05999999865889549 NULL \u5b9e\u73b0\u65b9\u5f0f \u7b49\u6548\u67e5\u8be2 xsql select * from mydruid.druid.lineitem10 limit 3; druid json {\"queryType\":\"select\",\"dataSource\":\"lineitem10\",\"granularity\":\"all\"...} 1\u3001__time:\u5fc5\u5199\u9879 \u8f6c\u6362\u6210Druid intervals 2\u3001granularity: all , none , second , minute , fifteen_minute , thirty_minute , hour , day , week , month , quarter , year \u9ed8\u8ba4 all 3\u3001where \u540e\u9762\u7684\u6761\u4ef6\u9664\u4e86__time,granularity \u5176\u4ed6\u6761\u4ef6\u8f6c\u5316Druid\u7684filter /font","title":"1\u3001Select Queries"},{"location":"datasources/druid/#2groupby-queries","text":"select l_shipinstruct,sum(l_quantity),sum(l_discount) from mydruid.druid.lineitem10 where __time ='1991-01-01' and __time '1999-01-03' and l_commitdate='1997-02-08' group by l_shipinstruct limit 10; Examples select l_shipinstruct,sum(l_quantity) as l_quantity,sum(l_discount) from mydruid.druid.lineitem10 where __time ='1991-01-01' and __time '1999-01-03' and l_commitdate='1997-02-08' group by l_shipinstruct limit 10; \u7ed3\u679c: COLLECT COD 158972 311.4700002372265 DELIVER IN PERSON 158778 305.7599999830127 NONE 160785 313.9799999296665 TAKE BACK RETURN 160337 314.15999987721443 --\u4e5f\u652f\u6301granularity\u65f6\u95f4\u7c92\u5ea6\u7684\u67e5\u8be2 select l_shipinstruct,sum(l_quantity) as l_quantity,sum(l_discount),count(__time) from mydruid.druid.lineitem10 where __time ='1991-01-01' and __time '1999-01-01' and granularity = 'year' group by l_shipinstruct order by l_quantity asc limit 10; \u7ed3\u679c\uff1a DELIVER IN PERSON 48373277 94782.64012855478 1895995 TAKE BACK RETURN 48412356 94971.76013177447 1899524 NONE 48446820 94990.60012911633 1899514 COLLECT COD 48472785 95076.87012936734 1900477 TAKE BACK RETURN 58044094 113911.56015220843 2277249 DELIVER IN PERSON 58048477 113781.76015352085 2276162 \u5e26\u6709granularity\u65f6\u95f4\u7c92\u5ea6\u65f6\uff0c\u5982\u679c\u6ca1\u6709group by __time \u4e0d\u663e\u793a\u65f6\u95f4\uff0c\u4e5f\u53ef\u4ee5\u5982\u4e0b\u64cd\u4f5c \u8be5\u64cd\u4f5c\u5176\u5b9e\u662fdruid TopN query \u5e26\u65f6\u95f4\u7684group by select __time,l_shipinstruct,sum(l_quantity) as l_quantity,sum(l_discount),count(__time) from mydruid.druid.lineitem10 where __time ='1991-01-01' and __time '1999-01-01' and granularity = 'year' group by l_shipinstruct,__time order by l_quantity asc limit 10; \u7ed3\u679c\uff1a 1992-01-01T00:00:00.000+08:00 DELIVER IN PERSON 48373277 94782.63984715939 1895995 1992-01-01T00:00:00.000+08:00 TAKE BACK RETURN 48412356 94971.75982236862 1899524 1992-01-01T00:00:00.000+08:00 NONE 48446820 94990.59980535507 1899514 1992-01-01T00:00:00.000+08:00 COLLECT COD 48472785 95076.869743824 1900477 1993-01-01T00:00:00.000+08:00 TAKE BACK RETURN 58044094 113911.56018066406 2277249 1993-01-01T00:00:00.000+08:00 DELIVER IN PERSON 58048477 113781.75991821289 2276162 1993-01-01T00:00:00.000+08:00 COLLECT COD 58057693 113913.849609375 2276807 1993-01-01T00:00:00.000+08:00 NONE 58137066 113969.76986694336 2279423 1994-01-01T00:00:00.000+08:00 NONE 57931103 113608.79022216797 2272749 1994-01-01T00:00:00.000+08:00 TAKE BACK RETURN 58047015 113828.31967163086 2275702 \u8be5SQL\u4e0e\u4e0a\u9762\u7684SQL\u4e0d\u7528\uff0c\u8be5\u64cd\u4f5c\u662fDruid\u7684group by query \u5b9e\u73b0\u65b9\u5f0f \u7b49\u6548\u67e5\u8be2 xsql select l_shipinstruct,sum(l_quantity),sum(l_discount)...; druid json {\"queryType\":\"groupBy\",\"dataSource\":\"lineitem10\"...} 1\u3001\u652f\u6301\u7684\u805a\u5408\u51fd\u6570\uff1asum,max,min,count,count(distinct) 2\u3001count:\u5bf9\u5e94Druid { type : count , name : output_name } 3\u3001count(distinct a,b):\u652f\u6301\u591a\u4e2a\u5b57\u6bb5\uff0c\u4f1a\u6839\u636ea,b\u6570\u636e\u7c7b\u578b\u91c7\u7528\u4e0d\u540c\u7684\u7b97\u6cd5 hyperUnique:{ type : hyperUnique , name :, fieldName : metric_name } cardinality:{ type : cardinality , name : xxx , fields : xx, byRow : true} cardinality:{ type : cardinality , name : xxx , fields : xx, byRow : true} \u591a\u4e2a\u5b57\u6bb5\u65f6\u8f6c\u6362\u6210 { type : cardinality , name : distinct_people , fields : [ first_name , last_name ], byRow : true}\uff0ccardinality\u53ea\u652f\u6301 byRow : true 4\u3001order by \u76ee\u524d\u53ea\u652f\u6301\u6570\u5b57\u7c7b\u578b\u7684asc,desc \u5b57\u7b26\u7c7b\u578b\u7684\u652f\u6301asc (druid\u4e2d\u7684lexicographic) /font","title":"2\u3001GroupBy Queries"},{"location":"datasources/druid/#3timeseries-queries","text":"select sum(l_extendedprice), sum(l_discount) from mydruid.druid.lineitem10 where __time ='1991-01-01' and __time '1999-01-03'; Examples select sum(l_extendedprice), sum(l_discount) from mydruid.druid.lineitem10 where __time ='1991-01-01' and __time '1999-01-03'; \u7ed3\u679c\uff1a 2.29381315672004E12 2999373.2440630347 \u5f53\u6709\u805a\u5408\u51fd\u6570\u4f46\u662f\u6ca1\u6709group by\u65f6\uff0c\u8f6c\u6362\u6210druid timeseries\u67e5\u8be2 select __time,sum(l_quantity) as l_quantity,sum(l_discount),count(__time) from mydruid.druid.lineitem10 where __time ='1991-01-01' and __time '1997-01-04' and granularity = 'year' group by __time limit 10; \u5b9e\u73b0\u65b9\u5f0f \u7b49\u6548\u67e5\u8be2 xsql select sum(l_extendedprice), sum(l_discount) where xxx druid json {\"queryType\":\"timeseries\",\"dataSource\":\"lineitem10\"...} select __time,sum(l_quantity) as l_quantity,sum(l_discount),count(__time) from mydruid.druid.lineitem10 where __time ='1991-01-01' and __time '1997-01-04' and granularity = 'year' group by __time limit 10; \u7ed3\u679c\uff1a 1992-01-01T00:00:00.000+08:00 193705238 379821.8705188129 7595510 1993-01-01T00:00:00.000+08:00 232287330 455576.94061456993 9109641 1994-01-01T00:00:00.000+08:00 232113470 454986.6906189304 9099165 1995-01-01T00:00:00.000+08:00 232236548 455190.7406086065 9106637 1996-01-01T00:00:00.000+08:00 232654414 456373.2906226516 9123688 1997-01-01T00:00:00.000+08:00 1904679 3737.5100051425397 74869 \u5b9e\u73b0\u65b9\u5f0f \u7b49\u6548\u67e5\u8be2 xsql select __time,sum(l_quantity) granularity = 'year' group by __time druid json {\"queryType\":\"timeseries\",\"dataSource\":\"lineitem10\"...} \u5f53group by \u53ea\u6709\u4e00\u4e2a\u5b57\u6bb5\u4e14\u4e3a__time\u65f6,\u4e5f\u4f1a\u8f6c\u6362\u6210druid timeseries\u67e5\u8be2 granularity\u6307\u7684\u662f\u65f6\u95f4\u7c92\u5ea6\u4e5f\u5c31\u662f\u5bf9\u67d0\u4e2a\u65f6\u95f4\u6bb5\u7684\u7edf\u8ba1","title":"3\u3001Timeseries queries"},{"location":"datasources/druid/#4topn-queries","text":"select l_shipinstruct,sum(l_quantity) as l_quantity,sum(l_discount),count(__time) from mydruid.druid.lineitem10 where __time ='1991-01-01' and __time '1999-01-01' group by l_shipinstruct order by l_quantity asc limit 10; \u5b9e\u73b0\u65b9\u5f0f \u7b49\u6548\u67e5\u8be2 xsql select sum(l_extendedprice), sum(l_discount) group by oder by druid json {\"queryType\":\"topN\",\"dataSource\":\"lineitem10\"...} select l_shipinstruct,sum(l_quantity) as l_quantity,sum(l_discount),count(__time) from mydruid.druid.lineitem10 where __time ='1991-01-01' and __time '1999-01-01' group by l_shipinstruct order by l_quantity asc limit 10; \u7ed3\u679c\uff1a TAKE BACK RETURN 382377564 749815.1810177844 14995638 COLLECT COD 382410465 749926.601011185 14995241 DELIVER IN PERSON 382437327 749621.3410196826 14994611 NONE 382512680 750010.1210143827 15000562","title":"4\u3001TopN queries"},{"location":"datasources/elasticsearch/","text":"Elasticsearch\u662f\u4e00\u4e2a\u9ad8\u5ea6\u53ef\u6269\u5c55\u7684\u5f00\u6e90\u5168\u6587\u641c\u7d22\u548c\u5206\u6790\u5f15\u64ce\u3002\u5b83\u5141\u8bb8\u60a8\u5feb\u901f\uff0c\u8fd1\u5b9e\u65f6\u5730\u5b58\u50a8\uff0c\u641c\u7d22\u548c\u5206\u6790\u5927\u91cf\u6570\u636e\u3002Elasticsearch\u662fXSQL\u652f\u6301\u7684\u7b2c\u4e8c\u4e2a\u6570\u636e\u6e90\u3002\u672c\u8282\u5c06\u5bf9Elasticsearch\u63a5\u5165XSQL\u7684\u5b89\u88c5\u3001\u914d\u7f6e\u3001\u8fd0\u884c\u4f5c\u7b80\u5355\u7684\u4ecb\u7ecd\u3002 Installation \u200b \u7531\u4e8eElasticsearch\u63d0\u4f9b\u4e86REST API\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u4efb\u4f55\u5b89\u88c5\u3002\u5bf9\u4e8e\u60f3\u8981\u4e86\u89e3Elasticsearch\u7684\u7528\u6237\u8bf7\u67e5\u9605 Elasticsearch\u5b98\u65b9\u6587\u6863 \u3002 Configuration \u200b Elasticsearch\u63a5\u5165XSQL\u7684\u914d\u7f6e\u7ee7\u627f\u4e86 Configurations \u4e2d\u4ecb\u7ecd\u7684\u901a\u7528\u914d\u7f6e\u3002Elasticsearch\u63a5\u5165XSQL\u8fd8\u6709\u4e00\u4e9b\u7279\u6709\u7684\u914d\u7f6e\uff0c\u4e0b\u8868\u5c06\u5bf9\u4ed6\u4eec\u8fdb\u884c\u4ecb\u7ecd\u3002 Property Name Default Meaning spark.xsql.datasource.$dataSource.es.mapping.date.rich true \u662f\u5426\u542f\u7528date\u81ea\u52a8\u8f6c\u6362\uff0c\u5176\u5b9e\u9645\u5f71\u54cd\u7684\u662fElasticsearch\u7684es.mapping.date.rich\u914d\u7f6e\u3002\u5728\u5904\u7406\u65e5\u671f\u65f6\uff0cElasticsearch\u59cb\u7ec8\u4f7f\u7528ISO 8601\u683c\u5f0f\u4f5c\u4e3a\u65e5\u671f/\u65f6\u95f4\u3002\u5982\u679c\u9700\u8981\u81ea\u5b9a\u4e49\u65e5\u671f\u683c\u5f0f\uff0c\u8bf7\u5c06\u5176\u6dfb\u52a0\u5230\u9ed8\u8ba4\u9009\u9879\uff0c\u800c\u4e0d\u662f\u66ff\u6362\u5b83\u3002 \u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 Elasticsearch\u53c2\u8003\u6587\u6863\u4e2d\u7684/mapping-date-format.html \u90e8\u5206 \u3002 \u8bf7\u6ce8\u610f\uff0c\u5728\u8bfb\u53d6\u6570\u636e\u65f6\uff0c\u5982\u679c\u65e5\u671f\u4e0d\u662fISO8601\u683c\u5f0f\uff0c\u5219\u9ed8\u8ba4\u60c5\u51b5\u4e0bXSQL\u53ef\u80fd\u65e0\u6cd5\u7406\u89e3\uff0c\u56e0\u4e3a\u5b83\u4e0d\u4f1a\u590d\u5236Elasticsearch\u4e2d\u7cbe\u5fc3\u8bbe\u7f6e\u7684\u65e5\u671f\u89e3\u6790\u3002 \u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u901a\u8fc7es.mapping.date.rich\u5c5e\u6027\u7b80\u5355\u5730\u7981\u7528\u65e5\u671f\u8f6c\u6362\u5e76\u5c06\u539f\u59cb\u4fe1\u606f\u4f5c\u4e3along\u6216String\u4f20\u9012\u3002 spark.xsql.datasource.$dataSource.es.scroll.keepalive 5m \u67e5\u8be2\u4e4b\u95f4\u7684scroll\u7ed3\u679c\u7684\u6700\u5927\u5468\u671f\u3002\u76ee\u524d\u4ec5\u5728\u5173\u95ed\u4e0b\u63a8\u65f6\u6709\u6548\u3002\u8bf7\u53c2\u9605https://www.elastic.co/guide/en/elasticsearch/hadoop/5.2/configuration.html\u4e2d\u5bf9es.scroll.keepalive\u7684\u8be6\u7ec6\u4ecb\u7ecd\u3002 spark.xsql.datasource.$dataSource.es.scroll.size 50 \u5355\u4e2a\u8bf7\u6c42\u8fd4\u56de\u7684\u6761\u76ee\uff08\u7ed3\u679c\uff09\u6570\u3002\u76ee\u524d\u4ec5\u5728\u5173\u95ed\u4e0b\u63a8\u65f6\u6709\u6548\u3002\u8bf7\u53c2\u9605https://www.elastic.co/guide/en/elasticsearch/hadoop/5.2/configuration.html\u4e2d\u5bf9es.scroll.size\u7684\u8be6\u7ec6\u4ecb\u7ecd\u3002 spark.xsql.datasource.$dataSource.es.scroll.limit 20 \u5355\u4e2ascroll\u6240\u8fd4\u56de\u7684\u6761\u76ee\uff08\u7ed3\u679c\uff09\u603b\u6570\u3002\u76ee\u524d\u4ec5\u5728\u5173\u95ed\u4e0b\u63a8\u65f6\u6709\u6548\u3002\u8d1f\u6570\u4ee3\u8868\u8fd4\u56de\u6240\u6709\u5339\u914d\u7684\u6587\u6863\u3002\u8bf7\u53c2\u9605https://www.elastic.co/guide/en/elasticsearch/hadoop/5.2/configuration.html\u4e2d\u5bf9es.scroll.limit\u7684\u8be6\u7ec6\u4ecb\u7ecd\u3002 spark.xsql.datasource.$dataSource.es.field.read.empty.as.null yes \u662f\u5426\u5c06\u7a7afield\u4f5c\u4e3anull\u3002\u76ee\u524d\u4ec5\u5728\u5173\u95ed\u4e0b\u63a8\u65f6\u6709\u6548\u3002\u8bf7\u53c2\u9605https://www.elastic.co/guide/en/elasticsearch/hadoop/5.2/configuration.html\u4e2d\u5bf9es.field.read.empty.as.null\u7684\u8be6\u7ec6\u4ecb\u7ecd\u3002 spark.xsql.datasource.$dataSource.discover None \u662f\u5426\u542f\u7528\u5e76\u914d\u7f6e\u6570\u636e\u6e90\u7684\u7c7b\u578b\u63a8\u65ad\u3002\u5b9e\u9645\u4f1a\u5f71\u54cdElasticsearch\u7684es.read.field.as.array.include\u914d\u7f6e\u3002Elasticsearch\u4e2d\u7684\u5b57\u6bb5\uff08\u4e5f\u53ef\u79f0\u4e3a\u5c5e\u6027\uff09\u9ed8\u8ba4\u90fd\u662f\u53ef\u4ee5\u5b58\u50a8Array\u7684\u3002XSQL\u6ca1\u6709\u529e\u6cd5\u51c6\u786e\u83b7\u5f97\u4e00\u4e2a\u5b57\u6bb5\u662f\u5b83\u7684\u5b9a\u4e49\u7c7b\u578b\uff0c\u8fd8\u662f\u6570\u7ec4\u7c7b\u578b\u3002\u6b64\u914d\u7f6e\u7528\u4e8e\u544a\u8bc9XSQL\uff0c\u54ea\u4e9b\u5b57\u6bb5\u9700\u8981\u8fdb\u884c\u7c7b\u578b\u63a8\u65ad\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605https://www.elastic.co/guide/en/elasticsearch/hadoop/5.2/configuration.html\u4e2d\u5bf9es.read.field.as.array.include\u7684\u8be6\u7ec6\u4ecb\u7ecd\u3002 \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2aElasticsearch\u63a5\u5165XSQL\u7684\u914d\u7f6e\u793a\u4f8b\uff1a spark.xsql.datasources default spark.xsql.datasource.default.type elasticsearch spark.xsql.datasource.default.url http://127.0.0.1:9025 spark.xsql.datasource.default.user test spark.xsql.datasource.default.password test spark.xsql.datasource.default.version 5.2 spark.xsql.datasource.default.whitelist es-whitelist.conf Concept Mapping \u200b Elasticsearch\u76f8\u6bd4\u4e8e\u4f20\u7edf\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff0c\u5728\u5e95\u5c42\u8bbe\u8ba1\u4e0a\u6709\u8bf8\u591a\u4e0d\u540c\u3002\u6bd4\u5982\uff1aElasticsearch\u4e2d\u662f\u6ca1\u6709table\u7684\u3002\u90a3\u4e48\u7528\u6237\u4f1a\u5728XSQL\u4e2d\u770b\u5230table\u65f6\uff0c\u9020\u6210\u4e00\u4e9b\u56f0\u60d1\u3002\u4e0b\u8868\u5bf9Elasticsearch\u4e0e\u5173\u7cfb\u578b\u6570\u636e\u5e93\u5728XSQL\u4e2d\u7684\u6620\u5c04\u5173\u7cfb\u9010\u4e00\u8bf4\u660e\u3002 Elasticsearch\u6982\u5ff5 \u5173\u7cfb\u6570\u636e\u5e93\u6982\u5ff5 \u7d22\u5f15\uff08\u5373Index\uff09 \u6570\u636e\u5e93\u5b9e\u4f8b \u7c7b\u578b\uff08\u5373Type\uff09 \u8868 \u6587\u6863\uff08\u5373Document\uff09 \u884c Schema Discover \u200b Elasticsearch\u4e2d\u7684\u5b57\u6bb5\uff08\u4e5f\u53ef\u79f0\u4e3a\u5c5e\u6027\uff09\u9ed8\u8ba4\u90fd\u662f\u53ef\u4ee5\u5b58\u50a8Array\u7684\uff0c\u8fd9\u4f7f\u5f97XSQL\u6ca1\u6709\u529e\u6cd5\u51c6\u786e\u83b7\u5f97\u4e00\u4e2a\u5b57\u6bb5\u662f\u5b83\u7684\u5b9a\u4e49\u7c7b\u578b\uff0c\u8fd8\u662f\u6570\u7ec4\u7c7b\u578b\u3002\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9bJson\u683c\u5f0f\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u5e76\u901a\u8fc7spark.xsql.datasource.$dataSource.discover\u5c5e\u6027\u6765\u6307\u5b9a\u8def\u5f84\u3002\u8fd9\u91cc\u7ed9\u51faDiscover\u6587\u4ef6\u7684\u683c\u5f0f\u5b9a\u4e49\u793a\u4f8b\uff1a { es_index_example_one : { es_type_example_one : field_A.property_A_0,field_B.property_B_0 , es_type_example_two : field_C.property_C_0,field_D , }, es_index_example_two : { es_type_example_thr : field_E.property_E_0,field_F.property_F_0 } } \u53ef\u4ee5\u770b\u51fa\u6bcf\u4e2aType\u7684\u5404\u4e2a\u9700\u8981\u63a2\u6d4b\u7684\u5b57\u6bb5\u4e4b\u95f4\u7528\u82f1\u6587\u9017\u53f7\u5206\u9694\u3002 Limit with Group By XSQL\u5728 \u4e0b\u63a8\u6a21\u5f0f \u4e2d\u5b9e\u73b0group by\u65f6\uff0c\u501f\u52a9\u4e86Elasticsearch\u7684 Aggregations \u3002 Aggregations \u662f\u53ef\u4ee5\u5d4c\u5957\u7684\uff0c\u901a\u8fc7\u7ed9size\u6dfb\u52a0size\u5c5e\u6027\u53ea\u80fd\u63a7\u5236\u5c40\u90e8\u7684\u7ed3\u679c\u9650\u5236\u3002\u8fd9\u79cd\u65b9\u5f0f\u65e0\u6cd5\u5b9e\u73b0\u5168\u5c40\u7684\u7ed3\u679c\u9650\u5236\uff0c\u56e0\u6b64XSQL\u5c06\u5ffd\u7565group by\u8bed\u53e5\u540e\u8ddf\u968f\u7684limit\u9650\u5236\uff0c\u67e5\u8be2\u7684\u7ed3\u679c\u6570\u76ee\u53ef\u80fd\u8ddf\u4f60\u7684\u9884\u671f\u6709\u4e9b\u4e0d\u540c\u3002\u5982\u679c\u4f60\u771f\u7684\u60f3\u8981group by\u540e\u7684limit\u4f9d\u7136\u8d77\u4f5c\u7528\uff0c\u53ef\u4ee5\u5173\u95ed\u4e0b\u63a8\u6a21\u5f0f\u3002 Execution \u200b Elasticsearch\u63a5\u5165XSQL\u652f\u6301 Common Commands \u4e2d\u4ecb\u7ecd\u7684\u901a\u7528\u539f\u5219\u3002Elasticsearch\u63a5\u5165XSQL\u540e\uff0cXSQL\u4f1a\u628aSQL\u8f6c\u6362\u4e3aElasticsearch\u7684REST API\u3002XSQL\u652f\u6301\u5927\u591a\u6570\u7684Elasticsearch\u529f\u80fd\u3002\u672c\u8282\u5c06XSQL\u7684SQL\u4e3a\u4f8b\uff0c\u6765\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528XSQL\u67e5\u8be2Elasticsearch\u3002 Create Elasticsearch Type \u521b\u5efaElasticsearch\u7684type\uff0c\u4e0e\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff08\u4f8b\u5982MySQL\u3001Oracle\u7b49\uff09\u521b\u5efa\u8868\u7684\u65b9\u5f0f\u6709\u5f88\u591a\u4e0d\u540c\u4e4b\u5904\u3002\u4f8b\u5982\uff1a create table test ( key keyword, value text, other String ) using org.elasticsearch.spark.sql \u4e0a\u9762using\u7684\u542b\u4e49\u662f\u521b\u5efaElasticsearch\u4e2d\u7684type\u3002\u4e0d\u8fc7\uff0c\u8fd9\u79cd\u7528\u6cd5\u4e5f\u8bb8\u4f1a\u8ba9\u4eba\u89c9\u5f97\u7e41\u7410\uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5\u7528\u4e0b\u9762\u7684SQL\uff1a create table test ( key keyword, value text, other String ) using es","title":"Elasticsearch"},{"location":"datasources/elasticsearch/#installation","text":"\u200b \u7531\u4e8eElasticsearch\u63d0\u4f9b\u4e86REST API\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u4efb\u4f55\u5b89\u88c5\u3002\u5bf9\u4e8e\u60f3\u8981\u4e86\u89e3Elasticsearch\u7684\u7528\u6237\u8bf7\u67e5\u9605 Elasticsearch\u5b98\u65b9\u6587\u6863 \u3002","title":"Installation"},{"location":"datasources/elasticsearch/#configuration","text":"\u200b Elasticsearch\u63a5\u5165XSQL\u7684\u914d\u7f6e\u7ee7\u627f\u4e86 Configurations \u4e2d\u4ecb\u7ecd\u7684\u901a\u7528\u914d\u7f6e\u3002Elasticsearch\u63a5\u5165XSQL\u8fd8\u6709\u4e00\u4e9b\u7279\u6709\u7684\u914d\u7f6e\uff0c\u4e0b\u8868\u5c06\u5bf9\u4ed6\u4eec\u8fdb\u884c\u4ecb\u7ecd\u3002 Property Name Default Meaning spark.xsql.datasource.$dataSource.es.mapping.date.rich true \u662f\u5426\u542f\u7528date\u81ea\u52a8\u8f6c\u6362\uff0c\u5176\u5b9e\u9645\u5f71\u54cd\u7684\u662fElasticsearch\u7684es.mapping.date.rich\u914d\u7f6e\u3002\u5728\u5904\u7406\u65e5\u671f\u65f6\uff0cElasticsearch\u59cb\u7ec8\u4f7f\u7528ISO 8601\u683c\u5f0f\u4f5c\u4e3a\u65e5\u671f/\u65f6\u95f4\u3002\u5982\u679c\u9700\u8981\u81ea\u5b9a\u4e49\u65e5\u671f\u683c\u5f0f\uff0c\u8bf7\u5c06\u5176\u6dfb\u52a0\u5230\u9ed8\u8ba4\u9009\u9879\uff0c\u800c\u4e0d\u662f\u66ff\u6362\u5b83\u3002 \u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 Elasticsearch\u53c2\u8003\u6587\u6863\u4e2d\u7684/mapping-date-format.html \u90e8\u5206 \u3002 \u8bf7\u6ce8\u610f\uff0c\u5728\u8bfb\u53d6\u6570\u636e\u65f6\uff0c\u5982\u679c\u65e5\u671f\u4e0d\u662fISO8601\u683c\u5f0f\uff0c\u5219\u9ed8\u8ba4\u60c5\u51b5\u4e0bXSQL\u53ef\u80fd\u65e0\u6cd5\u7406\u89e3\uff0c\u56e0\u4e3a\u5b83\u4e0d\u4f1a\u590d\u5236Elasticsearch\u4e2d\u7cbe\u5fc3\u8bbe\u7f6e\u7684\u65e5\u671f\u89e3\u6790\u3002 \u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u901a\u8fc7es.mapping.date.rich\u5c5e\u6027\u7b80\u5355\u5730\u7981\u7528\u65e5\u671f\u8f6c\u6362\u5e76\u5c06\u539f\u59cb\u4fe1\u606f\u4f5c\u4e3along\u6216String\u4f20\u9012\u3002 spark.xsql.datasource.$dataSource.es.scroll.keepalive 5m \u67e5\u8be2\u4e4b\u95f4\u7684scroll\u7ed3\u679c\u7684\u6700\u5927\u5468\u671f\u3002\u76ee\u524d\u4ec5\u5728\u5173\u95ed\u4e0b\u63a8\u65f6\u6709\u6548\u3002\u8bf7\u53c2\u9605https://www.elastic.co/guide/en/elasticsearch/hadoop/5.2/configuration.html\u4e2d\u5bf9es.scroll.keepalive\u7684\u8be6\u7ec6\u4ecb\u7ecd\u3002 spark.xsql.datasource.$dataSource.es.scroll.size 50 \u5355\u4e2a\u8bf7\u6c42\u8fd4\u56de\u7684\u6761\u76ee\uff08\u7ed3\u679c\uff09\u6570\u3002\u76ee\u524d\u4ec5\u5728\u5173\u95ed\u4e0b\u63a8\u65f6\u6709\u6548\u3002\u8bf7\u53c2\u9605https://www.elastic.co/guide/en/elasticsearch/hadoop/5.2/configuration.html\u4e2d\u5bf9es.scroll.size\u7684\u8be6\u7ec6\u4ecb\u7ecd\u3002 spark.xsql.datasource.$dataSource.es.scroll.limit 20 \u5355\u4e2ascroll\u6240\u8fd4\u56de\u7684\u6761\u76ee\uff08\u7ed3\u679c\uff09\u603b\u6570\u3002\u76ee\u524d\u4ec5\u5728\u5173\u95ed\u4e0b\u63a8\u65f6\u6709\u6548\u3002\u8d1f\u6570\u4ee3\u8868\u8fd4\u56de\u6240\u6709\u5339\u914d\u7684\u6587\u6863\u3002\u8bf7\u53c2\u9605https://www.elastic.co/guide/en/elasticsearch/hadoop/5.2/configuration.html\u4e2d\u5bf9es.scroll.limit\u7684\u8be6\u7ec6\u4ecb\u7ecd\u3002 spark.xsql.datasource.$dataSource.es.field.read.empty.as.null yes \u662f\u5426\u5c06\u7a7afield\u4f5c\u4e3anull\u3002\u76ee\u524d\u4ec5\u5728\u5173\u95ed\u4e0b\u63a8\u65f6\u6709\u6548\u3002\u8bf7\u53c2\u9605https://www.elastic.co/guide/en/elasticsearch/hadoop/5.2/configuration.html\u4e2d\u5bf9es.field.read.empty.as.null\u7684\u8be6\u7ec6\u4ecb\u7ecd\u3002 spark.xsql.datasource.$dataSource.discover None \u662f\u5426\u542f\u7528\u5e76\u914d\u7f6e\u6570\u636e\u6e90\u7684\u7c7b\u578b\u63a8\u65ad\u3002\u5b9e\u9645\u4f1a\u5f71\u54cdElasticsearch\u7684es.read.field.as.array.include\u914d\u7f6e\u3002Elasticsearch\u4e2d\u7684\u5b57\u6bb5\uff08\u4e5f\u53ef\u79f0\u4e3a\u5c5e\u6027\uff09\u9ed8\u8ba4\u90fd\u662f\u53ef\u4ee5\u5b58\u50a8Array\u7684\u3002XSQL\u6ca1\u6709\u529e\u6cd5\u51c6\u786e\u83b7\u5f97\u4e00\u4e2a\u5b57\u6bb5\u662f\u5b83\u7684\u5b9a\u4e49\u7c7b\u578b\uff0c\u8fd8\u662f\u6570\u7ec4\u7c7b\u578b\u3002\u6b64\u914d\u7f6e\u7528\u4e8e\u544a\u8bc9XSQL\uff0c\u54ea\u4e9b\u5b57\u6bb5\u9700\u8981\u8fdb\u884c\u7c7b\u578b\u63a8\u65ad\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605https://www.elastic.co/guide/en/elasticsearch/hadoop/5.2/configuration.html\u4e2d\u5bf9es.read.field.as.array.include\u7684\u8be6\u7ec6\u4ecb\u7ecd\u3002 \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2aElasticsearch\u63a5\u5165XSQL\u7684\u914d\u7f6e\u793a\u4f8b\uff1a spark.xsql.datasources default spark.xsql.datasource.default.type elasticsearch spark.xsql.datasource.default.url http://127.0.0.1:9025 spark.xsql.datasource.default.user test spark.xsql.datasource.default.password test spark.xsql.datasource.default.version 5.2 spark.xsql.datasource.default.whitelist es-whitelist.conf","title":"Configuration"},{"location":"datasources/elasticsearch/#concept-mapping","text":"\u200b Elasticsearch\u76f8\u6bd4\u4e8e\u4f20\u7edf\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff0c\u5728\u5e95\u5c42\u8bbe\u8ba1\u4e0a\u6709\u8bf8\u591a\u4e0d\u540c\u3002\u6bd4\u5982\uff1aElasticsearch\u4e2d\u662f\u6ca1\u6709table\u7684\u3002\u90a3\u4e48\u7528\u6237\u4f1a\u5728XSQL\u4e2d\u770b\u5230table\u65f6\uff0c\u9020\u6210\u4e00\u4e9b\u56f0\u60d1\u3002\u4e0b\u8868\u5bf9Elasticsearch\u4e0e\u5173\u7cfb\u578b\u6570\u636e\u5e93\u5728XSQL\u4e2d\u7684\u6620\u5c04\u5173\u7cfb\u9010\u4e00\u8bf4\u660e\u3002 Elasticsearch\u6982\u5ff5 \u5173\u7cfb\u6570\u636e\u5e93\u6982\u5ff5 \u7d22\u5f15\uff08\u5373Index\uff09 \u6570\u636e\u5e93\u5b9e\u4f8b \u7c7b\u578b\uff08\u5373Type\uff09 \u8868 \u6587\u6863\uff08\u5373Document\uff09 \u884c","title":"Concept Mapping"},{"location":"datasources/elasticsearch/#schema-discover","text":"\u200b Elasticsearch\u4e2d\u7684\u5b57\u6bb5\uff08\u4e5f\u53ef\u79f0\u4e3a\u5c5e\u6027\uff09\u9ed8\u8ba4\u90fd\u662f\u53ef\u4ee5\u5b58\u50a8Array\u7684\uff0c\u8fd9\u4f7f\u5f97XSQL\u6ca1\u6709\u529e\u6cd5\u51c6\u786e\u83b7\u5f97\u4e00\u4e2a\u5b57\u6bb5\u662f\u5b83\u7684\u5b9a\u4e49\u7c7b\u578b\uff0c\u8fd8\u662f\u6570\u7ec4\u7c7b\u578b\u3002\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9bJson\u683c\u5f0f\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u5e76\u901a\u8fc7spark.xsql.datasource.$dataSource.discover\u5c5e\u6027\u6765\u6307\u5b9a\u8def\u5f84\u3002\u8fd9\u91cc\u7ed9\u51faDiscover\u6587\u4ef6\u7684\u683c\u5f0f\u5b9a\u4e49\u793a\u4f8b\uff1a { es_index_example_one : { es_type_example_one : field_A.property_A_0,field_B.property_B_0 , es_type_example_two : field_C.property_C_0,field_D , }, es_index_example_two : { es_type_example_thr : field_E.property_E_0,field_F.property_F_0 } } \u53ef\u4ee5\u770b\u51fa\u6bcf\u4e2aType\u7684\u5404\u4e2a\u9700\u8981\u63a2\u6d4b\u7684\u5b57\u6bb5\u4e4b\u95f4\u7528\u82f1\u6587\u9017\u53f7\u5206\u9694\u3002","title":"Schema Discover"},{"location":"datasources/elasticsearch/#limit-with-group-by","text":"XSQL\u5728 \u4e0b\u63a8\u6a21\u5f0f \u4e2d\u5b9e\u73b0group by\u65f6\uff0c\u501f\u52a9\u4e86Elasticsearch\u7684 Aggregations \u3002 Aggregations \u662f\u53ef\u4ee5\u5d4c\u5957\u7684\uff0c\u901a\u8fc7\u7ed9size\u6dfb\u52a0size\u5c5e\u6027\u53ea\u80fd\u63a7\u5236\u5c40\u90e8\u7684\u7ed3\u679c\u9650\u5236\u3002\u8fd9\u79cd\u65b9\u5f0f\u65e0\u6cd5\u5b9e\u73b0\u5168\u5c40\u7684\u7ed3\u679c\u9650\u5236\uff0c\u56e0\u6b64XSQL\u5c06\u5ffd\u7565group by\u8bed\u53e5\u540e\u8ddf\u968f\u7684limit\u9650\u5236\uff0c\u67e5\u8be2\u7684\u7ed3\u679c\u6570\u76ee\u53ef\u80fd\u8ddf\u4f60\u7684\u9884\u671f\u6709\u4e9b\u4e0d\u540c\u3002\u5982\u679c\u4f60\u771f\u7684\u60f3\u8981group by\u540e\u7684limit\u4f9d\u7136\u8d77\u4f5c\u7528\uff0c\u53ef\u4ee5\u5173\u95ed\u4e0b\u63a8\u6a21\u5f0f\u3002","title":"Limit with Group By"},{"location":"datasources/elasticsearch/#execution","text":"\u200b Elasticsearch\u63a5\u5165XSQL\u652f\u6301 Common Commands \u4e2d\u4ecb\u7ecd\u7684\u901a\u7528\u539f\u5219\u3002Elasticsearch\u63a5\u5165XSQL\u540e\uff0cXSQL\u4f1a\u628aSQL\u8f6c\u6362\u4e3aElasticsearch\u7684REST API\u3002XSQL\u652f\u6301\u5927\u591a\u6570\u7684Elasticsearch\u529f\u80fd\u3002\u672c\u8282\u5c06XSQL\u7684SQL\u4e3a\u4f8b\uff0c\u6765\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528XSQL\u67e5\u8be2Elasticsearch\u3002 Create Elasticsearch Type \u521b\u5efaElasticsearch\u7684type\uff0c\u4e0e\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff08\u4f8b\u5982MySQL\u3001Oracle\u7b49\uff09\u521b\u5efa\u8868\u7684\u65b9\u5f0f\u6709\u5f88\u591a\u4e0d\u540c\u4e4b\u5904\u3002\u4f8b\u5982\uff1a create table test ( key keyword, value text, other String ) using org.elasticsearch.spark.sql \u4e0a\u9762using\u7684\u542b\u4e49\u662f\u521b\u5efaElasticsearch\u4e2d\u7684type\u3002\u4e0d\u8fc7\uff0c\u8fd9\u79cd\u7528\u6cd5\u4e5f\u8bb8\u4f1a\u8ba9\u4eba\u89c9\u5f97\u7e41\u7410\uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5\u7528\u4e0b\u9762\u7684SQL\uff1a create table test ( key keyword, value text, other String ) using es","title":"Execution"},{"location":"datasources/hbase/","text":"HBase\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u7684\u3001\u9762\u5411\u5217\u7684\u5f00\u6e90\u6570\u636e\u5e93\uff0c\u65e8\u5728\u4e3a\u975e\u7ed3\u6784\u5316\u6570\u636e\u63d0\u4f9b\u6d77\u91cf\u5b58\u50a8\u7a7a\u95f4\uff0c\u540c\u65f6\u63d0\u4f9b\u7d22\u5f15\u67e5\u8be2\u3002 Installation \u200b \u7531\u4e8eHBase\u63d0\u4f9b\u4e86Java API\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u4efb\u4f55\u5b89\u88c5\u3002\u5bf9\u4e8e\u60f3\u8981\u4e86\u89e3HBase Java API\u7684\u7528\u6237\u8bf7\u67e5\u9605 \u5b98\u65b9\u6587\u6863 \u3002 Configuration \u200b HBase\u63a5\u5165XSQL\u7684\u914d\u7f6e\u7ee7\u627f\u4e86 Configurations \u4e2d\u9488\u5bf9\u7279\u5b9a\u6570\u636e\u6e90\u7684type\u3001version\u3001pushdown\u3001schemas\u914d\u7f6e\u3002HBase\u63a5\u5165XSQL\u8fd8\u6709\u4e00\u4e9b\u7279\u6709\u7684\u914d\u7f6e\uff0c\u4e0b\u8868\u5c06\u5bf9\u4ed6\u4eec\u8fdb\u884c\u4ecb\u7ecd\u3002 Property Name Default Meaning spark.xsql.datasource.$dataSource.host None \u914d\u7f6ehbase.zookeeper.quorum spark.xsql.datasource.$dataSource.port 2181 \u914d\u7f6ehbase.zookeeper.property.clientPort \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2aHBase\u63a5\u5165XSQL\u7684\u914d\u7f6e\u793a\u4f8b\uff1a spark.xsql.datasources hbase_ds_name spark.xsql.default.datasource hbase_ds_name spark.xsql.datasource.hbase_ds_name.type hbase spark.xsql.datasource.hbase_ds_name.host jlxx.sys.lyct.qihoo.net,jlxx.sys.lyct.qihoo.net,jlxx.sys.lyct.qihoo.net spark.xsql.datasource.hbase_ds_name.port 2181 # \u914d\u7f6e\u5143\u6570\u636e\u5b58\u50a8\u6587\u4ef6\u540d\u79f0\uff0c\u9700\u8981\u653e\u7f6e\u5728SPARK_CONF_DIR\u4e2d spark.xsql.datasource.hbase_ds_name.schemas hbase.schemas # version\u4e3a\u9884\u7559\u914d\u7f6e\uff0c\u76ee\u524d\u53ea\u652f\u6301\u8fde\u63a5HBase 2.0+ spark.xsql.datasource.hbase_ds_name.version 2.0 spark.xsql.datasource.hbase_ds_name.pushdown true Advanced Configuration xsql\u4e3a\u4e86\u8bbf\u95eeHBase\uff0c\u4f7f\u7528\u4e86 shc \u4f5c\u4e3a\u5e95\u5c42\u8fde\u63a5\u5de5\u5177\uff0c\u5ef6\u7528\u4e86shc\u7684\u5143\u6570\u636e\u5b9a\u4e49\u65b9\u5f0f\u3002 HBase\u6982\u5ff5 \u5bf9\u5e94\u7684\u5173\u7cfb\u6570\u636e\u5e93\u6982\u5ff5 \u547d\u540d\u7a7a\u95f4 \u6570\u636e\u5e93\u540d \u8868\u540d \u8868\u540d \u5217\u65cf\u540d:\u5217\u540d \u5217\u540d ROW \u4e3b\u952e \u5217\u5728\u53cd\u5e8f\u5217\u5316\u540e\u7684\u7c7b\u578b \u5b57\u6bb5\u7c7b\u578b Note xsql\u76ee\u524d\u4e0d\u652f\u6301timestamp\u76f8\u5173\u7684\u64cd\u4f5c\uff0c\u5982\u6709\u9700\u8981\uff0c\u8bf7\u8054\u7cfb\u5f00\u53d1\u4eba\u5458\u3002 \u4e24\u79cd\u5143\u6570\u636e\u6ce8\u518c\u65b9\u5f0f\uff1a HBase\u81ea\u8eab\u53ea\u7ef4\u62a4\u5217\u65cf\u7ea7\u522b\u7684\u5143\u6570\u636e\uff0c\u7528\u6237\u5728\u4f7f\u7528xsql\u67e5\u8be2HBase\u4e4b\u524d\uff0c\u5fc5\u987b\u663e\u5f0f\u7ed9\u51fa\u6570\u636e\u8868\u7684\u5b8c\u6574\u5143\u6570\u636e\uff0c\u5177\u4f53\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f\uff1a 1. \u76f4\u63a5\u7f16\u8f91schemas\u6587\u4ef6 \u200b xsql\u5ef6\u7528\u4e86shc\u7684\u5143\u6570\u636e\u5b9a\u4e49\u65b9\u6cd5\uff0c\u8be6\u60c5\u8bf7\u53c2\u8003 \u94fe\u63a5 \u3002hbase.schemas\u6587\u4ef6\u662f\u591a\u4e2a\u8868\u5143\u6570\u636ejson\u5bf9\u8c61\u6784\u6210\u7684\u6570\u7ec4\uff0c\u5efa\u8bae\u5728\u7f16\u8f91schemas\u6587\u4ef6\u65f6\u4f7f\u7528 JSON\u7f16\u8f91\u5668 \u907f\u514d\u4f4e\u7ea7\u9519\u8bef\u3002 Examples [ { table : { namespace : default , name : HBaseSourceExampleTable }, rowkey : key , columns : { col0 : { cf : rowkey , col : key , type : string }, col1 : { cf : cf1 , col : col1 , type : boolean } } }, { another table :{ } } ] Note \u4e0a\u4f8b\u4e2d\u7684 \"rowkey\": \"key\" \uff0c\u5176\u4e2d \"key\" \u53ef\u4ee5\u662f\u4efb\u610f\u5b57\u7b26\u4e32\uff0c\u4e0e columns \u4e2d\u7684 col0 \u7684 col \u4fdd\u6301\u5f15\u7528\u4e00\u81f4\u5373\u53ef\u3002 Note \u5173\u4e8eshc\u5143\u6570\u636e\u7684\u9ad8\u7ea7\u7528\u6cd5\uff0c\u5982\u590d\u5408\u4e3b\u952e\uff0cAvro\u6570\u636e\u7c7b\u578b\uff0c\u7531\u4e8e\u6d4b\u8bd5\u4e0d\u7a33\u5b9a\uff0c\u4e0d\u5efa\u8bae\u8fdb\u884c\u5c1d\u8bd5\u3002\u5982\u6709\u9700\u8981\uff0c\u8bf7\u8054\u7cfb\u5f00\u53d1\u4eba\u5458\u3002 2. create [if not exists] table Examples CREATE IF NOT EXISTS TABLE HBaseSourceExampleTable ( `col0` string PRIMARY KEY, `col1` boolean ) using hbase options (col1='cf1:col1') tblproperties (write_schemas = true) Note create if not exists table \u5728\u8868\u672a\u6ce8\u518c\u4f46\u5df2\u5b58\u5728\u65f6\uff0c\u53ef\u4ee5\u5b9e\u73b0\u5143\u6570\u636e\u6ce8\u518c create table \u5728\u8868\u4e0d\u5b58\u5728\u65f6\uff0c\u4f1a\u521b\u5efa\u8868\u4e14\u6ce8\u518c\u5b83\uff0c\u4f46\u4e0d\u63a8\u8350\u4f7f\u7528\u3002\u539f\u56e0\u662f\uff1a xsql\u76ee\u524d\u8fd8\u4e0d\u652f\u6301\u6279\u91cf\u5199\u5165hbase\uff0c\u7528\u6237\u59cb\u7ec8\u9700\u8981\u5728\u5176\u4ed6\u573a\u666f\u4e0b\u4ea7\u751f\u5f85\u67e5\u8be2\u6570\u636e\u3002 xsql\u65e0\u6cd5\u63d0\u4f9bHBase\u8868\u7684\u5168\u53c2\u6570\u521b\u5efa\uff0c\u4f7f\u7528\u9ed8\u8ba4\u53c2\u6570\u521b\u5efa\u51fa\u7684\u8868\u5f88\u53ef\u80fd\u5b58\u5728\u6027\u80fd\u95ee\u9898\u3002 Note write_schemas = true \u8868\u793acreate table\u6ce8\u518c\u540e\u7684\u8868\u4f1a\u81ea\u52a8\u4ee5json\u683c\u5f0f\u8ffd\u52a0\u5728schemas\u6587\u4ef6\u672b\u5c3e\u3002\u53e6\u5916\uff0c\u4f7f\u7528drop [if exists] table\u53ef\u4ee5\u540c\u65f6\u5220\u9664\u8be5\u8868\u5728hbase.schemas\u4e2d\u7684\u5143\u6570\u636e\u548cHBase \u6570\u636e\u5e93\u4e2d\u7684\u771f\u5b9e\u6570\u636e\uff0c\u6570\u636e\u65e0\u4ef7\uff0c\u8bf7\u8c28\u614e\u4f7f\u7528\u3002 Execution \u53ef\u4e0b\u63a8\u7684select\u8bed\u53e5 select * \u8fd4\u56de\u6240\u6709\u5b57\u6bb5 Examples select * from geonames limit 3; geoname_id dem population latitude longitude name alternatenames country_code feature_code feature_class admin1_code timezone 10003397 385 0 -17 145 Rifle Creek NULL AU STM H NULL Australia/Brisbane 10004419 300 0 -32 116 Canning Mills NULL AU PPLX P NULL Australia/Perth 10006947 28 737 -32 116 Carabooda NULL AU PPLX P NULL Australia/Perth \u5b9e\u73b0\u65b9\u5f0f \u7b49\u6548\u67e5\u8be2 xsql select * from geonames limit 3; hbase shell scan 'geonames',{LIMIT= 3} hbase java api Scan scan = new Scan(); scan.setLimit(3); select col... \u8fd4\u56de\u9009\u62e9\u5b57\u6bb5 Examples select dem,population from geonames limit 3; dem population 385 0 300 0 28 737 \u5b9e\u73b0\u65b9\u5f0f \u7b49\u6548\u67e5\u8be2 xsql select dem,population from geonames limit 3; hbase shell scan 'geonames',{COLUMNS= ['ct:dem','ct:population'],LIMIT= 10} hbase java api Scan scan = new Scan(); scan.setLimit(3); scan.addColumn(Bytes.toByte(\"ct\"),Bytes.toByte(\"dem\")); scan.addColumn(Bytes.toByte(\"ct\"),Bytes.toByte(\"population\")); select + where \u70b9\u8fc7\u6ee4 = == in not in \u8fd4\u56derowkey\u6216\u5217\u7b49\u4e8e/\u4e0d\u7b49\u4e8e \u67d0\u4e9b\u7279\u5b9a\u503c \u7684\u8bb0\u5f55 Examples select geoname_id,dem,population from geonames where geoname_id = '10003397'; geoname_id dem population 10003397 385 0 select geoname_id,dem,population from geonames where geoname_id == '10003397'; geoname_id dem population 10003397 385 0 select geoname_id,dem,population from geonames where geoname_id '10003397' limit 2; geoname_id dem population 10004419 300 0 10006947 28 737 select geoname_id,dem,population from geonames where geoname_id in ('10003397','10004419'); geoname_id dem population 10003397 385 0 10004419 300 0 select geoname_id,dem,population from geonames where geoname_id not in ('10003397','10004419') limit 2; geoname_id dem population 10006947 28 737 10035407 37 6354 select geoname_id,name,latitude from geonames where latitude = '40' limit 2; geoname_id name latitude 10055326 Porto Eda 40 10063141 Royal Tulip Grand 40 select geoname_id,name,latitude from geonames where latitude '40' limit 2; geoname_id name latitude 10003397 Rifle Creek -17 10004419 Canning Mills -32 \u5b9e\u73b0\u65b9\u5f0f \u7b49\u6548\u67e5\u8be2 xsql select geoname_id,dem,population from geonames where geoname_id = '10003397'; hbase shell get 'geonames','10003397',{COLUMNS= ['ct:dem','ct:population']} hbase java api Get get = new Get(Bytes.toBytes(\"10003397\")); get.addColumn(Bytes.toByte(\"ct\"),Bytes.toByte(\"name\")); get.addColumn(Bytes.toByte(\"ct\"),Bytes.toByte(\"name\")); \u5b9e\u73b0\u65b9\u5f0f \u7b49\u6548\u67e5\u8be2 xsql select geoname_id,name,latitude from geonames where latitude = '40' limit 2; hbase shell scan 'geonames',{LIMIT= 2,FILTER= \"SingleColumnValueFilter('ct','latitude',=,'binary:40')\"} hbase java api Scan scan = new Scan(); scan.setLimit(2); scan.addColumn(Bytes.toByte(\"ct\"),Bytes.toByte(\"name\")); scan.addColumn(Bytes.toByte(\"ct\"),Bytes.toByte(\"latitude\")); scan.setFilter(new SingleColumnValueFilter(Bytes.toBytes(\"ct\"),Bytes.toBytes(\"latitude\"), CompareOperator,EQUAL,new BinaryComparator(Bytes.toBytes(\"40\"))); \u8303\u56f4\u8fc7\u6ee4 = = ! ! between and \u8fd4\u56derowkey\u6216\u5217 \u4ecb\u4e8e \u7279\u5b9a\u8303\u56f4 \u7684\u8bb0\u5f55 Note between and \u76f8\u5f53\u4e8e = and = xsql\u5728\u5bf9\u6709\u7b26\u53f7\u6570\u7c7b\u578b\u5b57\u6bb5\u8fdb\u884c\u6bd4\u8f83\u65f6\uff0c\u4f1a\u81ea\u52a8\u6839\u636e\u7b26\u53f7\u4f4d\u662f\u5426\u4e3a1\uff0c\u5207\u5272\u6bd4\u8f83\u8303\u56f4 Examples select geoname_id from geonames where geoname_id between '10003397' and '10009999'; geoname_id 10003397 10004419 10006947 select dem from geonames where dem = 1000 and dem 990 limit 3; dem 993 993 1000 select dem from geonames where dem 1000 and dem 990 limit 3; dem 993 993 993 \u5b9e\u73b0\u65b9\u5f0f \u7b49\u6548\u67e5\u8be2 xsql select geoname_id from geonames where geoname_id between '10003397' and '10009999'; hbase shell scan 'geonames',{STARTROW= '10003397',STOPROW= '10009999'} hbase java api Scan scan = new Scan(); scan.withStartRow('10003397',true).withStopRow('10009999',true); \u6a21\u7cca\u8fc7\u6ee4 like not like \u8fd4\u56derowkey\u6216\u5217\u5339\u914d/\u4e0d\u5339\u914d \u67d0\u4e9b\u6a21\u5f0f \u7684\u8bb0\u5f55 Note \u76ee\u524d\u4ec5\u652f\u6301\u4e24\u4e2a\u901a\u914d\u7b26\uff1a \u4efb\u610f\u5355\u4e2a\u5b57\u7b26 \u4efb\u610f\u591a\u4e2a\u5b57\u7b26 _ % \u4ec5\u652f\u6301\u56db\u79cd\u6a21\u5f0f\uff1a startsWith endsWith startsAndEndsWith contains ([^_%]+)% %([^_%]+) ([^_%]+)%([^_%]+) %([^_%]+)% Examples select geoname_id from geonames where geoname_id like '111101%' limit 2; geoname_id 11110100 11110101 select name from geonames where name like 'Ca%' limit 2; name Canning Mills Carabooda \u5b9e\u73b0\u65b9\u5f0f \u7b49\u6548\u67e5\u8be2 xsql select geoname_id from geonames where geoname_id like '111101%' limit 2; hbase shell scan 'geonames',{ROWPREFIXFILTER= '111101',LIMIT= 2} hbase java api Scan scan = new Scan(); scan.setLimit(2); scan.setFilter(new PrefixFilter(Bytes.toBytes(\"111101\")); \u5b9e\u73b0\u65b9\u5f0f \u7b49\u6548\u67e5\u8be2 xsql select name from geonames where name like 'Ca%' limit 2; hbase shell scan 'geonames',{LIMIT= 2,FILTER= \"SingleColumnValueFilter('ct','name',=,'binaryprefix:Ca')\"} hbase java api Scan scan = new Scan(); scan.setLimit(2); scan.setFilter(new SingleColumnValueFilter(Bytes.toBytes(\"ct\"),Bytes.toBytes(\"name\"), CompareOperator,EQUAL,new BinaryPrefixComparator(Bytes.toBytes(\"Ca\"))); \u7a7a\u503c\u8fc7\u6ee4 is null is not null \u8fd4\u56de\u7279\u5b9a\u5217 \u4e3a\u7a7a/\u4e0d\u4e3a\u7a7a \u7684\u8bb0\u5f55 Note xsql\u5c06\u5217\u4e0d\u5b58\u5728\u3001byte[0]\u5747\u89c6\u4e3a is null \uff0c\u8f83\u4e4bHBase\u7684NullComparator\uff0c\u989d\u5916\u5c06byte[0]\u5224\u5b9a\u4e3a\u7a7a\u503c\uff0c\u539f\u56e0\u662fbyte[0]\u540c\u6837\u65e0\u6cd5\u8fdb\u884c\u540e\u7eed\u8ba1\u7b97\u3002 Examples select name,alternatenames from geonames where alternatenames is null limit 2; name alternatenames Rifle Creek NULL Canning Mills NULL select name,alternatenames from geonames where alternatenames is not null limit 2; name alternatenames Suh\u016bl az\u0327 Z\u0327afrah Suhul az Zafrah,Suh\u016bl az\u0327 Z\u0327afrah M\u00e4hlsack Gendarmen \u5b9e\u73b0\u65b9\u5f0f \u7b49\u6548\u67e5\u8be2 xsql select name,alternatenames from geonames where alternatenames is null; hbase shell scan 'geonames',{FILTER= \"SingleColumnValueFilter('ct','alternatenames',=,'binary:')\"} hbase java api Scan scan = new Scan(); scan.setFilter(new SingleColumnValueFilter(Bytes.toBytes(\"ct\"),Bytes.toBytes(\"alternatenames\"), CompareOperator,EQUAL,new BinaryComparator(Bytes.toBytes(\"\"))); \u5b9e\u73b0\u65b9\u5f0f \u7b49\u6548\u67e5\u8be2 xsql select name,alternatenames from geonames where alternatenames is not null; hbase java api Scan scan = new Scan(); Filter filter = new SingleColumnValueFilter(Bytes.toBytes(\"ct\"),Bytes.toBytes(\"alternatenames\"), CompareOperator,NOT_EQUAL,new BinaryComparator(Bytes.toBytes(\"\"))); filter.setFilterIfMissing(true); scan.setFilter(filter);","title":"HBase"},{"location":"datasources/hbase/#installation","text":"\u200b \u7531\u4e8eHBase\u63d0\u4f9b\u4e86Java API\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u4efb\u4f55\u5b89\u88c5\u3002\u5bf9\u4e8e\u60f3\u8981\u4e86\u89e3HBase Java API\u7684\u7528\u6237\u8bf7\u67e5\u9605 \u5b98\u65b9\u6587\u6863 \u3002","title":"Installation"},{"location":"datasources/hbase/#configuration","text":"\u200b HBase\u63a5\u5165XSQL\u7684\u914d\u7f6e\u7ee7\u627f\u4e86 Configurations \u4e2d\u9488\u5bf9\u7279\u5b9a\u6570\u636e\u6e90\u7684type\u3001version\u3001pushdown\u3001schemas\u914d\u7f6e\u3002HBase\u63a5\u5165XSQL\u8fd8\u6709\u4e00\u4e9b\u7279\u6709\u7684\u914d\u7f6e\uff0c\u4e0b\u8868\u5c06\u5bf9\u4ed6\u4eec\u8fdb\u884c\u4ecb\u7ecd\u3002 Property Name Default Meaning spark.xsql.datasource.$dataSource.host None \u914d\u7f6ehbase.zookeeper.quorum spark.xsql.datasource.$dataSource.port 2181 \u914d\u7f6ehbase.zookeeper.property.clientPort \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2aHBase\u63a5\u5165XSQL\u7684\u914d\u7f6e\u793a\u4f8b\uff1a spark.xsql.datasources hbase_ds_name spark.xsql.default.datasource hbase_ds_name spark.xsql.datasource.hbase_ds_name.type hbase spark.xsql.datasource.hbase_ds_name.host jlxx.sys.lyct.qihoo.net,jlxx.sys.lyct.qihoo.net,jlxx.sys.lyct.qihoo.net spark.xsql.datasource.hbase_ds_name.port 2181 # \u914d\u7f6e\u5143\u6570\u636e\u5b58\u50a8\u6587\u4ef6\u540d\u79f0\uff0c\u9700\u8981\u653e\u7f6e\u5728SPARK_CONF_DIR\u4e2d spark.xsql.datasource.hbase_ds_name.schemas hbase.schemas # version\u4e3a\u9884\u7559\u914d\u7f6e\uff0c\u76ee\u524d\u53ea\u652f\u6301\u8fde\u63a5HBase 2.0+ spark.xsql.datasource.hbase_ds_name.version 2.0 spark.xsql.datasource.hbase_ds_name.pushdown true","title":"Configuration"},{"location":"datasources/hbase/#advanced-configuration","text":"xsql\u4e3a\u4e86\u8bbf\u95eeHBase\uff0c\u4f7f\u7528\u4e86 shc \u4f5c\u4e3a\u5e95\u5c42\u8fde\u63a5\u5de5\u5177\uff0c\u5ef6\u7528\u4e86shc\u7684\u5143\u6570\u636e\u5b9a\u4e49\u65b9\u5f0f\u3002 HBase\u6982\u5ff5 \u5bf9\u5e94\u7684\u5173\u7cfb\u6570\u636e\u5e93\u6982\u5ff5 \u547d\u540d\u7a7a\u95f4 \u6570\u636e\u5e93\u540d \u8868\u540d \u8868\u540d \u5217\u65cf\u540d:\u5217\u540d \u5217\u540d ROW \u4e3b\u952e \u5217\u5728\u53cd\u5e8f\u5217\u5316\u540e\u7684\u7c7b\u578b \u5b57\u6bb5\u7c7b\u578b Note xsql\u76ee\u524d\u4e0d\u652f\u6301timestamp\u76f8\u5173\u7684\u64cd\u4f5c\uff0c\u5982\u6709\u9700\u8981\uff0c\u8bf7\u8054\u7cfb\u5f00\u53d1\u4eba\u5458\u3002","title":"Advanced Configuration"},{"location":"datasources/hbase/#_1","text":"HBase\u81ea\u8eab\u53ea\u7ef4\u62a4\u5217\u65cf\u7ea7\u522b\u7684\u5143\u6570\u636e\uff0c\u7528\u6237\u5728\u4f7f\u7528xsql\u67e5\u8be2HBase\u4e4b\u524d\uff0c\u5fc5\u987b\u663e\u5f0f\u7ed9\u51fa\u6570\u636e\u8868\u7684\u5b8c\u6574\u5143\u6570\u636e\uff0c\u5177\u4f53\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f\uff1a","title":"\u4e24\u79cd\u5143\u6570\u636e\u6ce8\u518c\u65b9\u5f0f\uff1a"},{"location":"datasources/hbase/#1-schemas","text":"\u200b xsql\u5ef6\u7528\u4e86shc\u7684\u5143\u6570\u636e\u5b9a\u4e49\u65b9\u6cd5\uff0c\u8be6\u60c5\u8bf7\u53c2\u8003 \u94fe\u63a5 \u3002hbase.schemas\u6587\u4ef6\u662f\u591a\u4e2a\u8868\u5143\u6570\u636ejson\u5bf9\u8c61\u6784\u6210\u7684\u6570\u7ec4\uff0c\u5efa\u8bae\u5728\u7f16\u8f91schemas\u6587\u4ef6\u65f6\u4f7f\u7528 JSON\u7f16\u8f91\u5668 \u907f\u514d\u4f4e\u7ea7\u9519\u8bef\u3002 Examples [ { table : { namespace : default , name : HBaseSourceExampleTable }, rowkey : key , columns : { col0 : { cf : rowkey , col : key , type : string }, col1 : { cf : cf1 , col : col1 , type : boolean } } }, { another table :{ } } ] Note \u4e0a\u4f8b\u4e2d\u7684 \"rowkey\": \"key\" \uff0c\u5176\u4e2d \"key\" \u53ef\u4ee5\u662f\u4efb\u610f\u5b57\u7b26\u4e32\uff0c\u4e0e columns \u4e2d\u7684 col0 \u7684 col \u4fdd\u6301\u5f15\u7528\u4e00\u81f4\u5373\u53ef\u3002 Note \u5173\u4e8eshc\u5143\u6570\u636e\u7684\u9ad8\u7ea7\u7528\u6cd5\uff0c\u5982\u590d\u5408\u4e3b\u952e\uff0cAvro\u6570\u636e\u7c7b\u578b\uff0c\u7531\u4e8e\u6d4b\u8bd5\u4e0d\u7a33\u5b9a\uff0c\u4e0d\u5efa\u8bae\u8fdb\u884c\u5c1d\u8bd5\u3002\u5982\u6709\u9700\u8981\uff0c\u8bf7\u8054\u7cfb\u5f00\u53d1\u4eba\u5458\u3002","title":"1. \u76f4\u63a5\u7f16\u8f91schemas\u6587\u4ef6"},{"location":"datasources/hbase/#2-create-if-not-exists-table","text":"Examples CREATE IF NOT EXISTS TABLE HBaseSourceExampleTable ( `col0` string PRIMARY KEY, `col1` boolean ) using hbase options (col1='cf1:col1') tblproperties (write_schemas = true) Note create if not exists table \u5728\u8868\u672a\u6ce8\u518c\u4f46\u5df2\u5b58\u5728\u65f6\uff0c\u53ef\u4ee5\u5b9e\u73b0\u5143\u6570\u636e\u6ce8\u518c create table \u5728\u8868\u4e0d\u5b58\u5728\u65f6\uff0c\u4f1a\u521b\u5efa\u8868\u4e14\u6ce8\u518c\u5b83\uff0c\u4f46\u4e0d\u63a8\u8350\u4f7f\u7528\u3002\u539f\u56e0\u662f\uff1a xsql\u76ee\u524d\u8fd8\u4e0d\u652f\u6301\u6279\u91cf\u5199\u5165hbase\uff0c\u7528\u6237\u59cb\u7ec8\u9700\u8981\u5728\u5176\u4ed6\u573a\u666f\u4e0b\u4ea7\u751f\u5f85\u67e5\u8be2\u6570\u636e\u3002 xsql\u65e0\u6cd5\u63d0\u4f9bHBase\u8868\u7684\u5168\u53c2\u6570\u521b\u5efa\uff0c\u4f7f\u7528\u9ed8\u8ba4\u53c2\u6570\u521b\u5efa\u51fa\u7684\u8868\u5f88\u53ef\u80fd\u5b58\u5728\u6027\u80fd\u95ee\u9898\u3002 Note write_schemas = true \u8868\u793acreate table\u6ce8\u518c\u540e\u7684\u8868\u4f1a\u81ea\u52a8\u4ee5json\u683c\u5f0f\u8ffd\u52a0\u5728schemas\u6587\u4ef6\u672b\u5c3e\u3002\u53e6\u5916\uff0c\u4f7f\u7528drop [if exists] table\u53ef\u4ee5\u540c\u65f6\u5220\u9664\u8be5\u8868\u5728hbase.schemas\u4e2d\u7684\u5143\u6570\u636e\u548cHBase \u6570\u636e\u5e93\u4e2d\u7684\u771f\u5b9e\u6570\u636e\uff0c\u6570\u636e\u65e0\u4ef7\uff0c\u8bf7\u8c28\u614e\u4f7f\u7528\u3002","title":"2. create [if not exists] table"},{"location":"datasources/hbase/#execution","text":"","title":"Execution"},{"location":"datasources/hbase/#select","text":"","title":"\u53ef\u4e0b\u63a8\u7684select\u8bed\u53e5"},{"location":"datasources/hive/","text":"\u200b Hive\u662fHadoop\u751f\u6001\u5708\u4e2d\u7684\u4e00\u79cd\u6570\u636e\u4ed3\u5e93\u5de5\u5177\uff0c\u63d0\u4f9b\u4e86\u5c06\u7ed3\u6784\u5316\u6570\u636e\u6620\u5c04\u4e3a\u6570\u636e\u5e93\u53ca\u8868\u7684\u80fd\u529b\uff0c\u5e76\u652f\u6301SQL\u67e5\u8be2\uff0c\u6700\u7ec8\u5c06SQL\u8f6c\u6362\u4e3aMapReduce\u8fdb\u884c\u5e76\u884c\u8ba1\u7b97\u3002Hive\u662fXSQL\u652f\u6301\u7684\u6700\u65e9\u7684\u6570\u636e\u6e90\u3002\u672c\u8282\u5c06\u5bf9Hive\u63a5\u5165XSQL\u7684\u5b89\u88c5\u3001\u914d\u7f6e\u3001\u8fd0\u884c\u4f5c\u7b80\u5355\u7684\u4ecb\u7ecd\u3002 Installation \u200b Hive\u63a5\u5165XSQL\uff0c\u9996\u5148\u9700\u8981\u5728Linux\u73af\u5883\u4e2d\u914d\u7f6e\u597dHive\u4f9d\u8d56\u7684HDFS\u3001Hive Metadata Server\u3002\u8fd9\u4e9b\u5185\u5bb9\u8d85\u51fa\u4e86XSQL\u7684\u8303\u56f4\uff0c\u9700\u8981\u4e86\u89e3\u7684\u7528\u6237\u8bf7\u5206\u522b\u67e5\u9605 HDFS\u5b98\u65b9\u6587\u6863 \u548c Hive\u5b98\u65b9\u6587\u6863 \u3002 Configuration \u200b Hive\u63a5\u5165XSQL\u7684\u914d\u7f6e\u7ee7\u627f\u4e86 Configurations \u4e2d\u4ecb\u7ecd\u7684\u901a\u7528\u914d\u7f6e\uff08 \u6ce8\u610f \uff1aHive\u63a5\u5165XSQL\u4e0d\u652f\u6301\u901a\u7528\u914d\u7f6espark.xsql.datasource.$dataSource.pushdown\uff09\u3002Hive\u63a5\u5165XSQL\u8fd8\u6709\u4e00\u4e9b\u7279\u6709\u7684\u914d\u7f6e\uff0c\u4e0b\u8868\u5c06\u5bf9\u4ed6\u4eec\u8fdb\u884c\u4ecb\u7ecd\u3002 Property Name Default Meaning spark.xsql.datasource.$dataSource.metastore.url None Hive Metadata Server\u7684\u8bbf\u95eeURI \u6b64\u914d\u7f6e\u975e\u5e38\u5173\u952e\uff0cXSQL\u5c06\u901a\u8fc7\u8bbf\u95eeHive Metadata Server\u83b7\u5f97Hive\u7684\u5143\u6570\u636e\u4fe1\u606f\u3002 \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2aHive\u63a5\u5165XSQL\u7684\u914d\u7f6e\u793a\u4f8b\uff1a spark.xsql.datasources default spark.xsql.datasource.default.type hive spark.xsql.datasource.default.metastore.url thrift://127.0.0.1:9083 spark.xsql.datasource.default.user test spark.xsql.datasource.default.password test spark.xsql.datasource.default.version 1.2.1 spark.xsql.datasource.default.whitelist hive-whitelist.conf Execution \u200b Hive\u63a5\u5165XSQL\u652f\u6301 Common Commands \u4e2d\u4ecb\u7ecd\u7684\u901a\u7528\u539f\u5219\u3002Hive\u63a5\u5165XSQL\u5c06\u652f\u6301\u7edd\u5927\u591a\u6570\u7684Hive QL\u8bed\u6cd5\u3002\u672c\u8282\u5c06\u4ee5Hive\u7279\u6709\u7684SQL\u4e3a\u4f8b\uff0c\u6765\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528XSQL\u6267\u884cHive QL\u3002 Create Hive Table \u521b\u5efaHive\u8868\uff0c\u4e0e\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff08\u4f8b\u5982MySQL\u3001Oracle\u7b49\uff09\u521b\u5efa\u8868\u7684\u65b9\u5f0f\u6709\u5f88\u591a\u4e0d\u540c\u4e4b\u5904\u3002\u4f8b\u5982\uff1a create table test ( key String, value String, other String ) ROW FORMAT DELIMITED FIELDS TERMINATED BY '\\t' STORED AS TEXTFILE \u4e0a\u9762\u7684SQL\u4e2d\u9700\u8981\u5b9a\u4e49\u884c\u6570\u636e\u7684\u5206\u9694\u7b26\u4ee5\u53ca\u5b58\u50a8\u683c\u5f0f\u7b49\u3002","title":"Hive"},{"location":"datasources/hive/#installation","text":"\u200b Hive\u63a5\u5165XSQL\uff0c\u9996\u5148\u9700\u8981\u5728Linux\u73af\u5883\u4e2d\u914d\u7f6e\u597dHive\u4f9d\u8d56\u7684HDFS\u3001Hive Metadata Server\u3002\u8fd9\u4e9b\u5185\u5bb9\u8d85\u51fa\u4e86XSQL\u7684\u8303\u56f4\uff0c\u9700\u8981\u4e86\u89e3\u7684\u7528\u6237\u8bf7\u5206\u522b\u67e5\u9605 HDFS\u5b98\u65b9\u6587\u6863 \u548c Hive\u5b98\u65b9\u6587\u6863 \u3002","title":"Installation"},{"location":"datasources/hive/#configuration","text":"\u200b Hive\u63a5\u5165XSQL\u7684\u914d\u7f6e\u7ee7\u627f\u4e86 Configurations \u4e2d\u4ecb\u7ecd\u7684\u901a\u7528\u914d\u7f6e\uff08 \u6ce8\u610f \uff1aHive\u63a5\u5165XSQL\u4e0d\u652f\u6301\u901a\u7528\u914d\u7f6espark.xsql.datasource.$dataSource.pushdown\uff09\u3002Hive\u63a5\u5165XSQL\u8fd8\u6709\u4e00\u4e9b\u7279\u6709\u7684\u914d\u7f6e\uff0c\u4e0b\u8868\u5c06\u5bf9\u4ed6\u4eec\u8fdb\u884c\u4ecb\u7ecd\u3002 Property Name Default Meaning spark.xsql.datasource.$dataSource.metastore.url None Hive Metadata Server\u7684\u8bbf\u95eeURI \u6b64\u914d\u7f6e\u975e\u5e38\u5173\u952e\uff0cXSQL\u5c06\u901a\u8fc7\u8bbf\u95eeHive Metadata Server\u83b7\u5f97Hive\u7684\u5143\u6570\u636e\u4fe1\u606f\u3002 \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2aHive\u63a5\u5165XSQL\u7684\u914d\u7f6e\u793a\u4f8b\uff1a spark.xsql.datasources default spark.xsql.datasource.default.type hive spark.xsql.datasource.default.metastore.url thrift://127.0.0.1:9083 spark.xsql.datasource.default.user test spark.xsql.datasource.default.password test spark.xsql.datasource.default.version 1.2.1 spark.xsql.datasource.default.whitelist hive-whitelist.conf","title":"Configuration"},{"location":"datasources/hive/#execution","text":"\u200b Hive\u63a5\u5165XSQL\u652f\u6301 Common Commands \u4e2d\u4ecb\u7ecd\u7684\u901a\u7528\u539f\u5219\u3002Hive\u63a5\u5165XSQL\u5c06\u652f\u6301\u7edd\u5927\u591a\u6570\u7684Hive QL\u8bed\u6cd5\u3002\u672c\u8282\u5c06\u4ee5Hive\u7279\u6709\u7684SQL\u4e3a\u4f8b\uff0c\u6765\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528XSQL\u6267\u884cHive QL\u3002","title":"Execution"},{"location":"datasources/hive/#create-hive-table","text":"\u521b\u5efaHive\u8868\uff0c\u4e0e\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff08\u4f8b\u5982MySQL\u3001Oracle\u7b49\uff09\u521b\u5efa\u8868\u7684\u65b9\u5f0f\u6709\u5f88\u591a\u4e0d\u540c\u4e4b\u5904\u3002\u4f8b\u5982\uff1a create table test ( key String, value String, other String ) ROW FORMAT DELIMITED FIELDS TERMINATED BY '\\t' STORED AS TEXTFILE \u4e0a\u9762\u7684SQL\u4e2d\u9700\u8981\u5b9a\u4e49\u884c\u6570\u636e\u7684\u5206\u9694\u7b26\u4ee5\u53ca\u5b58\u50a8\u683c\u5f0f\u7b49\u3002","title":"Create Hive Table"},{"location":"datasources/kafka/","text":"Kafka\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u6570\u636e\u6d41\u5e73\u53f0\uff0c\u5177\u6709\u4e09\u79cd\u5173\u952e\u7684\u80fd\u529b\uff1a \u53d1\u5e03\u548c\u8ba2\u9605\u6d88\u606f\u8bb0\u5f55 \u5b58\u50a8\u6d88\u606f\u8bb0\u5f55\u7684\u5bb9\u9519\u3001\u53ef\u9760 \u5b9e\u65f6\u5904\u7406\u6d88\u606f\u8bb0\u5f55 Kafka\u662fXSQL\u652f\u6301\u7684\u6570\u636e\u6e90\u4e4b\u4e00\u3002\u672c\u8282\u5c06\u5bf9Kafka\u63a5\u5165XSQL\u7684\u5b89\u88c5\u3001\u914d\u7f6e\u3001\u8fd0\u884c\u4f5c\u7b80\u5355\u7684\u4ecb\u7ecd\u3002 Installation \u200b \u7531\u4e8eKafka\u63d0\u4f9b\u4e86Java API\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u4efb\u4f55\u5b89\u88c5\u3002\u5bf9\u4e8e\u60f3\u8981\u4e86\u89e3Kafka\u7684\u7528\u6237\u8bf7\u67e5\u9605 Kafka\u5b98\u7f51 \u3002 Configuration \u200b Kafka\u63a5\u5165XSQL\u7684\u914d\u7f6e\u7ee7\u627f\u4e86 Configurations \u4e2d\u4ecb\u7ecd\u7684\u901a\u7528\u914d\u7f6e\uff08 \u6ce8\u610f \uff1aKafka\u63a5\u5165XSQL\u4e0d\u652f\u6301\u901a\u7528\u914d\u7f6espark.xsql.datasource.$dataSource.pushdown\u548cspark.xsql.datasource.$dataSource.url\uff09\u3002Kafka\u63a5\u5165XSQL\u8fd8\u6709\u4e00\u4e9b\u7279\u6709\u7684\u914d\u7f6e\uff0c\u4e0b\u8868\u5c06\u5bf9\u4ed6\u4eec\u8fdb\u884c\u4ecb\u7ecd\u3002 Property Name Default Meaning spark.xsql.datasource.$dataSource.bootstrap.servers None Kafka\u7684brokers \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2aKafka\u63a5\u5165XSQL\u7684\u914d\u7f6e\u793a\u4f8b\uff1a spark.xsql.datasources default spark.xsql.datasource.default.type kafka spark.xsql.datasource.default.bootstrap.servers 127.0.0.1:9092 spark.xsql.datasource.default.user test spark.xsql.datasource.default.password test spark.xsql.datasource.default.version 2.2 \u6ce8\u610f\uff1a\u4ee5\u4e0a\u914d\u7f6e\u76f8\u5f53\u4e8e\u628aKafka\u5f53\u505a\u4e86\u6570\u636e\u5e93\u4f7f\u7528\u3002\u6211\u4eec\u67e5\u8be2\u6570\u636e\u5e93\u7684\u6570\u636e\u65f6\uff0c\u5f80\u5f80\u53ea\u4f1a\u8fd4\u56de\u67e5\u8be2\u90a3\u4e00\u523b\u6240\u5b58\u50a8\u7684\u6570\u636e\uff0c\u6240\u4ee5Kafka\u7684\u884c\u4e3a\u4e5f\u662f\u7c7b\u4f3c\u3002Kafka\u4f5c\u4e3a\u6d41\u5f0f\u6570\u636e\u5e73\u53f0\uff0c\u91cc\u9762\u7684\u6570\u636e\u662f\u6301\u7eed\u53d8\u5316\u3001\u8fde\u7eed\u751f\u6210\u7684\uff0c\u5982\u679c\u60f3\u8981\u83b7\u53d6\u8fde\u7eed\u7684\u6570\u636e\uff0c\u90a3\u4e48\u8bf7\u770b Streaming \u3002 Streaming Configuration \u4e0a\u6587\u5c06Kafka\u4f5c\u4e3a\u6570\u636e\u5e93\u770b\u5f85\uff0c\u5982\u679c\u9700\u8981\u542f\u7528\u6d41\u7684\u80fd\u529b\uff0c\u9700\u8981\u6253\u5f00Kafka\u6570\u636e\u6e90\u7684\u6d41\u5f00\u5173\u3002\u4ee5\u4e0a\u6587\u7684\u201cKafka\u63a5\u5165XSQL\u7684\u914d\u7f6e\u793a\u4f8b\u201d\u4e3a\u4f8b\uff0c\u6211\u4eec\u9700\u8981\u52a0\u5165\uff1a spark.xsql.datasource.default.stream true \u6d41\u5f0f\u5904\u7406\u4e2d\uff0c\u6709\u8bf8\u591a\u989d\u5916\u7684\u914d\u7f6e\u53c2\u6570\u53ef\u4ee5\u63a7\u5236\uff0c\u53c2\u7167\u4e0b\u8868\uff1a Property Name Default Meaning spark.xsql.datasource.$dataSource.stream True XSQL\u6d41\u5f0f\u5904\u7406Kafka\u7684\u603b\u5f00\u5173 spark.xsql.datasource.$dataSource.checkpointLocation None XSQL\u6d41\u5f0f\u5904\u7406Kafka\u7684\u68c0\u67e5\u70b9\u8def\u5f84\u3002\u6b64\u8def\u5f84\u5fc5\u987b\u662f\u5206\u5e03\u5f0f\u6587\u4ef6\u7cfb\u7edf\u7684\u8def\u5f84\uff0c\u4f8b\u5982\uff1aS3\u3001HDFS\u7b49\u3002\u6ce8\u610f\uff1a\u5728\u5f00\u542f\u6d41\u5f0f\u5904\u7406\u540e\uff0c\u6b64\u53c2\u6570\u5fc5\u987b\u914d\u7f6e\u3002 spark.xsql.datasource.$dataSource.sink None \u6d41\u5f0f\u5904\u7406\u540e\u7684\u7ed3\u679c\u7684\u8f93\u51fa\u76ee\u6807\u3002sink\u6709\u591a\u79cd\u53ef\u4f9b\u9009\u62e9\uff0c\u8bf7\u53c2\u8003 Streaming Sink \uff0c\u9ed8\u8ba4\u4e3aparquet\u3002\u66f4\u591a\u76f8\u5173\u4fe1\u606f\uff0c\u8bf7\u9605\u8bfb Spark Structed Streaming\u5bf9Sink\u7684\u4ecb\u7ecd \u3002 spark.xsql.datasource.$dataSource.sink.path None \u5f53Sink\u9009\u62e9\u7684\u662f\u6587\u4ef6\u683c\u5f0f\u8f93\u51fa\u65f6\uff08\u5982\uff1aparquet\uff09\uff0c\u5fc5\u987b\u6307\u5b9a\u6b64\u914d\u7f6e\u3002\u6b64\u8def\u5f84\u5fc5\u987b\u662f\u5206\u5e03\u5f0f\u6587\u4ef6\u7cfb\u7edf\u7684\u8def\u5f84\uff0c\u4f8b\u5982\uff1aS3\u3001HDFS\u7b49\u3002 spark.xsql.datasource.$dataSource.sink.kafka.bootstrap.servers None \u5f53Sink\u9009\u62e9\u8f93\u51fa\u5230Kafka\u65f6\uff0c\u5fc5\u987b\u6307\u5b9a\u6b64\u914d\u7f6e\u3002 spark.xsql.datasource.$dataSource.sink.kafka.topic None \u5f53Sink\u9009\u62e9\u8f93\u51fa\u5230Kafka\u65f6\uff0c\u5fc5\u987b\u6307\u5b9a\u6b64\u914d\u7f6e\u3002 spark.xsql.datasource.$dataSource.output.mode Append \u6d41\u5f0f\u5904\u7406\u7684\u8f93\u51fa\u6a21\u5f0f\u3002\u6709\u591a\u79cd\u9009\u62e9\uff0c\u8bf7\u53c2\u8003 Streaming Output Modes \uff0c\u9ed8\u8ba4\u4e3aAppend\u3002\u66f4\u591a\u76f8\u5173\u4fe1\u606f\uff0c\u8bf7\u9605\u8bfb Spark Structed Streaming\u5bf9Output Modes\u7684\u4ecb\u7ecd \u3002 spark.xsql.datasource.$dataSource.trigger.type microbatch \u6d41\u5f0f\u5904\u7406\u6240\u7528\u89e6\u53d1\u5668\u7684\u7c7b\u578b\u3002\u6709\u591a\u79cd\u9009\u62e9\uff0c\u8bf7\u53c2\u8003 Streaming Triggers \uff0c\u9ed8\u8ba4\u4e3aprocessing\u3002\u6ce8\u610f\uff1aContinuous\u53ea\u652f\u6301Projections\u3001Selections\u76f8\u5173SQL\u8bed\u6cd5\u3001\u9664\u4e86\u805a\u5408\u51fd\u6570\u3001 current_timestamp() \u3001 current_date() \u4ee5\u5916\u7684\u6240\u6709\u51fd\u6570\u3002 spark.xsql.datasource.$dataSource.trigger.duration 1 second \u5728\u89e6\u53d1\u5668\u7c7b\u578b\u4e0d\u540c\u65f6\uff0c\u6709\u4e0d\u540c\u7684\u542b\u4e49\u3002\u89e6\u53d1\u5668\u662fprocessing\u65f6\uff0c\u5219\u8868\u793a\u5fae\u6279\u4e4b\u95f4\u7684\u95f4\u9694\uff1b\u89e6\u53d1\u5668\u662fprocessing\u65f6\uff0c\u5219\u8868\u793a\u5f02\u6b65\u5199\u68c0\u67e5\u70b9\u7684\u65f6\u95f4\u95f4\u9694\u3002 spark.xsql.datasource.$dataSource.watermark None \u7528\u4e8e\u8ddf\u8e2a\u6570\u636e\u4e2d\u7684\u5f53\u524d\u4e8b\u4ef6\u65f6\u95f4\uff0c\u5e76\u5c1d\u8bd5\u76f8\u5e94\u5730\u6e05\u7406\u65e7\u72b6\u6001\u3002\u6709\u4e86Watermark\uff0cXSQL\u5c31\u80fd\u591f\u5904\u7406\u5ef6\u8fdf\u6570\u636e\u3002\u66f4\u591a\u5185\u5bb9\uff0c\u8bf7\u9605\u8bfb Spark Structed Streaming\u5bf9Watermark\u7684\u4ecb\u7ecd Streaming Sink Sink Meaning console \u8f93\u51fa\u5230\u547d\u4ee4\u884c\u63a7\u5236\u53f0 parquet \u8f93\u51fa\u4e3aParquet\u683c\u5f0f orc \u8f93\u51fa\u4e3aOrc\u683c\u5f0f text \u8f93\u51fa\u4e3aText\u683c\u5f0f json \u8f93\u51fa\u4e3aJson\u683c\u5f0f csv \u8f93\u51fa\u4e3aCsv\u683c\u5f0f kafka \u8f93\u51fa\u5230Kafka Streaming Output Modes Output Modes Meaning Append \u8ffd\u52a0\u6a21\u5f0f Complete \u5b8c\u5168\u6a21\u5f0f Update \u66f4\u65b0\u6a21\u5f0f Streaming Triggers Trigger Type Meaning Notice microbatch \u91c7\u7528\u5fae\u6279\u65b9\u5f0f\u5904\u7406\uff0c\u5fae\u6279\u4e4b\u95f4\u4fdd\u6301\u56fa\u5b9a\u7684\u65f6\u95f4\u95f4\u9694 \u9002\u7528\u4e8e\u8fde\u7eed\u4e0d\u65ad\u5730\u6d88\u8d39\u3001\u52a0\u5de5\u6570\u636e\u6d41\u3002\u5982\u679c\u524d\u4e00\u4e2a\u5fae\u6279\u6267\u884c\u7684\u65f6\u95f4\u5c0f\u4e8e\u95f4\u9694\u5927\u5c0f\uff0cXSQL\u4e5f\u5c06\u7b49\u5f85\u8be5\u95f4\u9694\u7ed3\u675f\u540e\uff0c\u624d\u5f00\u59cb\u4e0b\u4e00\u4e2a\u5fae\u6279\uff1b\u5982\u679c\u524d\u4e00\u4e2a\u5fae\u6279\u6267\u884c\u7684\u65f6\u95f4\u5927\u4e8e\u95f4\u9694\u5927\u5c0f\uff0c\u4e0b\u4e00\u4e2a\u5fae\u6279\u5c06\u5728\u524d\u4e00\u4e2a\u5fae\u6279\u6267\u884c\u7ed3\u675f\u540e\u5f00\u59cb\uff0c\u800c\u4e0d\u4f1a\u8003\u8651\u95f4\u9694\u5927\u5c0f\uff1b\u5982\u679c\u6570\u636e\u6d41\u4e2d\u6ca1\u6709\u6570\u636e\u53ef\u7528\uff0c\u5219\u4e0d\u4f1a\u89e6\u53d1\u4e0b\u4e00\u4e2a\u5fae\u6279\u3002 once \u91c7\u7528\u5fae\u6279\u65b9\u5f0f\u5904\u7406\uff0c\u4f46\u53ea\u6267\u884c\u4e00\u6b21 \u975e\u5e38\u9002\u7528\u4e8e\u7528\u6237\u6309\u7167\u81ea\u5df1\u7684\u5468\u671f\uff08\u5982\uff1a\u5929\u3001\u5468\uff09\u5904\u7406\u81ea\u4e0a\u4e00\u4e2a\u65f6\u95f4\u6bb5\u4ee5\u6765\u53ef\u7528\u7684\u6240\u6709\u5185\u5bb9\u3002 continuous \u91c7\u7528\u8fde\u7eed\u6d41\u65b9\u5f0f\u5904\u7406 \u53ea\u652f\u6301Projections\u3001Selections\u76f8\u5173SQL\u8bed\u6cd5\u3001\u9664\u4e86\u805a\u5408\u51fd\u6570\u3001 current_timestamp() \u3001 current_date() \u4ee5\u5916\u7684\u6240\u6709\u51fd\u6570\u3002 Concept Mapping Kafka\u6bd5\u7adf\u4e0d\u662f\u6570\u636e\u5e93\uff0c\u8ddf\u522b\u8bf4\u4e0e\u4f20\u7edf\u5173\u7cfb\u578b\u6570\u636e\u5e93\u76f8\u6bd4\u8f83\uff0c\u56e0\u6b64\u5728\u5e95\u5c42\u8bbe\u8ba1\u4e0a\u6709\u5de8\u5927\u7684\u5dee\u5f02\u3002\u6bd4\u5982\uff1aKafka\u4e2d\u662f\u6ca1\u6709table\u7684\u3002\u90a3\u4e48\u7528\u6237\u4f1a\u5728XSQL\u4e2d\u770b\u5230table\u65f6\uff0c\u9020\u6210\u4e00\u4e9b\u56f0\u60d1\u3002\u4e0b\u8868\u5bf9Kafka\u4e0e\u5173\u7cfb\u578b\u6570\u636e\u5e93\u5728XSQL\u4e2d\u7684\u6620\u5c04\u5173\u7cfb\u9010\u4e00\u8bf4\u660e\u3002 Kafka\u6982\u5ff5 \u5173\u7cfb\u6570\u636e\u5e93\u6982\u5ff5 Kafka\u96c6\u7fa4\uff08\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3aBrokers\uff09 \u6570\u636e\u5e93\u5b9e\u4f8b\uff0c\u540d\u79f0\u56fa\u5b9a\u4e3akafka \u4e3b\u9898\uff08\u5373Topic\uff09 \u8868 \u4e8b\u4ef6\uff08\u5373Event\uff09 \u884c Kafka Schema XSQL\u76f4\u63a5\u501f\u7528\u4e86Spark\u5bf9\u4e8eKafka\u7684schema\u5b9a\u4e49\uff1a def kafkaSchema: StructType = StructType(Seq( StructField( key , BinaryType), StructField( value , BinaryType), StructField( topic , StringType), StructField( partition , IntegerType), StructField( offset , LongType), StructField( timestamp , TimestampType), StructField( timestampType , IntegerType) )) \u65e0\u8bba\u4f60\u8981\u6d88\u8d39\u7684Kafka\u6d88\u606f\u7684key\u548cvalue\u7a76\u7adf\u662f\u600e\u6837\u7684\u683c\u5f0f\uff0c\u5b83\u4eec\u90fd\u88ab\u5f53\u505a\u5b57\u8282\u6570\u7ec4\u6765\u5904\u7406\u3002\u56e0\u6b64\uff0ckey\u6216\u8005value\uff0c\u5f80\u5f80\u9700\u8981\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u6765\u5904\u7406\u3002key\u6216\u8005value\u53ef\u4ee5\u5b58\u50a8\u952e\u503c\u5bf9\u3001Json\u4e32\u3001Xml\uff0c\u751a\u81f3\u4efb\u4f55\u4f60\u81ea\u5b9a\u4e49\u7684\u683c\u5f0f\u3002\u4e0b\u9762\u5bf9Schema\u4e2d\u7684\u5404\u4e2a\u5b57\u6bb5\u5bf9\u7167Kafka\u8fdb\u884c\u4e00\u4e2a\u7b80\u77ed\u7684\u8bf4\u660e\uff1a Field Name Field Type Kafka mapping key Binary Message key value Binary Message value topic String Kafka topic partition Integer Topic partition offset Long Partition offset timestamp Timestamp Message timestamp timestampType Integer Message timestamp type\uff0c\u5206\u522b\u662f\uff1a-1:NoTimestampType, 0: CreateTime\uff08\u6d88\u606f\u521b\u5efa\u65f6\u95f4\uff09, 1:LogAppendTime\uff08\u65e5\u5fd7\u8ffd\u52a0\u65f6\u95f4\uff09 Execution \u200b Kafka\u63a5\u5165XSQL\u652f\u6301 Common Commands \u4e2d\u4ecb\u7ecd\u7684\u901a\u7528\u539f\u5219\u3002Kafka\u63a5\u5165XSQL\u540e\uff0cXSQL\u4f1a\u628aSQL\u8f6c\u6362\u4e3aKafka\u7684Java API\u3002\u5728 Kafka Schema \u4e00\u8282\u63d0\u5230Kafka\u7684Schema\u5b9a\u4e49\u662f\u56fa\u5b9a\u7684\uff0c\u56e0\u6b64XSQL\u76ee\u524d\u6ca1\u6709\u8003\u8651\u5b9e\u73b0Kafka\u5bf9\u5e94\u7684\u4f1a\u4fee\u6539\u5143\u4fe1\u606f\u7684DDL\uff0c\u4f8b\u5982\uff1acreate table, create database, alter table\u7b49\u3002\u672c\u8282\u4f7f\u7528XSQL\uff0c\u6267\u884cDesc\u8bed\u53e5\uff0c\u6765\u67e5\u770b\u5b83\u7684\u5143\u4fe1\u606f\u662f\u5426\u4e0e Kafka Schema \u4e00\u8282\u7684\u63cf\u8ff0\u76f8\u4e00\u81f4\u3002 Desc Kafka Topic \u67e5\u770bKafka\u7684Topic\uff0c\u4e0e\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff08\u4f8b\u5982MySQL\u3001Oracle\u7b49\uff09\u67e5\u770b\u8868\u7684\u65b9\u5f0f\u51e0\u4e4e\u76f8\u540c\u3002\u4f8b\u5982\uff1a spark-xsql desc mykafka.kafka.xsql_test; key binary NULL value binary NULL topic string NULL partition int NULL offset bigint NULL timestamp timestamp NULL timestampType int NULL Time taken: 2.681 s \u5982\u679c\u60f3\u8981\u67e5\u770b\u66f4\u591a\u7684\u5143\u4fe1\u606f\uff0c\u4f8b\u5982Topic\u7684Partition\u4fe1\u606f\uff0c\u53ef\u4ee5\u6267\u884c\uff1a spark-xsql desc formatted mykafka.kafka.xsql_test; key binary NULL value binary NULL topic string NULL partition int NULL offset bigint NULL timestamp timestamp NULL timestampType int NULL # Detailed Table Information Database kafka Table xsql_test Created Time Thu Aug 08 11:27:33 CST 2019 Last Access Thu Jan 01 07:59:59 CST 1970 Created By Spark Type TOPIC Provider kafka Table Properties [originDBName=kafka] Storage Properties [kafka_partitions=Buffer(Partition(topic = xsql_test, partition = 0, leader = 0, replicas = [0,], isr = [0,], Partition(topic = xsql_test, partition = 1, leader = 0, replicas = [0,], isr = [0,]), subscribe=xsql_test, output.mode=append, sink=console, bootstrap.servers=127.0.0.1:9092, version=2.2, kafka.bootstrap.servers=127.0.0.1:9092, stream=true, checkpointLocation=hdfs://127.0.0.1:9000/home/spark/ss/checkpoint, cache.level=2, type=kafka, watermark=10 minutes] Time taken: 0.08 s How to treat Kafka value? \u5728 Kafka Schema \u4e00\u8282\u5bf9Kafka\u7684Topic\u7684\u56fa\u5b9a\u7ed3\u6784\u8fdb\u884c\u4e86\u8bf4\u660e\u3002\u5176\u4e2d\uff0cKafka\u6d88\u606f\u7684value\u662f\u88ab\u4f5c\u4e3a\u4e8c\u8fdb\u5236\u6570\u7ec4\u770b\u5f85\u7684\u3002Kafka\u7684value\u4e2d\u53ef\u4ee5\u5b58\u50a8\u5343\u53d8\u4e07\u5316\u7684\u6570\u636e\u5f62\u5f0f\uff0c\u5982\u679c\u8981\u5bf9value\u4e2d\u7684\u5185\u5bb9\u8fdb\u884c\u66f4\u8be6\u7ec6\u7684\u5904\u7406\u8be5\u600e\u4e48\u529e\uff1f\u672c\u8282\u4ee5\u7ecf\u5178\u7684word count\u4f8b\u5b50\uff0c\u6765\u5f15\u5bfc\u5927\u5bb6\u5982\u4f55\u64cd\u4f5c\u3002 \u6211\u4eec\u6709\u4e00\u4e2a\u52a8\u7269\u76f8\u5173\u7684Topic\uff0c\u540d\u4e3aanimals. \u6709\u4e2aKafka\u751f\u4ea7\u8005\u4e00\u76f4\u5411animals\u5199\u5165\u4ee5\u7a7a\u683c\u5206\u9694\u7684\u52a8\u7269\u540d\u79f0\uff0c\u73b0\u5728\u6211\u4eec\u4f7f\u7528XSQL\u6765\u5b9e\u73b0\u5bf9\u52a8\u7269\u540d\u79f0\u7684\u8ba1\u6570\u3002\u4e0b\u9762\u662f\u5b9e\u73b0\u6b64\u529f\u80fd\u7684SQL\uff1a select count(t1.value2) as num, t1.value2 as name from (select explode(split(CAST(value AS STRING), ' ')) value2 from mykafka.kafka.animals) t1 group by t1.value2; \u6211\u4eec\u5bf9\u4e0a\u9762\u7684SQL\u8fdb\u884c\u4e00\u4e2a\u8be6\u7ec6\u7684\u5206\u6790\uff1a \u9996\u5148\uff0c\u7531\u4e8evalue\u662f\u5b57\u8282\u6570\u7ec4\uff0c\u6211\u4eec\u5c06\u5b83\u901a\u8fc7CAST\u51fd\u6570\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff1b \u7136\u540e\uff0c\u4f7f\u7528split\u51fd\u6570\u5c06\u5b57\u7b26\u4e32\u4ee5\u7a7a\u683c\u8fdb\u884c\u62c6\u5206\uff0c\u5e76\u4f7f\u7528explode\u51fd\u6570\u628a\u6bcf\u4e2a\u5355\u8bcd\u4ece\u6c34\u5e73\u65b9\u5411\u8f6c\u6362\u5230\u5782\u76f4\u65b9\u5411\uff1b \u6700\u540e\uff0c\u7ed3\u5408count\u51fd\u6570\uff0c\u4f7f\u7528group by\u4ece\u53e5\uff0c\u8f93\u51fa\u8ba1\u7b97\u548c\u5bf9\u5e94\u7684\u52a8\u7269\u540d\u79f0\u3002","title":"Kafka"},{"location":"datasources/kafka/#installation","text":"\u200b \u7531\u4e8eKafka\u63d0\u4f9b\u4e86Java API\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u4efb\u4f55\u5b89\u88c5\u3002\u5bf9\u4e8e\u60f3\u8981\u4e86\u89e3Kafka\u7684\u7528\u6237\u8bf7\u67e5\u9605 Kafka\u5b98\u7f51 \u3002","title":"Installation"},{"location":"datasources/kafka/#configuration","text":"\u200b Kafka\u63a5\u5165XSQL\u7684\u914d\u7f6e\u7ee7\u627f\u4e86 Configurations \u4e2d\u4ecb\u7ecd\u7684\u901a\u7528\u914d\u7f6e\uff08 \u6ce8\u610f \uff1aKafka\u63a5\u5165XSQL\u4e0d\u652f\u6301\u901a\u7528\u914d\u7f6espark.xsql.datasource.$dataSource.pushdown\u548cspark.xsql.datasource.$dataSource.url\uff09\u3002Kafka\u63a5\u5165XSQL\u8fd8\u6709\u4e00\u4e9b\u7279\u6709\u7684\u914d\u7f6e\uff0c\u4e0b\u8868\u5c06\u5bf9\u4ed6\u4eec\u8fdb\u884c\u4ecb\u7ecd\u3002 Property Name Default Meaning spark.xsql.datasource.$dataSource.bootstrap.servers None Kafka\u7684brokers \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2aKafka\u63a5\u5165XSQL\u7684\u914d\u7f6e\u793a\u4f8b\uff1a spark.xsql.datasources default spark.xsql.datasource.default.type kafka spark.xsql.datasource.default.bootstrap.servers 127.0.0.1:9092 spark.xsql.datasource.default.user test spark.xsql.datasource.default.password test spark.xsql.datasource.default.version 2.2 \u6ce8\u610f\uff1a\u4ee5\u4e0a\u914d\u7f6e\u76f8\u5f53\u4e8e\u628aKafka\u5f53\u505a\u4e86\u6570\u636e\u5e93\u4f7f\u7528\u3002\u6211\u4eec\u67e5\u8be2\u6570\u636e\u5e93\u7684\u6570\u636e\u65f6\uff0c\u5f80\u5f80\u53ea\u4f1a\u8fd4\u56de\u67e5\u8be2\u90a3\u4e00\u523b\u6240\u5b58\u50a8\u7684\u6570\u636e\uff0c\u6240\u4ee5Kafka\u7684\u884c\u4e3a\u4e5f\u662f\u7c7b\u4f3c\u3002Kafka\u4f5c\u4e3a\u6d41\u5f0f\u6570\u636e\u5e73\u53f0\uff0c\u91cc\u9762\u7684\u6570\u636e\u662f\u6301\u7eed\u53d8\u5316\u3001\u8fde\u7eed\u751f\u6210\u7684\uff0c\u5982\u679c\u60f3\u8981\u83b7\u53d6\u8fde\u7eed\u7684\u6570\u636e\uff0c\u90a3\u4e48\u8bf7\u770b Streaming \u3002","title":"Configuration"},{"location":"datasources/kafka/#streaming-configuration","text":"\u4e0a\u6587\u5c06Kafka\u4f5c\u4e3a\u6570\u636e\u5e93\u770b\u5f85\uff0c\u5982\u679c\u9700\u8981\u542f\u7528\u6d41\u7684\u80fd\u529b\uff0c\u9700\u8981\u6253\u5f00Kafka\u6570\u636e\u6e90\u7684\u6d41\u5f00\u5173\u3002\u4ee5\u4e0a\u6587\u7684\u201cKafka\u63a5\u5165XSQL\u7684\u914d\u7f6e\u793a\u4f8b\u201d\u4e3a\u4f8b\uff0c\u6211\u4eec\u9700\u8981\u52a0\u5165\uff1a spark.xsql.datasource.default.stream true \u6d41\u5f0f\u5904\u7406\u4e2d\uff0c\u6709\u8bf8\u591a\u989d\u5916\u7684\u914d\u7f6e\u53c2\u6570\u53ef\u4ee5\u63a7\u5236\uff0c\u53c2\u7167\u4e0b\u8868\uff1a Property Name Default Meaning spark.xsql.datasource.$dataSource.stream True XSQL\u6d41\u5f0f\u5904\u7406Kafka\u7684\u603b\u5f00\u5173 spark.xsql.datasource.$dataSource.checkpointLocation None XSQL\u6d41\u5f0f\u5904\u7406Kafka\u7684\u68c0\u67e5\u70b9\u8def\u5f84\u3002\u6b64\u8def\u5f84\u5fc5\u987b\u662f\u5206\u5e03\u5f0f\u6587\u4ef6\u7cfb\u7edf\u7684\u8def\u5f84\uff0c\u4f8b\u5982\uff1aS3\u3001HDFS\u7b49\u3002\u6ce8\u610f\uff1a\u5728\u5f00\u542f\u6d41\u5f0f\u5904\u7406\u540e\uff0c\u6b64\u53c2\u6570\u5fc5\u987b\u914d\u7f6e\u3002 spark.xsql.datasource.$dataSource.sink None \u6d41\u5f0f\u5904\u7406\u540e\u7684\u7ed3\u679c\u7684\u8f93\u51fa\u76ee\u6807\u3002sink\u6709\u591a\u79cd\u53ef\u4f9b\u9009\u62e9\uff0c\u8bf7\u53c2\u8003 Streaming Sink \uff0c\u9ed8\u8ba4\u4e3aparquet\u3002\u66f4\u591a\u76f8\u5173\u4fe1\u606f\uff0c\u8bf7\u9605\u8bfb Spark Structed Streaming\u5bf9Sink\u7684\u4ecb\u7ecd \u3002 spark.xsql.datasource.$dataSource.sink.path None \u5f53Sink\u9009\u62e9\u7684\u662f\u6587\u4ef6\u683c\u5f0f\u8f93\u51fa\u65f6\uff08\u5982\uff1aparquet\uff09\uff0c\u5fc5\u987b\u6307\u5b9a\u6b64\u914d\u7f6e\u3002\u6b64\u8def\u5f84\u5fc5\u987b\u662f\u5206\u5e03\u5f0f\u6587\u4ef6\u7cfb\u7edf\u7684\u8def\u5f84\uff0c\u4f8b\u5982\uff1aS3\u3001HDFS\u7b49\u3002 spark.xsql.datasource.$dataSource.sink.kafka.bootstrap.servers None \u5f53Sink\u9009\u62e9\u8f93\u51fa\u5230Kafka\u65f6\uff0c\u5fc5\u987b\u6307\u5b9a\u6b64\u914d\u7f6e\u3002 spark.xsql.datasource.$dataSource.sink.kafka.topic None \u5f53Sink\u9009\u62e9\u8f93\u51fa\u5230Kafka\u65f6\uff0c\u5fc5\u987b\u6307\u5b9a\u6b64\u914d\u7f6e\u3002 spark.xsql.datasource.$dataSource.output.mode Append \u6d41\u5f0f\u5904\u7406\u7684\u8f93\u51fa\u6a21\u5f0f\u3002\u6709\u591a\u79cd\u9009\u62e9\uff0c\u8bf7\u53c2\u8003 Streaming Output Modes \uff0c\u9ed8\u8ba4\u4e3aAppend\u3002\u66f4\u591a\u76f8\u5173\u4fe1\u606f\uff0c\u8bf7\u9605\u8bfb Spark Structed Streaming\u5bf9Output Modes\u7684\u4ecb\u7ecd \u3002 spark.xsql.datasource.$dataSource.trigger.type microbatch \u6d41\u5f0f\u5904\u7406\u6240\u7528\u89e6\u53d1\u5668\u7684\u7c7b\u578b\u3002\u6709\u591a\u79cd\u9009\u62e9\uff0c\u8bf7\u53c2\u8003 Streaming Triggers \uff0c\u9ed8\u8ba4\u4e3aprocessing\u3002\u6ce8\u610f\uff1aContinuous\u53ea\u652f\u6301Projections\u3001Selections\u76f8\u5173SQL\u8bed\u6cd5\u3001\u9664\u4e86\u805a\u5408\u51fd\u6570\u3001 current_timestamp() \u3001 current_date() \u4ee5\u5916\u7684\u6240\u6709\u51fd\u6570\u3002 spark.xsql.datasource.$dataSource.trigger.duration 1 second \u5728\u89e6\u53d1\u5668\u7c7b\u578b\u4e0d\u540c\u65f6\uff0c\u6709\u4e0d\u540c\u7684\u542b\u4e49\u3002\u89e6\u53d1\u5668\u662fprocessing\u65f6\uff0c\u5219\u8868\u793a\u5fae\u6279\u4e4b\u95f4\u7684\u95f4\u9694\uff1b\u89e6\u53d1\u5668\u662fprocessing\u65f6\uff0c\u5219\u8868\u793a\u5f02\u6b65\u5199\u68c0\u67e5\u70b9\u7684\u65f6\u95f4\u95f4\u9694\u3002 spark.xsql.datasource.$dataSource.watermark None \u7528\u4e8e\u8ddf\u8e2a\u6570\u636e\u4e2d\u7684\u5f53\u524d\u4e8b\u4ef6\u65f6\u95f4\uff0c\u5e76\u5c1d\u8bd5\u76f8\u5e94\u5730\u6e05\u7406\u65e7\u72b6\u6001\u3002\u6709\u4e86Watermark\uff0cXSQL\u5c31\u80fd\u591f\u5904\u7406\u5ef6\u8fdf\u6570\u636e\u3002\u66f4\u591a\u5185\u5bb9\uff0c\u8bf7\u9605\u8bfb Spark Structed Streaming\u5bf9Watermark\u7684\u4ecb\u7ecd","title":"Streaming Configuration"},{"location":"datasources/kafka/#concept-mapping","text":"Kafka\u6bd5\u7adf\u4e0d\u662f\u6570\u636e\u5e93\uff0c\u8ddf\u522b\u8bf4\u4e0e\u4f20\u7edf\u5173\u7cfb\u578b\u6570\u636e\u5e93\u76f8\u6bd4\u8f83\uff0c\u56e0\u6b64\u5728\u5e95\u5c42\u8bbe\u8ba1\u4e0a\u6709\u5de8\u5927\u7684\u5dee\u5f02\u3002\u6bd4\u5982\uff1aKafka\u4e2d\u662f\u6ca1\u6709table\u7684\u3002\u90a3\u4e48\u7528\u6237\u4f1a\u5728XSQL\u4e2d\u770b\u5230table\u65f6\uff0c\u9020\u6210\u4e00\u4e9b\u56f0\u60d1\u3002\u4e0b\u8868\u5bf9Kafka\u4e0e\u5173\u7cfb\u578b\u6570\u636e\u5e93\u5728XSQL\u4e2d\u7684\u6620\u5c04\u5173\u7cfb\u9010\u4e00\u8bf4\u660e\u3002 Kafka\u6982\u5ff5 \u5173\u7cfb\u6570\u636e\u5e93\u6982\u5ff5 Kafka\u96c6\u7fa4\uff08\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3aBrokers\uff09 \u6570\u636e\u5e93\u5b9e\u4f8b\uff0c\u540d\u79f0\u56fa\u5b9a\u4e3akafka \u4e3b\u9898\uff08\u5373Topic\uff09 \u8868 \u4e8b\u4ef6\uff08\u5373Event\uff09 \u884c","title":"Concept Mapping"},{"location":"datasources/kafka/#kafka-schema","text":"XSQL\u76f4\u63a5\u501f\u7528\u4e86Spark\u5bf9\u4e8eKafka\u7684schema\u5b9a\u4e49\uff1a def kafkaSchema: StructType = StructType(Seq( StructField( key , BinaryType), StructField( value , BinaryType), StructField( topic , StringType), StructField( partition , IntegerType), StructField( offset , LongType), StructField( timestamp , TimestampType), StructField( timestampType , IntegerType) )) \u65e0\u8bba\u4f60\u8981\u6d88\u8d39\u7684Kafka\u6d88\u606f\u7684key\u548cvalue\u7a76\u7adf\u662f\u600e\u6837\u7684\u683c\u5f0f\uff0c\u5b83\u4eec\u90fd\u88ab\u5f53\u505a\u5b57\u8282\u6570\u7ec4\u6765\u5904\u7406\u3002\u56e0\u6b64\uff0ckey\u6216\u8005value\uff0c\u5f80\u5f80\u9700\u8981\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u6765\u5904\u7406\u3002key\u6216\u8005value\u53ef\u4ee5\u5b58\u50a8\u952e\u503c\u5bf9\u3001Json\u4e32\u3001Xml\uff0c\u751a\u81f3\u4efb\u4f55\u4f60\u81ea\u5b9a\u4e49\u7684\u683c\u5f0f\u3002\u4e0b\u9762\u5bf9Schema\u4e2d\u7684\u5404\u4e2a\u5b57\u6bb5\u5bf9\u7167Kafka\u8fdb\u884c\u4e00\u4e2a\u7b80\u77ed\u7684\u8bf4\u660e\uff1a Field Name Field Type Kafka mapping key Binary Message key value Binary Message value topic String Kafka topic partition Integer Topic partition offset Long Partition offset timestamp Timestamp Message timestamp timestampType Integer Message timestamp type\uff0c\u5206\u522b\u662f\uff1a-1:NoTimestampType, 0: CreateTime\uff08\u6d88\u606f\u521b\u5efa\u65f6\u95f4\uff09, 1:LogAppendTime\uff08\u65e5\u5fd7\u8ffd\u52a0\u65f6\u95f4\uff09","title":"Kafka Schema"},{"location":"datasources/kafka/#execution","text":"\u200b Kafka\u63a5\u5165XSQL\u652f\u6301 Common Commands \u4e2d\u4ecb\u7ecd\u7684\u901a\u7528\u539f\u5219\u3002Kafka\u63a5\u5165XSQL\u540e\uff0cXSQL\u4f1a\u628aSQL\u8f6c\u6362\u4e3aKafka\u7684Java API\u3002\u5728 Kafka Schema \u4e00\u8282\u63d0\u5230Kafka\u7684Schema\u5b9a\u4e49\u662f\u56fa\u5b9a\u7684\uff0c\u56e0\u6b64XSQL\u76ee\u524d\u6ca1\u6709\u8003\u8651\u5b9e\u73b0Kafka\u5bf9\u5e94\u7684\u4f1a\u4fee\u6539\u5143\u4fe1\u606f\u7684DDL\uff0c\u4f8b\u5982\uff1acreate table, create database, alter table\u7b49\u3002\u672c\u8282\u4f7f\u7528XSQL\uff0c\u6267\u884cDesc\u8bed\u53e5\uff0c\u6765\u67e5\u770b\u5b83\u7684\u5143\u4fe1\u606f\u662f\u5426\u4e0e Kafka Schema \u4e00\u8282\u7684\u63cf\u8ff0\u76f8\u4e00\u81f4\u3002","title":"Execution"},{"location":"datasources/kafka/#desc-kafka-topic","text":"\u67e5\u770bKafka\u7684Topic\uff0c\u4e0e\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff08\u4f8b\u5982MySQL\u3001Oracle\u7b49\uff09\u67e5\u770b\u8868\u7684\u65b9\u5f0f\u51e0\u4e4e\u76f8\u540c\u3002\u4f8b\u5982\uff1a spark-xsql desc mykafka.kafka.xsql_test; key binary NULL value binary NULL topic string NULL partition int NULL offset bigint NULL timestamp timestamp NULL timestampType int NULL Time taken: 2.681 s \u5982\u679c\u60f3\u8981\u67e5\u770b\u66f4\u591a\u7684\u5143\u4fe1\u606f\uff0c\u4f8b\u5982Topic\u7684Partition\u4fe1\u606f\uff0c\u53ef\u4ee5\u6267\u884c\uff1a spark-xsql desc formatted mykafka.kafka.xsql_test; key binary NULL value binary NULL topic string NULL partition int NULL offset bigint NULL timestamp timestamp NULL timestampType int NULL # Detailed Table Information Database kafka Table xsql_test Created Time Thu Aug 08 11:27:33 CST 2019 Last Access Thu Jan 01 07:59:59 CST 1970 Created By Spark Type TOPIC Provider kafka Table Properties [originDBName=kafka] Storage Properties [kafka_partitions=Buffer(Partition(topic = xsql_test, partition = 0, leader = 0, replicas = [0,], isr = [0,], Partition(topic = xsql_test, partition = 1, leader = 0, replicas = [0,], isr = [0,]), subscribe=xsql_test, output.mode=append, sink=console, bootstrap.servers=127.0.0.1:9092, version=2.2, kafka.bootstrap.servers=127.0.0.1:9092, stream=true, checkpointLocation=hdfs://127.0.0.1:9000/home/spark/ss/checkpoint, cache.level=2, type=kafka, watermark=10 minutes] Time taken: 0.08 s","title":"Desc Kafka Topic"},{"location":"datasources/kafka/#how-to-treat-kafka-value","text":"\u5728 Kafka Schema \u4e00\u8282\u5bf9Kafka\u7684Topic\u7684\u56fa\u5b9a\u7ed3\u6784\u8fdb\u884c\u4e86\u8bf4\u660e\u3002\u5176\u4e2d\uff0cKafka\u6d88\u606f\u7684value\u662f\u88ab\u4f5c\u4e3a\u4e8c\u8fdb\u5236\u6570\u7ec4\u770b\u5f85\u7684\u3002Kafka\u7684value\u4e2d\u53ef\u4ee5\u5b58\u50a8\u5343\u53d8\u4e07\u5316\u7684\u6570\u636e\u5f62\u5f0f\uff0c\u5982\u679c\u8981\u5bf9value\u4e2d\u7684\u5185\u5bb9\u8fdb\u884c\u66f4\u8be6\u7ec6\u7684\u5904\u7406\u8be5\u600e\u4e48\u529e\uff1f\u672c\u8282\u4ee5\u7ecf\u5178\u7684word count\u4f8b\u5b50\uff0c\u6765\u5f15\u5bfc\u5927\u5bb6\u5982\u4f55\u64cd\u4f5c\u3002 \u6211\u4eec\u6709\u4e00\u4e2a\u52a8\u7269\u76f8\u5173\u7684Topic\uff0c\u540d\u4e3aanimals. \u6709\u4e2aKafka\u751f\u4ea7\u8005\u4e00\u76f4\u5411animals\u5199\u5165\u4ee5\u7a7a\u683c\u5206\u9694\u7684\u52a8\u7269\u540d\u79f0\uff0c\u73b0\u5728\u6211\u4eec\u4f7f\u7528XSQL\u6765\u5b9e\u73b0\u5bf9\u52a8\u7269\u540d\u79f0\u7684\u8ba1\u6570\u3002\u4e0b\u9762\u662f\u5b9e\u73b0\u6b64\u529f\u80fd\u7684SQL\uff1a select count(t1.value2) as num, t1.value2 as name from (select explode(split(CAST(value AS STRING), ' ')) value2 from mykafka.kafka.animals) t1 group by t1.value2; \u6211\u4eec\u5bf9\u4e0a\u9762\u7684SQL\u8fdb\u884c\u4e00\u4e2a\u8be6\u7ec6\u7684\u5206\u6790\uff1a \u9996\u5148\uff0c\u7531\u4e8evalue\u662f\u5b57\u8282\u6570\u7ec4\uff0c\u6211\u4eec\u5c06\u5b83\u901a\u8fc7CAST\u51fd\u6570\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff1b \u7136\u540e\uff0c\u4f7f\u7528split\u51fd\u6570\u5c06\u5b57\u7b26\u4e32\u4ee5\u7a7a\u683c\u8fdb\u884c\u62c6\u5206\uff0c\u5e76\u4f7f\u7528explode\u51fd\u6570\u628a\u6bcf\u4e2a\u5355\u8bcd\u4ece\u6c34\u5e73\u65b9\u5411\u8f6c\u6362\u5230\u5782\u76f4\u65b9\u5411\uff1b \u6700\u540e\uff0c\u7ed3\u5408count\u51fd\u6570\uff0c\u4f7f\u7528group by\u4ece\u53e5\uff0c\u8f93\u51fa\u8ba1\u7b97\u548c\u5bf9\u5e94\u7684\u52a8\u7269\u540d\u79f0\u3002","title":"How to treat Kafka value?"},{"location":"datasources/mongo/","text":"MongoDB\u662f\u4e00\u4e2a\u6587\u6863\u6570\u636e\u5e93\uff0c\u5177\u6709\u53ef\u4f38\u7f29\u6027\u548c\u60a8\u9700\u8981\u7684\u67e5\u8be2\u548c\u7d22\u5f15\u7684\u7075\u6d3b\u6027\u3002MongoDB\u662fXSQL\u652f\u6301\u7684\u6570\u636e\u6e90\u4e4b\u4e00\u3002\u672c\u8282\u5c06\u5bf9MongoDB\u63a5\u5165XSQL\u7684\u5b89\u88c5\u3001\u914d\u7f6e\u3001\u8fd0\u884c\u4f5c\u7b80\u5355\u7684\u4ecb\u7ecd\u3002 Installation \u200b \u7531\u4e8eMongoDB\u63d0\u4f9b\u4e86Java API\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u4efb\u4f55\u5b89\u88c5\u3002\u5bf9\u4e8e\u60f3\u8981\u4e86\u89e3MongoDB\u7684\u7528\u6237\u8bf7\u67e5\u9605 MongoDB\u5b98\u7f51 \u3002 Configuration \u200b MongoDB\u63a5\u5165XSQL\u7684\u914d\u7f6e\u7ee7\u627f\u4e86 Configurations \u4e2d\u4ecb\u7ecd\u7684\u901a\u7528\u914d\u7f6e\u3002MongoDB\u63a5\u5165XSQL\u8fd8\u6709\u4e00\u4e9b\u7279\u6709\u7684\u914d\u7f6e\uff0c\u4e0b\u8868\u5c06\u5bf9\u4ed6\u4eec\u8fdb\u884c\u4ecb\u7ecd\u3002 Property Name Default Meaning spark.xsql.datasource.$dataSource.authenticationDatabase admin MongoDB\u8fdb\u884c\u6743\u9650\u9a8c\u8bc1\u7684MongoDB\u6570\u636e\u5e93\u540d\u79f0 MongoDB\u6ca1\u6709\u4e25\u683c\u3001\u660e\u786e\u7684schema\u5b9a\u4e49\uff0c\u6240\u4ee5\u9700\u8981 \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2aMongoDB\u63a5\u5165XSQL\u7684\u914d\u7f6e\u793a\u4f8b\uff1a spark.xsql.datasources default spark.xsql.datasource.default.type mongo spark.xsql.datasource.default.url mongodb://test:test@127.0.0.1:7787/?replicaSet=7787 spark.xsql.datasource.default.authenticationDatabase admin spark.xsql.datasource.default.user test spark.xsql.datasource.default.password test spark.xsql.datasource.default.version 3.4.13 spark.xsql.datasource.default.schemas mongo.schemas Execution \u200b MongoDB\u63a5\u5165XSQL\u652f\u6301 Common Commands \u4e2d\u4ecb\u7ecd\u7684\u901a\u7528\u539f\u5219\u3002MongoDB\u63a5\u5165XSQL\u540e\uff0cXSQL\u4f1a\u628aSQL\u8f6c\u6362\u4e3aMongoDB\u7684Java API\u3002XSQL\u652f\u6301\u5927\u591a\u6570\u7684MongoDB\u529f\u80fd\u3002\u672c\u8282\u5c06XSQL\u7684SQL\u4e3a\u4f8b\uff0c\u6765\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528XSQL\u67e5\u8be2MongoDB\u3002 Create MongoDB Collection \u521b\u5efaMongoDB\u7684collection\uff0c\u4e0e\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff08\u4f8b\u5982MySQL\u3001Oracle\u7b49\uff09\u521b\u5efa\u8868\u7684\u65b9\u5f0f\u6709\u5f88\u591a\u4e0d\u540c\u4e4b\u5904\u3002\u4f8b\u5982\uff1a create table test ( key keyword, value text, other String ) using com.mongodb.spark.sql \u4e0a\u9762using\u7684\u542b\u4e49\u662f\u521b\u5efaMongoDB\u4e2d\u7684collection\u3002\u4e0d\u8fc7\uff0c\u8fd9\u79cd\u7528\u6cd5\u4e5f\u8bb8\u4f1a\u8ba9\u4eba\u89c9\u5f97\u7e41\u7410\uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5\u7528\u4e0b\u9762\u7684SQL\uff1a create table test ( name string, age int, comment String ) using mongo Discover Table Schema \u7531\u4e8eMongoDB\u662f\u4e00\u4e2a\u6587\u6863\u6570\u636e\u5e93\uff0c\u56e0\u6b64\u5404\u4e2a\u5b57\u6bb5\u53ef\u80fd\u4f1a\u5b58\u50a8\u5404\u79cd\u7c7b\u578b\u7684\u6570\u636e\u3002\u5982\u679c\u5b58\u50a8\u7684\u5185\u5bb9\u5305\u542b\u4e86\u590d\u5408\u7ed3\u6784\uff08\u4f8b\u5982\uff1a\u5bf9\u8c61\u3001\u6570\u7ec4\uff09\uff0c\u7528\u6237\u60f3\u8981\u628a\u590d\u5408\u7ed3\u6784\u53cd\u6620\u5230\u8868\u7684\u5143\u4fe1\u606f\u4e2d\uff0c\u90a3\u4e48\u53ef\u4ee5\u5173\u95ed\u4e8c\u7ea7\u7f13\u5b58\uff08\u6b64\u65f6\u4e0d\u9700\u8981\u63d0\u4f9b\u989d\u5916\u7684schema\u5b9a\u4e49\u6587\u4ef6\uff09\uff0c\u8fd9\u5c06\u4fc3\u4f7fXSQL\u5e2e\u52a9\u7528\u6237\u53bb\u89e3\u6790\u3001\u63a8\u65ad\u8868\u7684\u5143\u6570\u636e\u4fe1\u606f\u3002","title":"MongoDB"},{"location":"datasources/mongo/#installation","text":"\u200b \u7531\u4e8eMongoDB\u63d0\u4f9b\u4e86Java API\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u4efb\u4f55\u5b89\u88c5\u3002\u5bf9\u4e8e\u60f3\u8981\u4e86\u89e3MongoDB\u7684\u7528\u6237\u8bf7\u67e5\u9605 MongoDB\u5b98\u7f51 \u3002","title":"Installation"},{"location":"datasources/mongo/#configuration","text":"\u200b MongoDB\u63a5\u5165XSQL\u7684\u914d\u7f6e\u7ee7\u627f\u4e86 Configurations \u4e2d\u4ecb\u7ecd\u7684\u901a\u7528\u914d\u7f6e\u3002MongoDB\u63a5\u5165XSQL\u8fd8\u6709\u4e00\u4e9b\u7279\u6709\u7684\u914d\u7f6e\uff0c\u4e0b\u8868\u5c06\u5bf9\u4ed6\u4eec\u8fdb\u884c\u4ecb\u7ecd\u3002 Property Name Default Meaning spark.xsql.datasource.$dataSource.authenticationDatabase admin MongoDB\u8fdb\u884c\u6743\u9650\u9a8c\u8bc1\u7684MongoDB\u6570\u636e\u5e93\u540d\u79f0 MongoDB\u6ca1\u6709\u4e25\u683c\u3001\u660e\u786e\u7684schema\u5b9a\u4e49\uff0c\u6240\u4ee5\u9700\u8981 \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2aMongoDB\u63a5\u5165XSQL\u7684\u914d\u7f6e\u793a\u4f8b\uff1a spark.xsql.datasources default spark.xsql.datasource.default.type mongo spark.xsql.datasource.default.url mongodb://test:test@127.0.0.1:7787/?replicaSet=7787 spark.xsql.datasource.default.authenticationDatabase admin spark.xsql.datasource.default.user test spark.xsql.datasource.default.password test spark.xsql.datasource.default.version 3.4.13 spark.xsql.datasource.default.schemas mongo.schemas","title":"Configuration"},{"location":"datasources/mongo/#execution","text":"\u200b MongoDB\u63a5\u5165XSQL\u652f\u6301 Common Commands \u4e2d\u4ecb\u7ecd\u7684\u901a\u7528\u539f\u5219\u3002MongoDB\u63a5\u5165XSQL\u540e\uff0cXSQL\u4f1a\u628aSQL\u8f6c\u6362\u4e3aMongoDB\u7684Java API\u3002XSQL\u652f\u6301\u5927\u591a\u6570\u7684MongoDB\u529f\u80fd\u3002\u672c\u8282\u5c06XSQL\u7684SQL\u4e3a\u4f8b\uff0c\u6765\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528XSQL\u67e5\u8be2MongoDB\u3002 Create MongoDB Collection \u521b\u5efaMongoDB\u7684collection\uff0c\u4e0e\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff08\u4f8b\u5982MySQL\u3001Oracle\u7b49\uff09\u521b\u5efa\u8868\u7684\u65b9\u5f0f\u6709\u5f88\u591a\u4e0d\u540c\u4e4b\u5904\u3002\u4f8b\u5982\uff1a create table test ( key keyword, value text, other String ) using com.mongodb.spark.sql \u4e0a\u9762using\u7684\u542b\u4e49\u662f\u521b\u5efaMongoDB\u4e2d\u7684collection\u3002\u4e0d\u8fc7\uff0c\u8fd9\u79cd\u7528\u6cd5\u4e5f\u8bb8\u4f1a\u8ba9\u4eba\u89c9\u5f97\u7e41\u7410\uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5\u7528\u4e0b\u9762\u7684SQL\uff1a create table test ( name string, age int, comment String ) using mongo","title":"Execution"},{"location":"datasources/mongo/#discover-table-schema","text":"\u7531\u4e8eMongoDB\u662f\u4e00\u4e2a\u6587\u6863\u6570\u636e\u5e93\uff0c\u56e0\u6b64\u5404\u4e2a\u5b57\u6bb5\u53ef\u80fd\u4f1a\u5b58\u50a8\u5404\u79cd\u7c7b\u578b\u7684\u6570\u636e\u3002\u5982\u679c\u5b58\u50a8\u7684\u5185\u5bb9\u5305\u542b\u4e86\u590d\u5408\u7ed3\u6784\uff08\u4f8b\u5982\uff1a\u5bf9\u8c61\u3001\u6570\u7ec4\uff09\uff0c\u7528\u6237\u60f3\u8981\u628a\u590d\u5408\u7ed3\u6784\u53cd\u6620\u5230\u8868\u7684\u5143\u4fe1\u606f\u4e2d\uff0c\u90a3\u4e48\u53ef\u4ee5\u5173\u95ed\u4e8c\u7ea7\u7f13\u5b58\uff08\u6b64\u65f6\u4e0d\u9700\u8981\u63d0\u4f9b\u989d\u5916\u7684schema\u5b9a\u4e49\u6587\u4ef6\uff09\uff0c\u8fd9\u5c06\u4fc3\u4f7fXSQL\u5e2e\u52a9\u7528\u6237\u53bb\u89e3\u6790\u3001\u63a8\u65ad\u8868\u7684\u5143\u6570\u636e\u4fe1\u606f\u3002","title":"Discover Table Schema"},{"location":"datasources/mysql/","text":"MySQL\u662f\u4e00\u4e2a\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\uff0c\u5173\u7cfb\u6570\u636e\u5e93\u5c06\u6570\u636e\u4fdd\u5b58\u5728\u4e0d\u540c\u7684\u8868\u4e2d\uff0c\u800c\u4e0d\u662f\u5c06\u6240\u6709\u6570\u636e\u653e\u5728\u4e00\u4e2a\u5927\u4ed3\u5e93\u5185\uff0c\u8fd9\u6837\u5c31\u589e\u52a0\u4e86\u901f\u5ea6\u5e76\u63d0\u9ad8\u4e86\u7075\u6d3b\u6027\u3002MySQL\u662fXSQL\u652f\u6301\u7684\u6570\u636e\u6e90\u4e4b\u4e00\u3002\u672c\u8282\u5c06\u5bf9MySQL\u63a5\u5165XSQL\u7684\u5b89\u88c5\u3001\u914d\u7f6e\u3001\u8fd0\u884c\u4f5c\u7b80\u5355\u7684\u4ecb\u7ecd\u3002 Installation \u200b XSQL\u901a\u8fc7JDBC\u8bbf\u95eeMySQL\u6570\u636e\u5e93\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u4efb\u4f55\u5b89\u88c5\u3002\u5bf9\u4e8e\u60f3\u8981\u4e86\u89e3MySQL\u7684\u7528\u6237\u8bf7\u67e5\u9605 MySQL\u5b98\u7f51 \u3002 MySQL Configuration MySQL\u53c2\u6570\u914d\u7f6e\u7ee7\u627f\u81eaXSQL,\u901a\u7528\u7684\u914d\u7f6e\u4fe1\u606f\u8bf7\u67e5\u770b Configurations \uff0c\u4ee5\u4e0b\u8868\u4e2d\u4e3aMySQL\u72ec\u6709\u7684\u914d\u7f6e\uff1a Property Name Default Meaning spark.xsql.datasource.$dataSource.partitionConf None \u5728\u975e\u4e0b\u63a8\u60c5\u51b5\u4e0b\u7528\u4e8e\u6307\u5b9aMySQL\u6570\u636e\u6e90\u7684Database\u4e2dTable\u7684\u5206\u533a\u4fe1\u606f spark.xsql.datasource.$dataSource.showSchemaDatabase false \u7528\u4e8e\u63a7\u5236\u662f\u5426\u663e\u793aMySQL\u81ea\u5e26\u7684\u4fe1\u606f\u6570\u636e\u5e93information_schema.\u9ed8\u8ba4\u4e3a\u4e0d\u663e\u793a spark.xsql.datasource.$dataSource.pushdown.considerRows true \u5728\u8bbe\u7f6e\u6570\u636e\u6e90\u4e0b\u63a8\u7684\u60c5\u51b5\u4e0b\uff0c\u7528\u4e8e\u63a7\u5236\u662f\u5426\u6839\u636e\u8868\u7684\u884c\u6570\uff08\u8868\u7684\u884c\u6570\u4eceinformation_schema\u5e93\u4e2d\u83b7\u53d6\uff0c\u4e3a\u8fd1\u4f3c\u503c\uff09\u6765\u51b3\u5b9a\u4e0b\u63a8\u6267\u884c\u3002 spark.xsql.datasource.$dataSource.pushdown.considerIndex true \u5728\u8bbe\u7f6e\u6570\u636e\u6e90\u4e0b\u63a8\u7684\u60c5\u51b5\u4e0b\uff0c\u7528\u4e8e\u63a7\u5236\u662f\u5426\u6839\u636e\u8868\u7684\u7d22\u5f15\u4fe1\u606f\u6765\u51b3\u5b9a\u4e0b\u63a8\u6267\u884c\u3002\u76ee\u524d\u4ec5\u7528\u4e8e\u591a\u8868\u8fde\u63a5\u7684\u60c5\u51b5\u3002 \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2aMySQL\u63a5\u5165XSQL\u7684\u914d\u7f6e\u793a\u4f8b\uff1a spark.xsql.datasources mysql spark.xsql.default.datasource mysql spark.xsql.default.database mysqltest spark.xsql.datasource.mysql.type mysql spark.xsql.datasource.mysql.url jdbc:mysql://10.142.97.177:2336 spark.xsql.datasource.mysql.user mysqltest spark.xsql.datasource.mysql.password 37ec19604101cd8a spark.xsql.datasource.mysql.version 5.6.19 spark.xsql.datasource.mysql.pushdown true spark.xsql.datasource.mysql.isShowSchemaDatabase false spark.xsql.datasource.mysql.partitionConf mysql-tablePartition.conf spark.xsql.datasource.mysql.whitelist mysql-whitelist.json partitionConf \u8868\u683c\u7684\u5206\u533a\u4fe1\u606f\u662f\u901a\u8fc7json\u683c\u5f0f\u7684\u914d\u7f6e\u6587\u4ef6\u8fdb\u884c\u914d\u7f6e\u7684\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684mysql-tablePartition.conf\u7684\u914d\u7f6e\u5185\u5bb9\u3002\u5efa\u8bae\u5728\u7f16\u8f91\u8be5conf\u6587\u4ef6\u65f6\u4f7f\u7528 JSON\u7f16\u8f91\u5668 \u907f\u514d\u4f4e\u7ea7\u9519\u8bef\u3002 { mysqltest :[ { table : geonames , partitionColumn : id , lowerBound : 38225 , upperBound : 11903131 , numPartitions : 10 } ] } \u4ee5\u4e0a\u4f8b\u5b50\u4e2d\uff0cmysqltest\u4e3a \u6570\u636e\u5e93\u540d \uff0c\u7528\u6237\u53ef\u5728\u6b64\u4f4d\u7f6e\u81ea\u884c\u6307\u5b9a\u81ea\u5df1\u7684\u6570\u636e\u5e93\u540d\u3002\u4ee5\u4e0b\u8868\u683c\u4e3a\u5206\u533a\u4fe1\u606f\u7684\u5404\u5b57\u6bb5\u7684\u5177\u4f53\u8bf4\u660e\uff1a Name Meaning table \u8868\u540d partitionColumn \u7528\u4e8e\u5206\u533a\u7684\u5217\u540d\uff0c\u4e00\u822c\u6700\u597d\u662f\u8868\u7684\u7d22\u5f15\u5b57\u6bb5\uff0c\u4e14\u8981\u6c42\u4e3a\u5b57\u6bb5\u7c7b\u578b\u4e3a\u6570\u5b57\uff0c\u5e76\u6700\u597d\u662f\u8fde\u7eed\u7684\uff0c\u8fd9\u6837\u5206\u533a\u624d\u4e0d\u4f1a\u6570\u636e\u503e\u659c lowerBound \u7528\u4e8e\u5206\u533a\u7684\u5217\u7684\u4e0b\u9650 upperBound \u7528\u4e8e\u5206\u533a\u7684\u5217\u7684\u4e0a\u9650 numPartitions \u5206\u533a\u6570\uff0c\u6570\u503c\u5e94\u8be5\u5c0f\u4e8e\u7b49\u4e8eupperBound-lowerBound Note \u76ee\u524d\u4ec5\u652f\u6301partitionColumn\u7684\u6570\u636e\u7c7b\u578b\u4e3along\u578b\uff0clowerBound\u548cupperBound\u7684\u503c\u53ef\u81ea\u884c\u67e5\u8be2\u6570\u636e\u5e93\u3002\u5982\u6709\u5206\u533a\u5217\u4e3a\u5176\u4ed6\u7c7b\u578b\u7684\u9700\u8981\uff0c\u8bf7\u8054\u7cfb\u5f00\u53d1\u4eba\u5458\u3002 Execution \u200b MySQL\u63a5\u5165XSQL\u652f\u6301 Common Commands \u4e2d\u4ecb\u7ecd\u7684\u901a\u7528\u539f\u5219\u3002\u5728XSQL\u4e2d\u521b\u5efa\u3001\u5220\u9664\u3001\u4fee\u6539MySQL\u8868\u7684\u65b9\u5f0f\u4e0e\u76f4\u63a5\u5728MySQL\u4e2d\u7684\u64cd\u4f5c\u65b9\u5f0f\u76f8\u540c\uff0c\u4f46\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\u521b\u5efa\u8868\u65f6\u9700\u8981\u5728\u672b\u5c3e\u52a0\u4e0ausing mysql\u6765\u7533\u660e\u521b\u5efa\u7684\u662fMySQL\u6570\u636e\u6e90\u7684table\u3002\u4ee5\u4e0b\u5206\u522b\u4e3aXSQL\u4e2dMySQL\u6570\u636e\u6e90\u5b9e\u73b0\u7684DDL\u7684\u793a\u4f8b\uff1a Create MySQL table CREATE TABLE [IF NOT EXISTS] [db_name.]table_name( `col0` int not null auto_increment PRIMARY KEY, `col1` varchar(255), ... ) USING mysql Drop table if exists DROP TABLE IF EXISTS mysqltest.test1 Alter table add/drop/change columns # \u6dfb\u52a0\u8868\u5b57\u6bb5 ALTER TABLE mysqltest.test1 ADD(`col2` datetime\uff0c`col3` bigint DEFAULT 0) # \u4fee\u6539\u8868\u5b57\u6bb5 ALTER TABLE mysqltest.test1 CHANGE `col3` `col4` int # \u5220\u9664\u8868\u5b57\u6bb5 ALTER TABLE mysqltest.test1 DROP column `col2`,DROP `col3 Rename table # \u65b9\u5f0f\u4e00 ALTER TABLE mysqltest.test1 RENAME TO test2 # \u65b9\u5f0f\u4e8c RENAME TABLE Mysqltest.test1 TO test2","title":"MySQL"},{"location":"datasources/mysql/#installation","text":"\u200b XSQL\u901a\u8fc7JDBC\u8bbf\u95eeMySQL\u6570\u636e\u5e93\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u4efb\u4f55\u5b89\u88c5\u3002\u5bf9\u4e8e\u60f3\u8981\u4e86\u89e3MySQL\u7684\u7528\u6237\u8bf7\u67e5\u9605 MySQL\u5b98\u7f51 \u3002","title":"Installation"},{"location":"datasources/mysql/#mysql-configuration","text":"MySQL\u53c2\u6570\u914d\u7f6e\u7ee7\u627f\u81eaXSQL,\u901a\u7528\u7684\u914d\u7f6e\u4fe1\u606f\u8bf7\u67e5\u770b Configurations \uff0c\u4ee5\u4e0b\u8868\u4e2d\u4e3aMySQL\u72ec\u6709\u7684\u914d\u7f6e\uff1a Property Name Default Meaning spark.xsql.datasource.$dataSource.partitionConf None \u5728\u975e\u4e0b\u63a8\u60c5\u51b5\u4e0b\u7528\u4e8e\u6307\u5b9aMySQL\u6570\u636e\u6e90\u7684Database\u4e2dTable\u7684\u5206\u533a\u4fe1\u606f spark.xsql.datasource.$dataSource.showSchemaDatabase false \u7528\u4e8e\u63a7\u5236\u662f\u5426\u663e\u793aMySQL\u81ea\u5e26\u7684\u4fe1\u606f\u6570\u636e\u5e93information_schema.\u9ed8\u8ba4\u4e3a\u4e0d\u663e\u793a spark.xsql.datasource.$dataSource.pushdown.considerRows true \u5728\u8bbe\u7f6e\u6570\u636e\u6e90\u4e0b\u63a8\u7684\u60c5\u51b5\u4e0b\uff0c\u7528\u4e8e\u63a7\u5236\u662f\u5426\u6839\u636e\u8868\u7684\u884c\u6570\uff08\u8868\u7684\u884c\u6570\u4eceinformation_schema\u5e93\u4e2d\u83b7\u53d6\uff0c\u4e3a\u8fd1\u4f3c\u503c\uff09\u6765\u51b3\u5b9a\u4e0b\u63a8\u6267\u884c\u3002 spark.xsql.datasource.$dataSource.pushdown.considerIndex true \u5728\u8bbe\u7f6e\u6570\u636e\u6e90\u4e0b\u63a8\u7684\u60c5\u51b5\u4e0b\uff0c\u7528\u4e8e\u63a7\u5236\u662f\u5426\u6839\u636e\u8868\u7684\u7d22\u5f15\u4fe1\u606f\u6765\u51b3\u5b9a\u4e0b\u63a8\u6267\u884c\u3002\u76ee\u524d\u4ec5\u7528\u4e8e\u591a\u8868\u8fde\u63a5\u7684\u60c5\u51b5\u3002 \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2aMySQL\u63a5\u5165XSQL\u7684\u914d\u7f6e\u793a\u4f8b\uff1a spark.xsql.datasources mysql spark.xsql.default.datasource mysql spark.xsql.default.database mysqltest spark.xsql.datasource.mysql.type mysql spark.xsql.datasource.mysql.url jdbc:mysql://10.142.97.177:2336 spark.xsql.datasource.mysql.user mysqltest spark.xsql.datasource.mysql.password 37ec19604101cd8a spark.xsql.datasource.mysql.version 5.6.19 spark.xsql.datasource.mysql.pushdown true spark.xsql.datasource.mysql.isShowSchemaDatabase false spark.xsql.datasource.mysql.partitionConf mysql-tablePartition.conf spark.xsql.datasource.mysql.whitelist mysql-whitelist.json partitionConf \u8868\u683c\u7684\u5206\u533a\u4fe1\u606f\u662f\u901a\u8fc7json\u683c\u5f0f\u7684\u914d\u7f6e\u6587\u4ef6\u8fdb\u884c\u914d\u7f6e\u7684\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684mysql-tablePartition.conf\u7684\u914d\u7f6e\u5185\u5bb9\u3002\u5efa\u8bae\u5728\u7f16\u8f91\u8be5conf\u6587\u4ef6\u65f6\u4f7f\u7528 JSON\u7f16\u8f91\u5668 \u907f\u514d\u4f4e\u7ea7\u9519\u8bef\u3002 { mysqltest :[ { table : geonames , partitionColumn : id , lowerBound : 38225 , upperBound : 11903131 , numPartitions : 10 } ] } \u4ee5\u4e0a\u4f8b\u5b50\u4e2d\uff0cmysqltest\u4e3a \u6570\u636e\u5e93\u540d \uff0c\u7528\u6237\u53ef\u5728\u6b64\u4f4d\u7f6e\u81ea\u884c\u6307\u5b9a\u81ea\u5df1\u7684\u6570\u636e\u5e93\u540d\u3002\u4ee5\u4e0b\u8868\u683c\u4e3a\u5206\u533a\u4fe1\u606f\u7684\u5404\u5b57\u6bb5\u7684\u5177\u4f53\u8bf4\u660e\uff1a Name Meaning table \u8868\u540d partitionColumn \u7528\u4e8e\u5206\u533a\u7684\u5217\u540d\uff0c\u4e00\u822c\u6700\u597d\u662f\u8868\u7684\u7d22\u5f15\u5b57\u6bb5\uff0c\u4e14\u8981\u6c42\u4e3a\u5b57\u6bb5\u7c7b\u578b\u4e3a\u6570\u5b57\uff0c\u5e76\u6700\u597d\u662f\u8fde\u7eed\u7684\uff0c\u8fd9\u6837\u5206\u533a\u624d\u4e0d\u4f1a\u6570\u636e\u503e\u659c lowerBound \u7528\u4e8e\u5206\u533a\u7684\u5217\u7684\u4e0b\u9650 upperBound \u7528\u4e8e\u5206\u533a\u7684\u5217\u7684\u4e0a\u9650 numPartitions \u5206\u533a\u6570\uff0c\u6570\u503c\u5e94\u8be5\u5c0f\u4e8e\u7b49\u4e8eupperBound-lowerBound Note \u76ee\u524d\u4ec5\u652f\u6301partitionColumn\u7684\u6570\u636e\u7c7b\u578b\u4e3along\u578b\uff0clowerBound\u548cupperBound\u7684\u503c\u53ef\u81ea\u884c\u67e5\u8be2\u6570\u636e\u5e93\u3002\u5982\u6709\u5206\u533a\u5217\u4e3a\u5176\u4ed6\u7c7b\u578b\u7684\u9700\u8981\uff0c\u8bf7\u8054\u7cfb\u5f00\u53d1\u4eba\u5458\u3002","title":"MySQL Configuration"},{"location":"datasources/mysql/#execution","text":"\u200b MySQL\u63a5\u5165XSQL\u652f\u6301 Common Commands \u4e2d\u4ecb\u7ecd\u7684\u901a\u7528\u539f\u5219\u3002\u5728XSQL\u4e2d\u521b\u5efa\u3001\u5220\u9664\u3001\u4fee\u6539MySQL\u8868\u7684\u65b9\u5f0f\u4e0e\u76f4\u63a5\u5728MySQL\u4e2d\u7684\u64cd\u4f5c\u65b9\u5f0f\u76f8\u540c\uff0c\u4f46\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\u521b\u5efa\u8868\u65f6\u9700\u8981\u5728\u672b\u5c3e\u52a0\u4e0ausing mysql\u6765\u7533\u660e\u521b\u5efa\u7684\u662fMySQL\u6570\u636e\u6e90\u7684table\u3002\u4ee5\u4e0b\u5206\u522b\u4e3aXSQL\u4e2dMySQL\u6570\u636e\u6e90\u5b9e\u73b0\u7684DDL\u7684\u793a\u4f8b\uff1a Create MySQL table CREATE TABLE [IF NOT EXISTS] [db_name.]table_name( `col0` int not null auto_increment PRIMARY KEY, `col1` varchar(255), ... ) USING mysql Drop table if exists DROP TABLE IF EXISTS mysqltest.test1 Alter table add/drop/change columns # \u6dfb\u52a0\u8868\u5b57\u6bb5 ALTER TABLE mysqltest.test1 ADD(`col2` datetime\uff0c`col3` bigint DEFAULT 0) # \u4fee\u6539\u8868\u5b57\u6bb5 ALTER TABLE mysqltest.test1 CHANGE `col3` `col4` int # \u5220\u9664\u8868\u5b57\u6bb5 ALTER TABLE mysqltest.test1 DROP column `col2`,DROP `col3 Rename table # \u65b9\u5f0f\u4e00 ALTER TABLE mysqltest.test1 RENAME TO test2 # \u65b9\u5f0f\u4e8c RENAME TABLE Mysqltest.test1 TO test2","title":"Execution"},{"location":"datasources/redis/","text":"Redis\u662f\u4e00\u4e2a\u53ef\u57fa\u4e8e\u5185\u5b58\u4ea6\u53ef\u6301\u4e45\u5316\u7684\u65e5\u5fd7\u578b\u3001Key-Value\u6570\u636e\u5e93\uff0c\u63d0\u4f9b\u9ad8\u6027\u80fd\u7684\u6570\u636e\u7f13\u5b58\u3002 Installation \u7531\u4e8eRedis\u63d0\u4f9b\u4e86Java API\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u4efb\u4f55\u5b89\u88c5\u3002\u5bf9\u4e8e\u60f3\u8981\u4e86\u89e3Jedis\u7684\u7528\u6237\u8bf7\u67e5\u9605 Jedis\u5b98\u65b9\u6587\u6863 \u3002 Configuration Redis\u63a5\u5165XSQL\u7684\u914d\u7f6e\u7ee7\u627f\u4e86 Configurations \u4e2d\u9488\u5bf9\u7279\u5b9a\u6570\u636e\u6e90\u7684type\u3001url\u3001version\u3001pushdown\u3001schemas\u914d\u7f6e\u3002\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2aRedis\u63a5\u5165XSQL\u7684\u914d\u7f6e\u793a\u4f8b\uff1a spark.xsql.datasources redis_ds_name spark.xsql.default.datasource redis_ds_name sprak.xsql.default.database 0 # \u58f0\u660eredis_ds_name\u662f\u4e00\u4e2aRedis\u6570\u636e\u6e90 spark.xsql.datasource.redis_ds_name.type redis # \u914d\u7f6ejedis\u683c\u5f0f\u7684url redis://:$password@$host:$port/[dbnum] spark.xsql.datasource.redis_ds_name.url redis://:xxx@xx.xx.xx.xx:xx # \u914d\u7f6e\u5143\u6570\u636e\u5b58\u50a8\u6587\u4ef6\u540d\u79f0\uff0c\u9700\u8981\u653e\u7f6e\u5728SPARK_CONF_DIR\u4e2d spark.xsql.datasource.redis_ds_name.schemas redis.schemas # version\u4e3a\u9884\u7559\u914d\u7f6e spark.xsql.datasource.redis_ds_name.version 4.0.10 spark.xsql.datasource.redis_ds_name.pushdown true Advanced Configuration xsql\u4e3a\u4e86\u8bbf\u95eeRedis\uff0c\u7528\u5192\u53f7\u5206\u5272\u6bcf\u4e2a\u952e\uff0c\u5f97\u5230\u952e\u7684\u524d\u7f00\u548c\u540e\u7f00\uff0c\u5c06\u4e00\u4e2a\u952e\u503c\u5bf9\u89c6\u4e3a\u8868\u7684\u4e00\u6761\u8bb0\u5f55\uff0c\u5c06\u952e\u7684\u524d\u7f00\u89c6\u4e3a\u8868\u540d\uff0c\u8868\u7684\u5217\u7ed3\u6784\u56fa\u5b9a\u4e3a key \u548c value \uff0ckey\u7684\u5b57\u6bb5\u7c7b\u578b\u56fa\u5b9a\u4e3a string \uff0cvalue\u7684\u5b57\u6bb5\u7c7b\u578b\u53d6\u51b3\u4e8e\u503c\u7c7b\u578b\u3002 Redis\u6982\u5ff5 \u5bf9\u5e94\u7684\u5173\u7cfb\u6570\u636e\u5e93\u6982\u5ff5 \u6570\u636e\u5e93\uff08\u9ed8\u8ba4\u7f16\u53f70-15\uff09 \u6570\u636e\u5e93\u540d \u952e\uff08keyprefix:keysuffix\uff09 \u5b57\u6bb5key \u503c \u5b57\u6bb5value keyprefix \u8868\u540d keysuffix \u8fc7\u6ee4\u5b57\u6bb5suffix \u503c\u7c7b\u578b\uff08hash\u3001list\u3001set\u3001zset\u3001string\uff09 \u5b57\u6bb5value\u7684\u5b57\u6bb5\u7c7b\u578b\uff08string\u3001map\u3001array\uff09 Note list\u503c\u7c7b\u578b\u548cset\u503c\u7c7b\u578b\u8868\u793a\u4e3aspark\u7684ArrayType(StringType) zset\u503c\u7c7b\u578b\u8868\u793a\u4e3aMapType(StringType,DoubleType) string\u503c\u7c7b\u578b\u8868\u793a\u4e3aStringType hash\u503c\u7c7b\u578b\u76f4\u63a5\u8868\u793a\u4e3a\u8bb0\u5f55\uff0chash\u7684\u6bcf\u4e2a\u952e\u4f5c\u4e3a\u4e00\u4e2a\u5b57\u6bb5\uff0c\u5bf9\u5e94\u7684\u503c\u4f5c\u4e3a\u5b57\u6bb5\u503c\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5217\u7ed3\u6784\u4e0d\u518d\u56fa\u5b9a\u4e3a key \u548c value \u3002\u603b\u7ed3\u5982\u4e0b\uff1a \u503c\u7c7b\u578b xsql\u8868\u793a\u7c7b\u578b string StringType list set ArrayType(StringType) zset MapType(StringType,DoubleType) hash \u4e00\u7cfb\u5217\u7c7b\u578b\u53ef\u4ee5\u4e0d\u540c\u7684\u5b57\u6bb5 Note \u5f53\u76f8\u540c\u524d\u7f00\u7684\u952e\uff0c\u503c\u7c7b\u578b\u4e0d\u7edf\u4e00\u65f6\uff0c\u4e0d\u80fd\u4f7f\u7528xsql\u8fdb\u884c\u67e5\u8be2 \u5f53list\u3001set\u3001zset\u3001hash\u51fa\u73b0\u590d\u5408\u5bf9\u8c61\u65f6\uff0c\u5373\u6570\u7ec4\u7684\u6570\u7ec4\u65f6\uff0c\u4e0d\u80fd\u4f7f\u7528xsql\u8fdb\u884c\u67e5\u8be2\u3002 \u5143\u6570\u636e\u914d\u7f6e\u65b9\u6cd5\uff1a Redis\u81ea\u8eab\u6ca1\u6709\u4efb\u4f55\u5143\u6570\u636e\uff0c\u7528\u6237\u5728\u4f7f\u7528xsql\u67e5\u8be2Redis\u4e4b\u524d\uff0c\u9700\u8981\u663e\u5f0f\u7ed9\u51fa\u6570\u636e\u8868\u7684\u5143\u6570\u636e\uff0c\u5177\u4f53\u5305\u62ec\uff1a 1. \u76f4\u63a5\u7f16\u8f91schemas\u6587\u4ef6 redis.schemas\u5b58\u50a8\u7684\u5143\u6570\u636e\u662f\u4ee5\u6570\u636e\u5e93\u4e3a\u7d22\u5f15\u7684json\u5bf9\u8c61\uff0c\u5efa\u8bae\u5728\u7f16\u8f91schemas\u6587\u4ef6\u65f6\u4f7f\u7528 JSON\u7f16\u8f91\u5668 \u907f\u514d\u4f4e\u7ea7\u9519\u8bef\u3002 Examples { 0 :[ { table : RedisSourceExampleTable , fields :[ { name : type \uff0c type : string } ] },{ table : hashTable , fields :[ { name : key , type : string },{ name : name , type : string },{ name : age , type : int } ] },... ], 1 :[ ... ] } Note fields :[ { name : type \uff0c type : string } ] \u4e0a\u9762\u5185\u5bb9\u7b49\u4ef7\u4e8e\u4e0b\u9762\u5185\u5bb9\uff0c\u5c5e\u4e8e\u7b80\u5199 fields :[ { name : key \uff0c type : string },{ name : value , type : string } ] 2. \u81ea\u52a8\u63a8\u65ad\u672a\u6ce8\u518c\u8868\u7684\u5143\u6570\u636e\uff08\u4e0d\u63a8\u8350\uff09 xsql\u53ef\u4ee5\u901a\u8fc7\u5168\u5e93\u626b\u63cf\uff0c\u627e\u5230\u4e00\u4e2a\u4ee5\u8868\u540d\u4e3a\u524d\u7f00\u7684\u952e\uff0c\u83b7\u53d6\u8be5\u952e\u7684\u503c\u7c7b\u578b\uff0c\u4ece\u800c\u63a8\u6d4b\u51fa\u4e00\u4e2a\u672a\u6ce8\u518c\u8868\u7684\u5143\u6570\u636e\u3002\u4f46\u81ea\u52a8\u63a8\u65ad\u65b9\u5f0f\u7f3a\u70b9\u6bd4\u8f83\u660e\u663e\uff1a \u5168\u5e93\u626b\u63cf\u7684\u901f\u5ea6\u7f13\u6162 \u4f7f\u7528\u4efb\u610f\u4e00\u4e2a\u524d\u7f00\u6ee1\u8db3\u8981\u6c42\u7684\u952e\u53bb\u63a8\u6d4b\u5143\u6570\u636e\u7c7b\u578b\uff0c\u7406\u8bba\u4e0a\u662f\u4e0d\u53ef\u9760\u7684 \u56e0\u6b64xsql\u5bf9redis\u5f00\u542f\u81ea\u52a8\u63a8\u65ad\u673a\u5236\uff0c\u53ea\u662f\u4e3a\u4e86\u67e5\u8be2redis\u4e2d\u7684\u4e34\u65f6\u8868\uff0c\u4ee5\u53ca\u5e94\u5bf9\u67d0\u4e9b\u4fee\u6539\u5e76\u91cd\u65b0\u52a0\u8f7dschemas\u6587\u4ef6\u4ee3\u4ef7\u8f83\u5927\u7684\u60c5\u51b5\u3002 Execution \u53ef\u4e0b\u63a8\u7684select\u8bed\u53e5 \u70b9\u67e5\u8be2 key = key in suffix = suffix in \u83b7\u53d6\u7279\u5b9a\u952e \u5bf9\u5e94\u7684\u503c Examples use redis.`0`; select * from `360:redis` where key = '360:redis:monitor'; key value 360:redis:monitor 1539853184 select * where key = '360:redis:monitor'; key value 360:redis:monitor 1539853364 select * where key in ('360:redis:monitor','360:redis:save') key value 360:redis:monitor 1539854444 360:redis:save idobi select * from `360:redis` where suffix = 'monitor'; key value 360:redis:monitor 1539854624 select * from `360:redis` where suffix in ('monitor','save'); key value 360:redis:monitor 1539854684 360:redis:save idobi \u9650\u5236value\u8303\u56f4 range between and \uff08list\u3001zset\uff09 \u83b7\u53d6\u5750\u6807\u4ecb\u4e8e\u7279\u5b9a\u533a\u95f4\u7684\u503c Examples select * from `redis-list`; key value redis-list:1 [ 1 , 123 , 231 , 231 ] redis-list:2 [ row3 , row2 , list1 ] select * from `redis-list` where range between 0 and -1; key value redis-list:1 [ 1 , 123 , 231 , 231 ] redis-list:2 [ row3 , row2 , list1 ] select * from `redis-list` where range between 1 and 2; key value redis-list:1 [ 123 , 231 ] redis-list:2 [ row2 , list1 ] score between and \uff08zset\uff09 \u83b7\u53d6score\u4ecb\u4e8e\u7279\u5b9a\u533a\u95f4\u7684\u503c Examples select * where key = 'redis-zset:2' and score between 20 and 1000; key value redis-zset:2 { 12 :700.0} \u4f7f\u7528Spark\u51fd\u6570\u5904\u7406value \u5bf9\u4e8e\u503c\u7c7b\u578b\u4e3alist\u548cset\u7684\u8868\uff0c\u5efa\u8bae\u4f7f\u7528 sort_array \u3001 array_contains \u7b49\u51fd\u6570 \u5bf9\u4e8e\u503c\u7c7b\u578b\u4e3azset\u7684\u8868\uff0c\u5efa\u8bae\u4f7f\u7528 map_values \u7b49\u51fd\u6570 \u5bf9\u4e8e\u503c\u7c7b\u578b\u4e3astring\u7684\u8868\uff0c\u5efa\u8bae\u4f7f\u7528 regexp_extract \u7b49\u51fd\u6570 \u5bf9\u4e8e\u503c\u7c7b\u578b\u4e3ajson string\u7684\u8868\uff0c\u5efa\u8bae\u4f7f\u7528 json_tuple \u3001 get_json_object \u3001 from_json \u3001 to_json \u7b49\u51fd\u6570 Spark\u63d0\u4f9b\u7684\u6240\u6709\u51fd\u6570\u89c1 \u94fe\u63a5 \u3002","title":"Redis"},{"location":"datasources/redis/#installation","text":"\u7531\u4e8eRedis\u63d0\u4f9b\u4e86Java API\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u4efb\u4f55\u5b89\u88c5\u3002\u5bf9\u4e8e\u60f3\u8981\u4e86\u89e3Jedis\u7684\u7528\u6237\u8bf7\u67e5\u9605 Jedis\u5b98\u65b9\u6587\u6863 \u3002","title":"Installation"},{"location":"datasources/redis/#configuration","text":"Redis\u63a5\u5165XSQL\u7684\u914d\u7f6e\u7ee7\u627f\u4e86 Configurations \u4e2d\u9488\u5bf9\u7279\u5b9a\u6570\u636e\u6e90\u7684type\u3001url\u3001version\u3001pushdown\u3001schemas\u914d\u7f6e\u3002\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2aRedis\u63a5\u5165XSQL\u7684\u914d\u7f6e\u793a\u4f8b\uff1a spark.xsql.datasources redis_ds_name spark.xsql.default.datasource redis_ds_name sprak.xsql.default.database 0 # \u58f0\u660eredis_ds_name\u662f\u4e00\u4e2aRedis\u6570\u636e\u6e90 spark.xsql.datasource.redis_ds_name.type redis # \u914d\u7f6ejedis\u683c\u5f0f\u7684url redis://:$password@$host:$port/[dbnum] spark.xsql.datasource.redis_ds_name.url redis://:xxx@xx.xx.xx.xx:xx # \u914d\u7f6e\u5143\u6570\u636e\u5b58\u50a8\u6587\u4ef6\u540d\u79f0\uff0c\u9700\u8981\u653e\u7f6e\u5728SPARK_CONF_DIR\u4e2d spark.xsql.datasource.redis_ds_name.schemas redis.schemas # version\u4e3a\u9884\u7559\u914d\u7f6e spark.xsql.datasource.redis_ds_name.version 4.0.10 spark.xsql.datasource.redis_ds_name.pushdown true","title":"Configuration"},{"location":"datasources/redis/#advanced-configuration","text":"xsql\u4e3a\u4e86\u8bbf\u95eeRedis\uff0c\u7528\u5192\u53f7\u5206\u5272\u6bcf\u4e2a\u952e\uff0c\u5f97\u5230\u952e\u7684\u524d\u7f00\u548c\u540e\u7f00\uff0c\u5c06\u4e00\u4e2a\u952e\u503c\u5bf9\u89c6\u4e3a\u8868\u7684\u4e00\u6761\u8bb0\u5f55\uff0c\u5c06\u952e\u7684\u524d\u7f00\u89c6\u4e3a\u8868\u540d\uff0c\u8868\u7684\u5217\u7ed3\u6784\u56fa\u5b9a\u4e3a key \u548c value \uff0ckey\u7684\u5b57\u6bb5\u7c7b\u578b\u56fa\u5b9a\u4e3a string \uff0cvalue\u7684\u5b57\u6bb5\u7c7b\u578b\u53d6\u51b3\u4e8e\u503c\u7c7b\u578b\u3002 Redis\u6982\u5ff5 \u5bf9\u5e94\u7684\u5173\u7cfb\u6570\u636e\u5e93\u6982\u5ff5 \u6570\u636e\u5e93\uff08\u9ed8\u8ba4\u7f16\u53f70-15\uff09 \u6570\u636e\u5e93\u540d \u952e\uff08keyprefix:keysuffix\uff09 \u5b57\u6bb5key \u503c \u5b57\u6bb5value keyprefix \u8868\u540d keysuffix \u8fc7\u6ee4\u5b57\u6bb5suffix \u503c\u7c7b\u578b\uff08hash\u3001list\u3001set\u3001zset\u3001string\uff09 \u5b57\u6bb5value\u7684\u5b57\u6bb5\u7c7b\u578b\uff08string\u3001map\u3001array\uff09 Note list\u503c\u7c7b\u578b\u548cset\u503c\u7c7b\u578b\u8868\u793a\u4e3aspark\u7684ArrayType(StringType) zset\u503c\u7c7b\u578b\u8868\u793a\u4e3aMapType(StringType,DoubleType) string\u503c\u7c7b\u578b\u8868\u793a\u4e3aStringType hash\u503c\u7c7b\u578b\u76f4\u63a5\u8868\u793a\u4e3a\u8bb0\u5f55\uff0chash\u7684\u6bcf\u4e2a\u952e\u4f5c\u4e3a\u4e00\u4e2a\u5b57\u6bb5\uff0c\u5bf9\u5e94\u7684\u503c\u4f5c\u4e3a\u5b57\u6bb5\u503c\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5217\u7ed3\u6784\u4e0d\u518d\u56fa\u5b9a\u4e3a key \u548c value \u3002\u603b\u7ed3\u5982\u4e0b\uff1a \u503c\u7c7b\u578b xsql\u8868\u793a\u7c7b\u578b string StringType list set ArrayType(StringType) zset MapType(StringType,DoubleType) hash \u4e00\u7cfb\u5217\u7c7b\u578b\u53ef\u4ee5\u4e0d\u540c\u7684\u5b57\u6bb5 Note \u5f53\u76f8\u540c\u524d\u7f00\u7684\u952e\uff0c\u503c\u7c7b\u578b\u4e0d\u7edf\u4e00\u65f6\uff0c\u4e0d\u80fd\u4f7f\u7528xsql\u8fdb\u884c\u67e5\u8be2 \u5f53list\u3001set\u3001zset\u3001hash\u51fa\u73b0\u590d\u5408\u5bf9\u8c61\u65f6\uff0c\u5373\u6570\u7ec4\u7684\u6570\u7ec4\u65f6\uff0c\u4e0d\u80fd\u4f7f\u7528xsql\u8fdb\u884c\u67e5\u8be2\u3002","title":"Advanced Configuration"},{"location":"datasources/redis/#_1","text":"Redis\u81ea\u8eab\u6ca1\u6709\u4efb\u4f55\u5143\u6570\u636e\uff0c\u7528\u6237\u5728\u4f7f\u7528xsql\u67e5\u8be2Redis\u4e4b\u524d\uff0c\u9700\u8981\u663e\u5f0f\u7ed9\u51fa\u6570\u636e\u8868\u7684\u5143\u6570\u636e\uff0c\u5177\u4f53\u5305\u62ec\uff1a","title":"\u5143\u6570\u636e\u914d\u7f6e\u65b9\u6cd5\uff1a"},{"location":"datasources/redis/#1-schemas","text":"redis.schemas\u5b58\u50a8\u7684\u5143\u6570\u636e\u662f\u4ee5\u6570\u636e\u5e93\u4e3a\u7d22\u5f15\u7684json\u5bf9\u8c61\uff0c\u5efa\u8bae\u5728\u7f16\u8f91schemas\u6587\u4ef6\u65f6\u4f7f\u7528 JSON\u7f16\u8f91\u5668 \u907f\u514d\u4f4e\u7ea7\u9519\u8bef\u3002 Examples { 0 :[ { table : RedisSourceExampleTable , fields :[ { name : type \uff0c type : string } ] },{ table : hashTable , fields :[ { name : key , type : string },{ name : name , type : string },{ name : age , type : int } ] },... ], 1 :[ ... ] } Note fields :[ { name : type \uff0c type : string } ] \u4e0a\u9762\u5185\u5bb9\u7b49\u4ef7\u4e8e\u4e0b\u9762\u5185\u5bb9\uff0c\u5c5e\u4e8e\u7b80\u5199 fields :[ { name : key \uff0c type : string },{ name : value , type : string } ]","title":"1. \u76f4\u63a5\u7f16\u8f91schemas\u6587\u4ef6"},{"location":"datasources/redis/#2","text":"xsql\u53ef\u4ee5\u901a\u8fc7\u5168\u5e93\u626b\u63cf\uff0c\u627e\u5230\u4e00\u4e2a\u4ee5\u8868\u540d\u4e3a\u524d\u7f00\u7684\u952e\uff0c\u83b7\u53d6\u8be5\u952e\u7684\u503c\u7c7b\u578b\uff0c\u4ece\u800c\u63a8\u6d4b\u51fa\u4e00\u4e2a\u672a\u6ce8\u518c\u8868\u7684\u5143\u6570\u636e\u3002\u4f46\u81ea\u52a8\u63a8\u65ad\u65b9\u5f0f\u7f3a\u70b9\u6bd4\u8f83\u660e\u663e\uff1a \u5168\u5e93\u626b\u63cf\u7684\u901f\u5ea6\u7f13\u6162 \u4f7f\u7528\u4efb\u610f\u4e00\u4e2a\u524d\u7f00\u6ee1\u8db3\u8981\u6c42\u7684\u952e\u53bb\u63a8\u6d4b\u5143\u6570\u636e\u7c7b\u578b\uff0c\u7406\u8bba\u4e0a\u662f\u4e0d\u53ef\u9760\u7684 \u56e0\u6b64xsql\u5bf9redis\u5f00\u542f\u81ea\u52a8\u63a8\u65ad\u673a\u5236\uff0c\u53ea\u662f\u4e3a\u4e86\u67e5\u8be2redis\u4e2d\u7684\u4e34\u65f6\u8868\uff0c\u4ee5\u53ca\u5e94\u5bf9\u67d0\u4e9b\u4fee\u6539\u5e76\u91cd\u65b0\u52a0\u8f7dschemas\u6587\u4ef6\u4ee3\u4ef7\u8f83\u5927\u7684\u60c5\u51b5\u3002","title":"2. \u81ea\u52a8\u63a8\u65ad\u672a\u6ce8\u518c\u8868\u7684\u5143\u6570\u636e\uff08\u4e0d\u63a8\u8350\uff09"},{"location":"datasources/redis/#execution","text":"","title":"Execution"},{"location":"datasources/redis/#select","text":"","title":"\u53ef\u4e0b\u63a8\u7684select\u8bed\u53e5"},{"location":"datasources/redis/#sparkvalue","text":"\u5bf9\u4e8e\u503c\u7c7b\u578b\u4e3alist\u548cset\u7684\u8868\uff0c\u5efa\u8bae\u4f7f\u7528 sort_array \u3001 array_contains \u7b49\u51fd\u6570 \u5bf9\u4e8e\u503c\u7c7b\u578b\u4e3azset\u7684\u8868\uff0c\u5efa\u8bae\u4f7f\u7528 map_values \u7b49\u51fd\u6570 \u5bf9\u4e8e\u503c\u7c7b\u578b\u4e3astring\u7684\u8868\uff0c\u5efa\u8bae\u4f7f\u7528 regexp_extract \u7b49\u51fd\u6570 \u5bf9\u4e8e\u503c\u7c7b\u578b\u4e3ajson string\u7684\u8868\uff0c\u5efa\u8bae\u4f7f\u7528 json_tuple \u3001 get_json_object \u3001 from_json \u3001 to_json \u7b49\u51fd\u6570 Spark\u63d0\u4f9b\u7684\u6240\u6709\u51fd\u6570\u89c1 \u94fe\u63a5 \u3002","title":"\u4f7f\u7528Spark\u51fd\u6570\u5904\u7406value"},{"location":"getting_started/Getting_Started/","text":"XSQL\u662f\u4e00\u6b3e\u4f4e\u95e8\u69db\u3001\u66f4\u7a33\u5b9a\u7684\u5206\u5e03\u5f0f\u67e5\u8be2\u5f15\u64ce\u3002\u5b83\u5141\u8bb8\u4f60\u5feb\u901f\u3001\u8fd1\u5b9e\u65f6\u5730\u67e5\u8be2\u5927\u91cf\u6570\u636e\u3002\u5bf9\u4e8e\u4e00\u4e9b\u6570\u636e\u6e90\uff08\u4f8b\u5982\uff1aElasticsearch\u3001MongoDB\u3001Druid\u7b49\uff09\uff0c\u4ed6\u53ef\u4ee5\u5927\u5e45\u5730\u964d\u4f4e\u5b66\u4e60\u66f2\u7ebf\uff0c\u5e76\u8282\u7701\u4eba\u529b\u6210\u672c\u3002\u9664Hive\u5916\uff0c\u6bcf\u79cd\u6570\u636e\u6e90\u90fd\u652f\u6301\u9664\u5b50\u67e5\u8be2\u5916\u7684\u4e0b\u63a8\u6267\u884c\u4f18\u5316\u3002\u7528\u6237\u6709\u65f6\u5e0c\u671b\u5c06\u4f4d\u4e8e\u4e0d\u540c\u6570\u636e\u6e90\u4e0a\u7684\u6570\u636e\u5173\u8054\u8d77\u6765\u8fdb\u884c\u67e5\u8be2\uff0c\u4f46\u662f\u7531\u4e8e\u5404\u79cd\u6570\u636e\u6e90\u662f\u5f02\u6784\u7684\u4e14\u4e00\u4e9b\u6570\u636e\u6e90\u4e0d\u652f\u6301SQL\u6216\u8005\u652f\u6301\u7684SQL\u8bed\u6cd5\u975e\u5e38\u6709\u9650\uff0c\u56e0\u6b64\u4f20\u7edf\u4e92\u8054\u7f51\u516c\u53f8\u7684\u505a\u6cd5\u662f\uff0c\u5c06\u4e0d\u540c\u7684\u6570\u636e\u540c\u6b65\u5230\u7edf\u4e00\u7684\u5b58\u50a8\u4ecb\u8d28\u4e2d\uff0c\u518d\u8fdb\u884cOLAP\u7684\u67e5\u8be2\u3002\u6570\u636e\u540c\u6b65\u7684\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u9762\u4e34\u6570\u636e\u8fc1\u79fb\u3001\u4e3b\u4ece\u540c\u6b65\u3001\u7f51\u7edc\u5e26\u5bbd\u7b49\u8bf8\u591a\u56f0\u96be\u548c\u6311\u6218\uff0c\u800c\u4e14\u9700\u8981\u6d6a\u8d39\u5927\u91cf\u7684\u4eba\u529b\u3001\u7269\u529b\u53ca\u65f6\u95f4\uff0c\u65e0\u6cd5\u6ee1\u8db3\u5927\u6570\u636e\u4ea7\u54c1\u5f53\u524d\u9636\u6bb5\u5bf9\u4e8e\u8fd1\u5b9e\u65f6\u751a\u81f3\u51c6\u5b9e\u65f6\u7684\u573a\u666f\u3002\u901a\u8fc7XSQL\u4f60\u5c06\u53ef\u4ee5\u907f\u514d\u6570\u636e\u8fc1\u79fb\u548c\u65f6\u95f4\u6d6a\u8d39\uff0c\u66f4\u52a0\u4e13\u6ce8\u4e8e\u4e1a\u52a1\u672c\u8eab\u3002XSQL\u53ef\u4ee5\u901a\u8fc7\u4e0b\u63a8\u3001\u5e76\u884c\u8ba1\u7b97\u3001\u8fed\u4ee3\u8ba1\u7b97\u7b49\u5e95\u5c42\u652f\u6491\u6280\u672f\uff0c\u5bf9\u5404\u79cd\u6570\u636e\u6e90\u7684\u67e5\u8be2\u52a0\u901f\u3002 \u4ee5\u4e0b\u5217\u51faXSQL\u9002\u7528\u7684\u7528\u4f8b\uff1a \u5c0f\u5f20\u662f\u65b0\u6765\u6570\u636e\u90e8\u95e8\u7684\u793e\u62db\u751f\uff0c\u6709\u4e94\u5e74\u7684\u6570\u636e\u5f00\u53d1\u7ecf\u9a8c\u3002\u5728\u4e4b\u524d\u7684\u516c\u53f8\u7ecf\u5e38\u8fdb\u884c\u6570\u636e\u7edf\u8ba1\u7c7b\u7684\u5de5\u4f5c\uff0c\u901a\u8fc7SQL\u8bed\u53e5\u5bf9Hive\u548cMySQL\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u68c0\u7d22\u548c\u52a0\u5de5\uff0c\u4f7f\u5f97\u672c\u4eba\u5bf9\u4e8eSQL\u8bed\u6cd5\u975e\u5e38\u719f\u6089\u3002\u7531\u4e8e\u5f53\u524d\u4ea7\u54c1\u6709\u4ece\u6d77\u91cf\u6570\u636e\u4e2d\u6309\u7167\u5173\u952e\u5b57\u8fdb\u884c\u641c\u7d22\u7684\u9700\u6c42\uff0c\u56e0\u6b64\u90e8\u95e8\u51b3\u5b9a\u4f7f\u7528Elasticsearch\u3002\u5c0f\u5f20\u5728Elasticsearch\u9762\u524d\uff0c\u5b8c\u5168\u662f\u4e00\u4e2a\u5c0f\u767d\u3002\u5c0f\u5f20\u5728\u521d\u6b65\u67e5\u9605\u4e86Elasticsearch\u7684\u4ecb\u7ecd\u540e\uff0c\u611f\u89c9\u65e0\u6240\u9002\u4ece\u3002 A\u90e8\u95e8\u7684\u4e1a\u52a1\u6570\u636e\u5927\u591a\u90fd\u7ef4\u62a4\u5728\u4e00\u4e9bMySQL\u8868\u4e2d\uff0c\u5176\u4e2d\u6709\u4e00\u5f20customer\u8868\u7528\u6765\u8bb0\u5f55\u7528\u6237\u7684\u57fa\u672c\u4fe1\u606f\uff08\u4f8b\u5982\uff1a\u7528\u6237ID\u3001\u6635\u79f0\u3001\u5e74\u9f84\u3001\u6027\u522b\u3001\u4f4f\u5740\u7b49\uff09\u3002\u540c\u65f6\uff0c\u4e00\u4e9b\u535a\u5ba2\u6587\u6863\u7684\u6570\u636e\u5374\u5b58\u50a8\u5728MongoDB\u7684blogs\u96c6\u5408\u4e2dblogs\u96c6\u5408\u7684_id\u5b57\u6bb5\u91c7\u7528\u4e86\u7528\u6237ID\u3002\u90e8\u95e8\u4ea7\u54c1\u65b0\u589e\u7684\u9700\u6c42\u662f\uff0c\u5728\u7528\u6237\u7684\u201c\u4e2a\u4eba\u4e2d\u5fc3\u201d\u5c55\u793a\u7528\u6237\u7684\u535a\u5ba2\u5217\u8868\uff0c\u5217\u8868\u53ea\u663e\u793a\u535a\u5ba2\u6807\u9898\u3001\u53d1\u5e03\u65f6\u95f4\u3001\u535a\u5ba2\u6458\u8981\u7b49\u4fe1\u606f\u3002\u5bf9\u4e8e\u5de5\u7a0b\u5e08\u6765\u8bf4\uff0c\u5982\u679c\u80fd\u76f4\u63a5\u5c06customer\u8868\u548cblogs\u96c6\u5408\u8fdb\u884c\u5173\u8054\u67e5\u8be2\u5c31\u597d\u4e86\u3002\u4e8b\u60c5\u770b\u4f3c\u975e\u5e38ease\uff0c\u8fd9\u4e5f\u662fXSQL\u7684\u4f7f\u7528\u573a\u666f\u3002 \u8001\u738b\u662f\u6570\u636e\u90e8\u95e8\u7684\u8001\u5458\u5de5\uff0c\u5404\u79cd\u5927\u6570\u636e\u5de5\u5177\u90fd\u4f7f\u7528\u7684\u6e38\u5203\u6709\u4f59\u3002\u8001\u738b\u7ecf\u5e38\u4f7f\u7528Spark\u7684API\u6765\u7f16\u5199\u4ece\u5404\u79cd\u5f02\u6784\u6570\u636e\u6e90\u8bfb\u5199\u6570\u636e\u7684\u4f5c\u4e1a\uff0c\u7531\u4e8e\u8fd9\u79cd\u5de5\u4f5c\u91cd\u590d\u5ea6\u5f88\u9ad8\uff0c\u8001\u738b\u611f\u89c9\u5bf9\u8fd9\u95e8\u6280\u672f\u7684\u53cd\u590d\u4f7f\u7528\u975e\u5e38\u67af\u71e5\uff0c\u800c\u4e14\u65f6\u95f4\u6210\u672c\u4e5f\u8f83\u9ad8\uff0c\u56e0\u6b64\u4ed6\u5e0c\u671b\u80fd\u6709\u4e00\u79cd\u65b9\u5f0f\u53ef\u4ee5\u6539\u5584\u73b0\u5728\u7684\u5de5\u4f5c\u3002 B\u90e8\u95e8\u662f\u4e00\u4e2a\u5bf9\u6570\u636e\u5e93\u6280\u672f\u975e\u5e38\u53d1\u70e7\u7684\u90e8\u95e8\uff0c\u76ee\u524d\u7684\u5404\u4e2a\u673a\u5668\u4e0a\u90fd\u5b89\u88c5\u4e86Hive\u3001MySQL\u3001Redis\u3001MongoDB\u7b49\u4e00\u7cfb\u5217\u5ba2\u6237\u7aef\u3002\u5927\u5bb6\u65e5\u5e38\u5f00\u53d1\u7684\u4efb\u52a1\u4e5f\u90fd\u90e8\u7f72\u5728\u8fd9\u4e9b\u673a\u5668\u4e0a\uff0c\u5bfc\u81f4\u8fd9\u4e9b\u673a\u5668\u7684CPU\u3001\u5185\u5b58\u3001\u78c1\u76d8\u7b49\u8d44\u6e90\u5e38\u5e38\u51fa\u73b0\u62a5\u8b66\u3002\u4f7f\u7528XSQL\u53ef\u4ee5\u907f\u514dHive\u4e4b\u5916\u7684\u5404\u79cd\u6570\u636e\u5e93\u5ba2\u6237\u7aef\u7684\u5b89\u88c5\u3002 C\u90e8\u95e8\u5bf9Druid\u6709\u5e7f\u6cdb\u4f7f\u7528\uff0c\u901a\u8fc7\u9884\u8ba1\u7b97\u52a0\u5feb\u4e86\u67e5\u8be2\u6548\u7387\u3002Web\u7aef\u9700\u8981\u5c55\u793aDruid\u7ed3\u679c\u53ca\u5176\u914d\u7f6e\u4fe1\u606f\uff0c\u4f46\u662f\u914d\u7f6e\u4fe1\u606f\u5b58\u50a8\u5728MySQL\u4e2d\u3002Web\u7aef\u5bf9\u67e5\u8be2\u5c55\u793a\u6709\u6781\u9ad8\u7684\u54cd\u5e94\u9700\u6c42\uff0c\u56e0\u6b64C\u90e8\u95e8\u5229\u7528XSQL\u5c06Druid\u67e5\u8be2\u7ed3\u679c\u5bfc\u5165\u5230MySQL\u4e2d\uff0c\u5e76\u901a\u8fc7MySQL\u8868\u4e4b\u95f4\u7684\u5173\u7cfb\u8fdb\u884c\u5c55\u793a\u3002 \u540e\u9762\uff0c\u6b64\u6587\u6863\u5c06\u5e26\u9886\u5927\u5bb6\u9010\u6b65\u4e86\u89e3\u548c\u5b66\u4e60XSQL\u3002\u9996\u5148\uff0c\u4f1a\u4ecb\u7ecdXSQL\u4e2d\u7684\u57fa\u672c\u6982\u5ff5\u548c\u67b6\u6784\u8bbe\u8ba1\u3002\u7136\u540e\u544a\u8bc9\u5927\u5bb6\u5982\u4f55\u914d\u7f6e\u5404\u79cd\u4e0d\u540c\u7684\u6570\u636e\u6e90\uff0c\u5e76\u8fdb\u884c\u6df1\u5165\u7684\u5b9a\u5236\u3002\u6700\u540e\uff0c\u6211\u4eec\u5c06\u5c55\u793a\u5982\u4f55\u4f7f\u7528XSQL\u5bf9\u5404\u79cd\u6570\u636e\u6e90\u8fdb\u884c\u67e5\u8be2\u3002 Basic Concepts \u672c\u6587\u6863\u4ecb\u7ecdXSQL\u4e2d\u7684\u4e00\u4e9b\u6838\u5fc3\u6982\u5ff5\u3002\u7406\u89e3\u8fd9\u4e9b\u6982\u5ff5\u5c06\u6709\u52a9\u4e8e\u60a8\u66f4\u52a0\u8f7b\u677e\u7684\u5b66\u4e60\u548c\u4f7f\u7528XSQL\u3002 Near Realtime\uff08\u8fd1\u5b9e\u65f6\uff09 XSQL\u662f\u4e00\u4e2a\u8fd1\u5b9e\u65f6\u7684\u67e5\u8be2\u3001\u8ba1\u7b97\u5f15\u64ce\u3002\u5f53\u7528\u6237\u6267\u884c\u4e00\u6761SQL\u65f6\uff0c\u6839\u636e\u6570\u636e\u91cf\u3001SQL\u590d\u6742\u5ea6\u3001\u662f\u5426\u4e0b\u63a8\u3001\u8d44\u6e90\u5927\u5c0f\u3001\u96c6\u7fa4\u73af\u5883\u7b49\u56e0\u7d20\uff0c\u4e00\u4e9bSQL\u5c06\u5728100\u6beb\u79d2\u7ea7\u522b\u5b8c\u6210\u3002\u6267\u884c\u65f6\u95f4\u6700\u957f\u7684\u5219\u53ef\u80fd\u82b1\u8d39\u51e0\u5341\u5206\u949f\u3002\u4e00\u822c\u800c\u8a00\uff0c\u7edd\u5927\u591a\u6570SQL\u90fd\u5c06\u5728\u5206\u949f\u7ea7\u522b\u4e4b\u5185\u6267\u884c\u5b8c\u6210\u3002 Cluster\uff08\u96c6\u7fa4\uff09 XSQL\u7684\u5206\u5e03\u5f0f\u8ba1\u7b97\u4f9d\u6258\u4e8eYarn\uff0c\u8fd0\u884c\u4e8eYarn\u7684\u5404\u4e2aNodeManager\u6240\u7ba1\u7406\u7684\u8282\u70b9\u4e0a\u3002 Driver\uff08\u9a71\u52a8\uff09 XSQL\u590d\u7528\u4e86Spark\u7684Driver\uff0c\u5e76\u5bf9\u5176\u529f\u80fd\u8fdb\u884c\u4e86\u6269\u5c55\u3002XSQL\u5728Yarn\u4e0b\u6709\u4e24\u79cd\u8fd0\u884c\u6a21\u5f0f\uff0c\u5206\u522b\u662fclient\u548ccluster\u3002\u5728client\u6a21\u5f0f\u4e0b\uff0cDriver\u4e0e\u7528\u6237\u5e94\u7528\u7a0b\u5e8f\u90fd\u8fd0\u884c\u5728\u5ba2\u6237\u7aef\u7684\u540c\u4e00\u4e2aJVM\u4e0a\u3002\u5728cluster\u6a21\u5f0f\u4e0b\uff0c\u7528\u6237\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u5728\u5ba2\u6237\u7aef\u4e0a\uff0c\u800cDriver\u4e0eApplicationMaster\u90fd\u8fd0\u884c\u5728Yarn\u96c6\u7fa4\u7684\u67d0\u4e2a\u8282\u70b9\u7684\u540c\u4e00\u4e2aJVM\u4e0a\u3002 ApplicationMaster\uff08\u7b80\u79f0AM\uff09 XSQL\u590d\u7528\u4e86Spark\u7684ApplicationMaster\u3002Yarn\u8d1f\u8d23\u5206\u914d\u7ed9\u7528\u6237\u5e94\u7528\u7a0b\u5e8f\u7684\u7b2c\u4e00\u4e2aContainer\u4e2d\u5c06\u8fd0\u884cApplicationMaster\u3002ApplicationMaster\u5c06\u540e\u7eed\u4e0eYarn\u7684ResourceManager\u4ea4\u4e92\uff0c\u4ee5\u7533\u8bf7\u8d44\u6e90\u3001\u91ca\u653e\u8d44\u6e90\u3002ApplicationMaster\u53ef\u4ee5\u8bf4\u662f\u7528\u6237\u5e94\u7528\u7a0b\u5e8f\u7684\u76d1\u62a4\u4eba\u4e0e\u7ba1\u7406\u8005\uff0c\u8d1f\u8d23\u7528\u6237\u5e94\u7528\u7a0b\u5e8f\u5404\u4e2a\u4efb\u52a1\u5c1d\u8bd5\uff08\u5bf9\u4e8eXSQL\u6765\u8bf4\u5c31\u662fExecutor\uff09\u5728Yarn\u96c6\u7fa4\u7684\u5404\u4e2a\u8282\u70b9\u4e0a\u8fd0\u884c\u3002 Executor\uff08\u6267\u884c\u5668\uff09 XSQL\u590d\u7528\u4e86Spark\u7684Executor\u3002Executor\u8fd0\u884c\u5728\u7531Yarn\u5206\u914d\u7ed9Driver\u7684\u67d0\u4e2a\u96c6\u7fa4\u8282\u70b9\u7684Container\u5185\u90e8\u3002 DataSource\uff08\u6570\u636e\u6e90\uff09 XSQL\u4e0d\u540c\u4e8e\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff0c\u4e5f\u4e0d\u540c\u4e8e\u5176\u4ed6No SQL\u6570\u636e\u5e93\u3002\u6bcf\u4e2a\u6570\u636e\u5e93\u5b9e\u4f8b\u672c\u8eab\u53ef\u4ee5\u7b97\u4f5c\u4e00\u4e2a\u6570\u636e\u6e90\u7684\u8bdd\uff0c\u6570\u636e\u5e93\u5b9e\u4f8b\u53ea\u6709Database\uff08\u4e00\u4e9b\u6570\u636e\u6e90\u4e2d\u53ef\u80fd\u6ca1\u6709Database\u7684\u6982\u5ff5\uff0c\u4f8b\u5982Elasticsearch\u4e2d\u7684Index\uff09\u548cTable\uff08\u4e00\u4e9b\u6570\u636e\u6e90\u4e2d\u53ef\u80fd\u6ca1\u6709Table\u7684\u6982\u5ff5\uff0c\u4f8b\u5982Elasticsearch\u4e2d\u7684Type\uff09\u4e24\u4e2a\u5e38\u89c1\u7684\u5c42\u7ea7\u7ed3\u6784\u3002\u7531\u4e8eXSQL\u9700\u8981\u652f\u6301\u591a\u6570\u636e\u6e90\uff0c\u56e0\u6b64\u589e\u52a0\u4e86DataSource\u8fd9\u4e00\u6982\u5ff5\u3002XSQL\u7684\u7ba1\u7406\u5c42\u7ea7\u662fDataSource\u2014\u2014 Database\u2014\u2014 Table\u7684\u4e09\u5c42\u7ed3\u6784\u3002 \u4e3a\u4e86\u4fbf\u4e8e\u5bf9DataSource\u8fdb\u884c\u7ba1\u7406\uff0cXSQL\u589e\u52a0\u4e86\u4e00\u4e9b\u5bf9\u4e8eDataSource\u64cd\u4f5c\u7684SQL\u8bed\u6cd5\u3002\u5f53\u9700\u8981\u8bbf\u95eeXSQL\u4e2d\u7684\u8868\u65f6\uff0c\u5168\u9650\u5b9a\u8868\u540d\u5c06\u4eceDataSource\u5f00\u59cb\u3002\u4f8b\u5982\uff0c\u5168\u9650\u5b9a\u540d\u79f0\u662fhive_test.xsql_schema.test\u7684\u8868\uff0c\u6d89\u53ca\u540d\u4e3ahive_test\u7684\u6570\u636e\u6e90\uff0c\u540d\u4e3axsql_schema\u7684Database\u4ee5\u53ca\u8868test\u3002 Database\uff08\u6570\u636e\u5e93\uff09 XSQL\u4e2d\u7684Database\u662f\u5bf9\u8868\u8fdb\u884c\u7ec4\u7ec7\u7ba1\u7406\u7684\u65b9\u5f0f\u3002DataSource\u548cDatabase\u5171\u540c\u7ec4\u7ec7\u7ba1\u7406\u4e86\u8868\u7684\u96c6\u5408\u3002\u5f53\u8bbf\u95eeHive\u548c\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff08\u4f8b\u5982MySQL\uff09\u65f6\uff0cXSQL\u7684Database\u4e0e\u76ee\u6807\u6570\u636e\u5e93\u76f8\u5bf9\u5e94\u3002\u5176\u4ed6\u7c7b\u578b\u7684\u6570\u636e\u6e90\u9700\u8981\u6839\u636e\u5e95\u5c42\u5b9e\u73b0\u7684\u4e0d\u540c\uff0c\u9009\u62e9\u5408\u9002\u7684\u5bf9\u8c61\u4f5c\u4e3aDatabase\uff0c\u4f8b\u5982\uff0cXSQL\u9009\u62e9Elasticsearch\u7684Index\u4f5c\u4e3aDatabase\u3002 Table\uff08\u8868\uff09 XSQL\u4e2d\u7684Table\u5e76\u4e0d\u5b8c\u5168\u7b49\u540c\u4e8e\u4f20\u7edf\u610f\u4e49\u4e0a\u7684\u8868\uff0c\u5b9e\u9645\u662f\u5bf9\u4e00\u4e9b\u884c\u6570\u636e\u7684\u7ec4\u7ec7\u7ba1\u7406\uff0c\u8fd9\u4e9b\u884c\u5b9e\u9645\u53c8\u7ec4\u7ec7\u4e86\u4e00\u7cfb\u5217\u5b9a\u4e49\u4e86\u540d\u79f0\u548c\u7c7b\u578b\u7684\u5b57\u6bb5\u3002\u5bf9\u4e8e\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff08\u4f8b\u5982MySQL\uff09\uff0cXSQL\u7684Table\u4e0e\u76ee\u6807\u6570\u636e\u5e93\u4e2d\u7684\u8868\u5411\u5bf9\u5e94\u3002\u5176\u4ed6\u7c7b\u578b\u7684\u6570\u636e\u6e90\u9700\u8981\u6839\u636e\u5e95\u5c42\u5b9e\u73b0\u7684\u4e0d\u540c\uff0c\u9009\u62e9\u5408\u9002\u7684\u5bf9\u8c61\u4f5c\u4e3aTable\uff0c\u4f8b\u5982\uff1aElasticsearch\u4e2d\u7684Type\u3001MongoDB\u4e2d\u7684Collection\u3002 Table Schema\uff08\u8868\u7684\u5143\u4fe1\u606f\uff09 XSQL\u63a5\u5165\u7684\u6570\u636e\u6e90\u5e76\u4e0d\u662f\u90fd\u6709\u660e\u786e\u7684Table Schema\u7684\uff0c\u4f8b\u5982\uff1aMongoDB\u7684Collection\u662f\u6ca1\u6709\u5143\u4fe1\u606f\u7684\u3002\u6240\u4ee5\u4e3a\u4e86\u4f7f\u7528\u8fd9\u7c7b\u6570\u636e\u6e90\uff0c\u9700\u8981\u7528\u6237\u81ea\u5b9a\u4e49Schema\u914d\u7f6e\u6587\u4ef6\u3002\u5bf9\u4e8e\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff08\u4f8b\u5982MySQL\uff09\u6216\u8005Elasticsearch\u7b49\u5177\u6709\u660e\u786eSchema\u4fe1\u606f\u7684\u6570\u636e\u6e90\uff0c\u5219\u4e0d\u9700\u8981\u7528\u6237\u7ed9\u5b9aSchema\u914d\u7f6e\u6587\u4ef6\u3002XSQL\u76ee\u524d\u867d\u7136\u5b9e\u73b0\u4e86\u5bf9MongoDB\u3001Hbase\u7b49\u6570\u636e\u6e90\u7684Schema\u7684\u63a2\u6d4b\uff0c\u4f46\u662f\u8fd9\u79cd\u65b9\u5f0f\u5b58\u5728\u4e00\u5b9a\u7684\u6548\u7387\u6216\u51c6\u786e\u6027\u95ee\u9898\uff0c\u6682\u65f6\u4f5c\u4e3a\u4e00\u79cd\u5b9e\u9a8c\u6027\u7684\u529f\u80fd\u63d0\u4f9b\u3002 Pushdown\uff08\u4e0b\u63a8\uff09 XSQL\u4e2d\u8fd0\u884cSQL\uff0c\u6709\u4e24\u79cd\u6a21\u5f0f\uff1aPushdown\uff08\u4e0b\u63a8\uff09\u4e0eNo Pushdown\uff08\u975e\u4e0b\u63a8\uff09\u3002Pushdown\u53ef\u4ee5\u76f4\u63a5\u5229\u7528\u6570\u636e\u6e90\u7684API\uff0c\u5bf9\u76ee\u6807\u6570\u636e\u8fdb\u884c\u68c0\u7d22\u6216\u5206\u6790\u3002No Pushdown\u5219\u5c06\u5177\u4f53\u6267\u884c\u4ea4\u7ed9Spark\u6267\u884c\u5f15\u64ce\u3002Pushdown\u901a\u5e38\u7528\u4e8e\u6570\u636e\u6e90API\u6bd4Spark\u6267\u884c\u5f15\u64ce\u66f4\u52a0\u9ad8\u6548\u7684\u573a\u666f\u4e0b\uff0c\u4f8b\u5982Elasticsearch\u7684API\u76f4\u63a5\u67e5\u8be2\u5f80\u5f80\u4f1a\u6bd4Spark\u6267\u884c\u5f15\u64ce\u5feb\u3002Pushdown\u7ed3\u5408\u6570\u636e\u6e90\u7279\u70b9\u5bf9\u4e8e\u6570\u636e\u884c\u6570\u76ee\u524d\u6709\u4e0d\u8d85\u8fc710000\u884c\u7684\u6570\u636e\u91cf\u9650\u5236\u3002\u65e0\u8bba\u662fPushdown\u8fd8\u662fNo Pushdown\u90fd\u53ef\u4ee5\u7528\u4e8e\u591a\u6570\u636e\u6e90\u6df7\u5408\u67e5\u8be2\u7684\u573a\u666f\u3002 Cache Level\uff08\u7f13\u5b58\u7ea7\u522b\uff09 XSQL\u5bf9\u4e8e\u6570\u636e\u5143\u4fe1\u606f\u7684\u7ba1\u7406\uff0c\u91c7\u7528\u4e86\u53bb\u4e2d\u5fc3\u5316\u7684\u65b9\u5f0f\u3002\u8fd9\u6709\u52a9\u4e8eXSQL\u66f4\u52a0\u8f7b\u91cf\u548c\u7075\u6d3b\u3002\u5728\u53bb\u4e2d\u5fc3\u5316\u7684\u8bbe\u8ba1\u601d\u60f3\u4e0b\uff0c\u4e00\u4e9b\u5143\u6570\u636e\u4fe1\u606f\u9700\u8981\u88ab\u7f13\u5b58\u8d77\u6765\u3002XSQL\u76ee\u524d\u63d0\u4f9b\u4e86\u4e24\u79cd\u7f13\u5b58\u7ea7\u522b\uff1aLevel One\uff08\u9ed8\u8ba4\uff09\u548cLevel Two\u3002Level One\u53ea\u4f1a\u7f13\u5b58DataSource\u548cDatabase\u7684\u5143\u4fe1\u606f\uff0c\u8fd9\u79cd\u65b9\u5f0f\u9002\u5e94\u4e8e\u4e34\u65f6\u6027\u7684\u67e5\u8be2\u8bf7\u6c42\u6216\u8005\u5143\u6570\u636e\u53d8\u66f4\u9891\u7e41\u7684\u573a\u666f\uff1bLevel Two\u9664\u4e86\u7f13\u5b58Level One\u4e2d\u6240\u7f13\u5b58\u7684\u5185\u5bb9\u5916\uff0c\u8fd8\u4f1a\u7f13\u5b58Table\u3001Column\u7b49\u66f4\u52a0\u8be6\u7ec6\u7684\u5143\u4fe1\u606f\uff0c\u8fd9\u79cd\u65b9\u5f0f\u9002\u5e94\u4e8e\u5143\u6570\u636e\u4e0d\u53d8\u5316\u6216\u6781\u5c11\u53d8\u5316\uff0c\u5e76\u4e14\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u4efb\u52a1\u3002\u7279\u522b\u9700\u8981\u6ce8\u610f\u7684\u662f\u2014\u2014\u5982\u679c\u7528\u6237\u914d\u7f6e\u7684\u6570\u636e\u6e90\u8fc7\u591a\uff0cLevel Two\u53ef\u80fd\u5bfc\u81f4\u4efb\u52a1\u521d\u59cb\u5316\u65f6\u95f4\u8f83\u957f\uff0c\u6b64\u65f6\u53ef\u4ee5\u901a\u8fc7\u767d\u540d\u5355\u673a\u5236\u51cf\u5c11\u8981\u7f13\u5b58\u7684\u5143\u6570\u636e\u3002 White List\uff08\u767d\u540d\u5355\uff09\u4e0eBlack List\uff08\u9ed1\u540d\u5355\uff09 \u4e00\u4e9b\u7528\u6237\u4e4b\u95f4\u53ef\u80fd\u4f1a\u5171\u4eab\u540c\u4e00\u4e2aDataSource\u6216\u8005\u540c\u4e00\u4e2aDatabase\uff0c\u4f46\u662f\u53ea\u5173\u5fc3\u5c11\u6570\u51e0\u4e2aDatabase\u6216\u8005Table\u3002\u6b64\u65f6\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7White List\u5305\u542b\u81ea\u5df1\u9700\u8981\u7684Database\u6216\u8005Table\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528Black List\u6392\u9664\u81ea\u5df1\u4e0d\u9700\u8981\u7684Database\u6216\u8005Table\u3002\u8fd9\u8fd8\u53ef\u4ee5\u7f29\u77ed\u4efb\u52a1\u7684\u521d\u59cb\u5316\u65f6\u95f4\u3002 Installation XSQL\u81f3\u5c11\u9700\u8981Java 8\u7684\u73af\u5883\uff0c\u5f53\u524d\u63a8\u8350\u4f7f\u7528Oracle JDK\u76841.8.0_152\u7248\u672c\u3002Oracle\u63a8\u8350\u7684\u5b89\u88c5\u6587\u6863\u53ef\u4ee5\u5728 Oracle\u7f51\u7ad9 \u4e0a\u627e\u5230\u3002\u6211\u60f3\u8bf4\u7684\u662f\uff0c\u8bf7\u5728\u5b89\u88c5XSQL\u4e4b\u524d\u68c0\u67e5Java\u7684\u7248\u672c\uff0c\u547d\u4ee4\u5982\u4e0b\uff1a java -version echo $JAVA_HOME Java\u8bbe\u7f6e\u597d\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u5b89\u88c5XSQL\u4e86\u3002XSQL\u76ee\u524d\u63d0\u4f9b\u4e86\u4e24\u79cd\u65b9\u5f0f\u5b89\u88c5\uff1a\u4e00\u79cd\u662f\u5185\u7f6eSpark\u7684\u5b89\u88c5\u5305\uff0c\u53e6\u4e00\u79cd\u662f\u4ee5Spark\u63d2\u4ef6\u7684\u65b9\u5f0f\u3002 XSQL\u5185\u7f6eSpark\u7684\u5b89\u88c5\u5305 \u8fd9\u79cdXSQL\u5b89\u88c5\u5305\u5185\u7f6e\u4e86Spark\uff0c\u5e76\u4e14\u5305\u540d\u4e00\u822c\u4ee5 XSQL\u7248\u672c\u53f7 +bin+ Spark\u7248\u672c\u53f7 \u6765\u547d\u540d\uff08\u4f8b\u5982\uff1axsql-0.6.0-bin-spark-2.4.3.tgz\uff09\u3002\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684\u547d\u4ee4\u63d0\u53d6\u538b\u7f29\u5305\u4e2d\u7684\u5185\u5bb9\uff1a tar -zxvf xsql-0.6.0-bin-spark-2.4.3.tgz \u8fd9\u6761\u547d\u4ee4\u5c06\u5728\u5f53\u524d\u76ee\u5f55\u521b\u5efa\u5927\u91cf\u7684\u6587\u4ef6\u3001\u6587\u4ef6\u5939\u3002\u89e3\u538b\u7f29\u7684\u6839\u76ee\u5f55\u540d\u79f0\u4e3axsql-0.6.0-bin-spark-2.4.3\u3002\u4e00\u4e2a\u826f\u597d\u7684\u4e60\u60ef\u662f\u5efa\u7acb\u6b64\u6587\u4ef6\u5939\u7684\u8f6f\u94fe\uff1a ln -s xsql-0.6.0-bin-spark-2.4.3 xsql \u73b0\u5728\uff0c\u7528\u6237\u9700\u8981\u5728xsql/conf\u76ee\u5f55\u914d\u7f6e\u81ea\u5df1\u7684\u6570\u636e\u6e90\u4fe1\u606f\uff0c\u5728 Configuration \u6709\u76f8\u5173\u7684\u4ecb\u7ecd\u3002 \u5728\u786e\u5b9a\u914d\u7f6e\u597d\u6570\u636e\u6e90\u540e\uff0c\u5c31\u53ef\u4ee5\u8fdb\u5165xsql\u7684bin\u76ee\u5f55\u5e76\u542f\u52a8xsql\u4e86\uff1a cd xsql/bin ./spark-xsql \u5982\u679c\u987a\u5229\u7684\u8bdd\uff0c\u4f60\u5c06\u770b\u5230\u4ee5\u4e0b\u4fe1\u606f\uff1a Java HotSpot(TM) 64-Bit Server VM warning: Using the ParNew young collector with the Serial old collector is deprecated and will likely be removed in a future release Warning: Master yarn-client is deprecated since 2.0. Please use master yarn with specified deploy mode instead. 18/10/25 12:28:03 WARN SparkConf: The configuration key 'spark.scheduler.executorTaskBlacklistTime' has been deprecated as of Spark 2.1.0 and may be removed in the future. Please use the new blacklisting options, spark.blacklist.* 18/10/25 12:28:03 WARN SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead. 18/10/25 12:28:04 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable \u5e76\u6700\u7ec8\u505c\u7559\u5728spark-xsql\u7684\u63d0\u793a\u7b26\u4e0a\uff1a spark-xsql XSQL\u4f5c\u4e3aSpark\u63d2\u4ef6 XSQL\u63d2\u4ef6\u662f\u4e00\u4e2a\u538b\u7f29\u5305\uff0c\u4e00\u822c\u4ee5 XSQL\u7248\u672c\u53f7 +plugin+ Spark\u7248\u672c\u53f7 \u6765\u547d\u540d\uff08\u4f8b\u5982\uff1axsql-0.6.0-plugin-spark-2.4.3.tgz\uff09\u3002\u56e0\u6b64\u4f60\u9700\u8981\u786e\u5b9a\u81ea\u5df1\u7684\u673a\u5668\u4e0a\u5df2\u7ecf\u6709\u4e86Spark\u5ba2\u6237\u7aef\uff0c\u5e76\u4e14\u7248\u672c\u4e0eXSQL\u6240\u5bf9\u5e94\u7684Spark\u7248\u672c\u4e00\u81f4\uff0c\u5426\u5219\u53ef\u80fd\u5bfc\u81f4\u8fd0\u884c\u51fa\u9519\u3002 \u4f60\u9700\u8981\u9996\u5148\u5c06XSQL\u63d2\u4ef6\u89e3\u538b\u7f29\u5230Spark\u76ee\u5f55\u4e0b\uff0c\u4f8b\u5982\uff1a tar zxvf xsql-0.6.0-plugin-spark-2.4.3.tgz -C $SPARK_HOME \u8fd9\u6837\u5b9e\u9645\u4f1a\u5728Spark\u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2a\u4fdd\u62a4\u4e86XSQL\u6240\u9700\u8981\u7684jar\u6587\u4ef6\u7684\u76ee\u5f55xsql-jars\uff0c\u8fd8\u4f1a\u5728$SPARK_HOME/bin\u76ee\u5f55\u521b\u5efa\u4e00\u4e2aspark-xsql\u7684\u811a\u672c\u3002 \u7136\u540e\u8fdb\u5165Spark\u7684conf\u76ee\u5f55\uff1a cd $SPARK_HOME/conf \u9700\u8981\u521b\u5efaXSQL\u6240\u9700\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u4f8b\u5982\uff1a vi xsql.conf \u5411xsql.conf\u5199\u5165\u4f60\u6240\u9700\u7684\u6570\u636e\u6e90\u914d\u7f6e\uff08\u8bf7\u53c2\u7167 Configuration \u4ecb\u7ecd\u7684\u4f8b\u5b50\uff09\u3002 \u6700\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u542f\u52a8spark-xsql\u547d\u4ee4\u4e86\uff0c\u8bf7\u53c2\u7167 XSQL\u5185\u7f6eSpark\u7684\u5b89\u88c5\u5305 \u3002 \u6ce8\u610f\uff1aXSQL\u5c06\u9ed8\u8ba4\u52a0\u8f7d $SPARK_HOME/conf/xsql.conf \u3002\u5f53\u7136\uff0cxsql.conf\u4e0d\u4e00\u5b9a\u8981\u653e\u5728conf\u76ee\u5f55\u4e0b\uff0c\u53ef\u4ee5\u662f\u7528\u6237\u60f3\u8981\u7684\u4efb\u4f55\u4f4d\u7f6e\uff0c\u4f60\u5c06\u53ef\u4ee5\u5728 XSQL\u914d\u7f6e \u627e\u5230\u5bf9\u5e94\u7684\u914d\u7f6e\u3002 \u542f\u52a8XSQL Cli\u7684\u6ce8\u610f\u4e8b\u9879 Yarn Cluster\u6a21\u5f0f \u7528\u6237\u5c06XSQL\u5b89\u88c5\u597d\u540e\uff0c\u4f7f\u7528spark-submit\u3001spark-shell\u3001spark-sql\u3001spark-xsql\u7b49\u547d\u4ee4\u65f6\uff0c\u5982\u679c\u6307\u5b9a\u4e86Yarn Cluster\u6a21\u5f0f\uff0c\u4f8b\u5982\uff1a bin/spark-submit --class path.to.your.Class --master yarn --deploy-mode cluster yourApp.jar \u90a3\u4e48\u5207\u8bb0\u8981\u589e\u52a0\u5c06xsql.conf\u6587\u4ef6\u6dfb\u52a0\u5230\u4e0a\u4f20\u914d\u7f6e\u4e2d\uff0c\u4f8b\u5982\uff1a bin/spark-submit --files xsql.conf --class path.to.your.Class --master yarn --deploy-mode cluster yourApp.jar \u5426\u5219\u4f1a\u5bfc\u81f4\u8fd0\u884c\u5728\u96c6\u7fa4\u4e0a\u7684Driver\u627e\u4e0d\u5230xsql.conf\u6587\u4ef6\u3002 Configuration \u9996\u5148\u8fdb\u5165conf\u76ee\u5f55\uff1a cd xsql/conf \u7528\u6237\u9700\u8981\u5c06xsql/conf\u76ee\u5f55\u4e0b\u7684xsql.conf.template\u91cd\u547d\u540d\u4e3axsql.conf\uff1a mv xsql.conf.template xsql.conf \u6253\u5f00xsql.conf\uff1a vi xsql.conf \u53ef\u4ee5\u770b\u5230\u4ee5\u4e0b\u5185\u5bb9\uff1a # Example: # spark.xsql.datasources default # spark.xsql.default.database mysqltest # spark.xsql.datasource.default.type mysql # spark.xsql.datasource.default.url jdbc:mysql://127.0.0.1:2336 # spark.xsql.datasource.default.user user # spark.xsql.datasource.default.password password # spark.xsql.datasource.default.version 5.6.19 \u6b64\u6570\u636e\u6e90\u662f\u63d0\u4f9b\u7ed9\u7528\u6237\u5b66\u4e60\u4f7f\u7528\uff0c\u6240\u4ee5\u5982\u679c\u7528\u6237\u60f3\u8981\u62ff\u6b64\u914d\u7f6e\u7ec3\u624b\uff0c\u8bf7\u5c06\"#\"\u53bb\u6389\uff0c\u5e76\u4e14\u5c06\u5404\u4e2a\u914d\u7f6e\u8c03\u6574\u4e3a\u4f60\u51c6\u5907\u597d\u7684\u6570\u636e\u6e90\u3002\u4f8b\u5982\uff1a spark.xsql.datasources default spark.xsql.default.database real_database spark.xsql.datasource.default.type mysql spark.xsql.datasource.default.url jdbc:mysql://127.0.0.1:2336 spark.xsql.datasource.default.user real_username spark.xsql.datasource.default.password real_password spark.xsql.datasource.default.version 5.6.19 \u8fd9\u4e2a\u914d\u7f6e\u4e2d\u6307\u5b9a\u4e86\u4e00\u4e2a\u540d\u4e3adefault\u7684\u6570\u636e\u6e90\uff0cXSQL\u9ed8\u8ba4\u4f1a\u9009\u62e9\u522b\u540d\u662fdefault\u7684\u6570\u636e\u6e90\u4f5c\u4e3a\u9ed8\u8ba4\u6570\u636e\u6e90\u3002\u672c\u4f8b\u4e2d\uff0cdefault\u6570\u636e\u6e90\u7684\u7c7b\u578b\u662fMySQL\uff0c\u6b64\u5916\u8fd8\u63d0\u4f9b\u4e86default\u6570\u636e\u6e90\u7684\u5176\u4ed6\u8fde\u63a5\u914d\u7f6e\u4fe1\u606f\u53ca\u7248\u672c\u53f7\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cXSQL\u9664\u4e86\u9009\u62e9default\u6570\u636e\u6e90\u4f5c\u4e3a\u5f53\u524d\u6570\u636e\u6e90\u5916\uff0c\u8fd8\u4f1a\u9009\u62e9\u9ed8\u8ba4\u6570\u636e\u6e90\u4e2d\u7684default\u6570\u636e\u5e93\u5b9e\u4f8b\u4f5c\u4e3a\u9ed8\u8ba4\u6570\u636e\u5e93\uff0c\u8fd9\u6709\u4e9b\u7c7b\u4f3c\u4e8e\u8fdb\u5165Hive\u547d\u4ee4\u884c\u540e\u7684\u9ed8\u8ba4\u6570\u636e\u5e93\u3002\u5982\u679c\u7528\u6237\u63d0\u4f9b\u7684\u6570\u636e\u6e90\u4e2d\u6ca1\u6709\u540d\u4e3adefault\u7684\u6570\u636e\u5e93\u5b9e\u4f8b\uff0c\u90a3\u4e48\u9700\u8981\u901a\u8fc7 spark.xsql.default.database \u6307\u5b9a\u9ed8\u8ba4\u6570\u636e\u5e93\u3002\u672c\u4f8b\u4e2d\uff0c\u901a\u8fc7 spark.xsql.default.database \u6307\u5b9a\u9ed8\u8ba4\u6570\u636e\u5e93\u4e3a\u5b9e\u9645\u5b58\u5728\u7684real_database\u3002\u66f4\u591a\u7684\u914d\u7f6e\u4ecb\u7ecd\u8bf7\u9605\u8bfb Configurations Running \u5982\u679c\u4f60\u4e25\u683c\u6309\u7167 Installation \u4e00\u8282\u7684\u65b9\u5f0f\u542f\u52a8\u4e86XSQL\uff0c\u73b0\u5728\u53ef\u4ee5\u6765\u770b\u770b\u6211\u4eec\u80fd\u505a\u4e9b\u4ec0\u4e48\uff1f\u6211\u4eec\u72b9\u5982\u521a\u521a\u7ecf\u8fc7\u4e86\u6fc0\u70c8\u7684\u98a4\u6296\u540e\u8131\u79bb\u4e86\u5730\u7403\u5f15\u529b\uff0c\u9762\u524d\u662f\u6d69\u6e3a\u3001\u5e7d\u6697\u7684\u592a\u7a7a\u3002\u6211\u5341\u5206\u7406\u89e3\u65b0\u7528\u6237\u5bf9\u4e8e\u4e00\u4e2a\u964c\u751f\u5de5\u5177\u7684\u6050\u60e7\uff0c\u4f46\u662fXSQL\u56e2\u961f\u59cb\u7ec8\u4e0e\u4f60\u540c\u5750\u5728\u540c\u4e00\u8258\u98de\u8239\u4e0a\u3002\u6682\u65f6\u4e0d\u59a8\u5c06XSQL\u7406\u89e3\u6210\u6211\u4eec\u6240\u719f\u77e5\u4e16\u754c\u7684MySQL\u6216Hive\uff0c\u5b83\u4eec\u80fd\u505a\u4ec0\u4e48\uff1f\u5730\u7403\u4e0a\u7684\u7528\u6237\u6bcf\u5929\u90fd\u5728\u4f7f\u7528\u8fd9\u4e24\u4e2a\u5de5\u5177\u3002\u5373\u4fbf\u5982\u6b64\uff0c\u7531\u4e8e\u5065\u5fd8\u662f\u4eba\u7c7b\u4e0e\u751f\u4ff1\u6765\u7684\u80fd\u529b\uff0c\u56e0\u6b64\u7edd\u5927\u591a\u6570\u7528\u6237\u4f9d\u7136\u4e60\u60ef\u4e8e\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\uff1a show databases; \u8fd9\u4e0d\u4ec5\u53ef\u4ee5\u6709\u6548\u6cbb\u6108\u4eba\u4eec\u7684\u5065\u5fd8\uff0c\u5bf9\u4e8e\u6211\u4eec\u800c\u8a00\u4e5f\u80fd\u51cf\u8f7b\u6050\u60e7\u3002\u6240\u4ee5\u8bf7\u5c1d\u8bd5\u8fd9\u6761\u547d\u4ee4\uff1a spark-xsql show databases; 18/10/29 15:23:44 INFO SparkXSQLShell: spark.enable.hiverc:true 18/10/29 15:23:44 INFO SparkXSQLShell: current SQL: show databases 18/10/29 15:23:48 WARN SparkXSQLShell: hive.cli.print.header not configured, so doesn't print colum's name. default MYSQL mysqltest Time taken: 0.028 s spark-xsql \u600e\u4e48\u6837\uff1f\u662f\u4e0d\u662f\u5f88\u719f\u6089\uff1f\u4f46\u662f\u4e5f\u662f\u6709\u533a\u522b\u7684\u3002\u7b2c\u4e00\u5217\u663e\u793a\u7684\u662fDatabase\u6240\u5c5eDataSource\u7684\u540d\u79f0\uff1b\u7b2c\u4e8c\u5217\u662fDataSource\u7684\u7c7b\u578b\uff08\u8fd9\u91cc\u662fMySQL\uff09\uff1b\u7b2c\u4e09\u5217\u662fDatabase\u7684\u540d\u79f0\u3002\u8fd9\u6837\u6211\u4eec\u80fd\u770b\u5230\u5728default\u6570\u636e\u6e90\u4e2d\u6709\u4e00\u4e2a\u540d\u4e3amysqltest\u7684Database\u3002 \u6709\u4e86\u4e0a\u9762\u7684\u6210\u529f\u7ecf\u9a8c\uff0c\u6211\u76f8\u4fe1\u4f60\u4f1a\u5927\u80c6\u4e00\u4e9b\uff0c\u5c1d\u8bd5\u4f7f\u7528Use\uff1a use mysqltest; \u6267\u884c\u4fe1\u606f\u5982\u4e0b\uff1a spark-xsql use mysqltest; 18/10/29 15:28:33 INFO SparkXSQLShell: current SQL: use mysqltest 18/10/29 15:28:33 WARN SparkXSQLShell: hive.cli.print.header not configured, so doesn't print colum's name. Time taken: 0.028 s spark-xsql \u4e0eMySQL\u4e00\u6837\uff0c\u4f60\u5df2\u7ecf\u9009\u62e9mysqltest\u4f5c\u4e3a\u5f53\u524d\u7684Database\u3002\u4f60\u5e94\u8be5\u60f3\u8981\u770b\u770bmysqltest\u91cc\u9762\u6709\u54ea\u4e9bTable\uff0c\u4ee5\u6ee1\u8db3\u4f60\u7684\u597d\u5947\uff0c\u4e60\u60ef\u4e0a\u4f60\u4f1a\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\uff1a show tables; \u5728XSQL\u4e2d\u6267\u884c\u65f6\uff0c\u4f60\u5c06\u770b\u5230\uff1a spark-xsql show tables; 18/10/29 15:30:27 INFO SparkXSQLShell: current SQL: show tables 18/10/29 15:30:28 WARN SparkXSQLShell: hive.cli.print.header not configured, so doesn't print colum's name. default mysqltest activities false default mysqltest course false default mysqltest geonames false default mysqltest geonames_small false default mysqltest person false default mysqltest taxis false default mysqltest taxis_type false default mysqltest test123 false Time taken: 0.066 s spark-xsql \u8fd9\u8ddf\u4f60\u5728MySQL\u4e2d\u6267\u884c\u7684\u7ed3\u679c\u662f\u4e0d\u662f\u4e5f\u975e\u5e38\u76f8\u4f3c\uff0c\u4e0d\u8fc7\u4ecd\u7136\u6709\u4e00\u5c0f\u70b9\u4e0d\u540c\u4e4b\u5904\u2014\u2014\u7b2c\u4e00\u5217\u663e\u793a\u7684\u662fTable\u6240\u5c5eDataSource\u7684\u540d\u79f0\uff1b\u7b2c\u4e8c\u5217\u662fTable\u6240\u5c5eDatabase\u7684\u540d\u79f0\uff1b\u7b2c\u4e09\u5217\u662fTable\u7684\u540d\u79f0\uff1b\u7b2c\u56db\u5217\u8868\u793aTable\u662f\u5426\u662f\u4e34\u65f6\u8868\u3002 \u5728\u672c\u8282\u5185\u5bb9\u7684\u6700\u540e\uff0c\u6211\u4eec\u9009\u62e9course\u8868\u4f5c\u4e3a\u67e5\u8be2\u4f8b\u5b50\uff0c\u8bf7\u5728XSQL\u4e2d\u8f93\u5165\uff1a select * from course; \u4f60\u5c06\u770b\u5230\u4ee5\u4e0b\u8f93\u51fa\u5185\u5bb9\uff1a spark-xsql select * from course; 18/10/29 15:38:15 INFO SparkXSQLShell: current SQL: select * from course 18/10/29 15:38:15 WARN SparkXSQLShell: hive.cli.print.header not configured, so doesn't print colum's name. 1 math 2 english 3 chinese Time taken: 0.148 s spark-xsql \u8fd9\u5f20\u6d4b\u8bd5\u7528\u9014\u7684\u8868\u4e2d\u5171\u6709\u4e09\u6761\u6570\u636e\u8f93\u51fa\u3002 \u672c\u8282\u4ee5\u6700\u7b80\u5355\u7684\u65b9\u5f0f\uff0c\u5411\u7528\u6237\u4ecb\u7ecd\u4e86XSQL\u4e2d\u8fd0\u884cDDL\u548c\u67e5\u8be2SQL\u7684\u4f8b\u5b50\u3002\u6709\u5173\u66f4\u591aXSQL\u81ea\u8eab\u8bed\u6cd5\u7684\u4ecb\u7ecd\u8bf7\u9605\u8bfb Special Syntax \u4e2d\u7684\u5185\u5bb9\u3002","title":"Overview"},{"location":"getting_started/Getting_Started/#basic-concepts","text":"\u672c\u6587\u6863\u4ecb\u7ecdXSQL\u4e2d\u7684\u4e00\u4e9b\u6838\u5fc3\u6982\u5ff5\u3002\u7406\u89e3\u8fd9\u4e9b\u6982\u5ff5\u5c06\u6709\u52a9\u4e8e\u60a8\u66f4\u52a0\u8f7b\u677e\u7684\u5b66\u4e60\u548c\u4f7f\u7528XSQL\u3002 Near Realtime\uff08\u8fd1\u5b9e\u65f6\uff09 XSQL\u662f\u4e00\u4e2a\u8fd1\u5b9e\u65f6\u7684\u67e5\u8be2\u3001\u8ba1\u7b97\u5f15\u64ce\u3002\u5f53\u7528\u6237\u6267\u884c\u4e00\u6761SQL\u65f6\uff0c\u6839\u636e\u6570\u636e\u91cf\u3001SQL\u590d\u6742\u5ea6\u3001\u662f\u5426\u4e0b\u63a8\u3001\u8d44\u6e90\u5927\u5c0f\u3001\u96c6\u7fa4\u73af\u5883\u7b49\u56e0\u7d20\uff0c\u4e00\u4e9bSQL\u5c06\u5728100\u6beb\u79d2\u7ea7\u522b\u5b8c\u6210\u3002\u6267\u884c\u65f6\u95f4\u6700\u957f\u7684\u5219\u53ef\u80fd\u82b1\u8d39\u51e0\u5341\u5206\u949f\u3002\u4e00\u822c\u800c\u8a00\uff0c\u7edd\u5927\u591a\u6570SQL\u90fd\u5c06\u5728\u5206\u949f\u7ea7\u522b\u4e4b\u5185\u6267\u884c\u5b8c\u6210\u3002 Cluster\uff08\u96c6\u7fa4\uff09 XSQL\u7684\u5206\u5e03\u5f0f\u8ba1\u7b97\u4f9d\u6258\u4e8eYarn\uff0c\u8fd0\u884c\u4e8eYarn\u7684\u5404\u4e2aNodeManager\u6240\u7ba1\u7406\u7684\u8282\u70b9\u4e0a\u3002 Driver\uff08\u9a71\u52a8\uff09 XSQL\u590d\u7528\u4e86Spark\u7684Driver\uff0c\u5e76\u5bf9\u5176\u529f\u80fd\u8fdb\u884c\u4e86\u6269\u5c55\u3002XSQL\u5728Yarn\u4e0b\u6709\u4e24\u79cd\u8fd0\u884c\u6a21\u5f0f\uff0c\u5206\u522b\u662fclient\u548ccluster\u3002\u5728client\u6a21\u5f0f\u4e0b\uff0cDriver\u4e0e\u7528\u6237\u5e94\u7528\u7a0b\u5e8f\u90fd\u8fd0\u884c\u5728\u5ba2\u6237\u7aef\u7684\u540c\u4e00\u4e2aJVM\u4e0a\u3002\u5728cluster\u6a21\u5f0f\u4e0b\uff0c\u7528\u6237\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u5728\u5ba2\u6237\u7aef\u4e0a\uff0c\u800cDriver\u4e0eApplicationMaster\u90fd\u8fd0\u884c\u5728Yarn\u96c6\u7fa4\u7684\u67d0\u4e2a\u8282\u70b9\u7684\u540c\u4e00\u4e2aJVM\u4e0a\u3002 ApplicationMaster\uff08\u7b80\u79f0AM\uff09 XSQL\u590d\u7528\u4e86Spark\u7684ApplicationMaster\u3002Yarn\u8d1f\u8d23\u5206\u914d\u7ed9\u7528\u6237\u5e94\u7528\u7a0b\u5e8f\u7684\u7b2c\u4e00\u4e2aContainer\u4e2d\u5c06\u8fd0\u884cApplicationMaster\u3002ApplicationMaster\u5c06\u540e\u7eed\u4e0eYarn\u7684ResourceManager\u4ea4\u4e92\uff0c\u4ee5\u7533\u8bf7\u8d44\u6e90\u3001\u91ca\u653e\u8d44\u6e90\u3002ApplicationMaster\u53ef\u4ee5\u8bf4\u662f\u7528\u6237\u5e94\u7528\u7a0b\u5e8f\u7684\u76d1\u62a4\u4eba\u4e0e\u7ba1\u7406\u8005\uff0c\u8d1f\u8d23\u7528\u6237\u5e94\u7528\u7a0b\u5e8f\u5404\u4e2a\u4efb\u52a1\u5c1d\u8bd5\uff08\u5bf9\u4e8eXSQL\u6765\u8bf4\u5c31\u662fExecutor\uff09\u5728Yarn\u96c6\u7fa4\u7684\u5404\u4e2a\u8282\u70b9\u4e0a\u8fd0\u884c\u3002 Executor\uff08\u6267\u884c\u5668\uff09 XSQL\u590d\u7528\u4e86Spark\u7684Executor\u3002Executor\u8fd0\u884c\u5728\u7531Yarn\u5206\u914d\u7ed9Driver\u7684\u67d0\u4e2a\u96c6\u7fa4\u8282\u70b9\u7684Container\u5185\u90e8\u3002 DataSource\uff08\u6570\u636e\u6e90\uff09 XSQL\u4e0d\u540c\u4e8e\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff0c\u4e5f\u4e0d\u540c\u4e8e\u5176\u4ed6No SQL\u6570\u636e\u5e93\u3002\u6bcf\u4e2a\u6570\u636e\u5e93\u5b9e\u4f8b\u672c\u8eab\u53ef\u4ee5\u7b97\u4f5c\u4e00\u4e2a\u6570\u636e\u6e90\u7684\u8bdd\uff0c\u6570\u636e\u5e93\u5b9e\u4f8b\u53ea\u6709Database\uff08\u4e00\u4e9b\u6570\u636e\u6e90\u4e2d\u53ef\u80fd\u6ca1\u6709Database\u7684\u6982\u5ff5\uff0c\u4f8b\u5982Elasticsearch\u4e2d\u7684Index\uff09\u548cTable\uff08\u4e00\u4e9b\u6570\u636e\u6e90\u4e2d\u53ef\u80fd\u6ca1\u6709Table\u7684\u6982\u5ff5\uff0c\u4f8b\u5982Elasticsearch\u4e2d\u7684Type\uff09\u4e24\u4e2a\u5e38\u89c1\u7684\u5c42\u7ea7\u7ed3\u6784\u3002\u7531\u4e8eXSQL\u9700\u8981\u652f\u6301\u591a\u6570\u636e\u6e90\uff0c\u56e0\u6b64\u589e\u52a0\u4e86DataSource\u8fd9\u4e00\u6982\u5ff5\u3002XSQL\u7684\u7ba1\u7406\u5c42\u7ea7\u662fDataSource\u2014\u2014 Database\u2014\u2014 Table\u7684\u4e09\u5c42\u7ed3\u6784\u3002 \u4e3a\u4e86\u4fbf\u4e8e\u5bf9DataSource\u8fdb\u884c\u7ba1\u7406\uff0cXSQL\u589e\u52a0\u4e86\u4e00\u4e9b\u5bf9\u4e8eDataSource\u64cd\u4f5c\u7684SQL\u8bed\u6cd5\u3002\u5f53\u9700\u8981\u8bbf\u95eeXSQL\u4e2d\u7684\u8868\u65f6\uff0c\u5168\u9650\u5b9a\u8868\u540d\u5c06\u4eceDataSource\u5f00\u59cb\u3002\u4f8b\u5982\uff0c\u5168\u9650\u5b9a\u540d\u79f0\u662fhive_test.xsql_schema.test\u7684\u8868\uff0c\u6d89\u53ca\u540d\u4e3ahive_test\u7684\u6570\u636e\u6e90\uff0c\u540d\u4e3axsql_schema\u7684Database\u4ee5\u53ca\u8868test\u3002 Database\uff08\u6570\u636e\u5e93\uff09 XSQL\u4e2d\u7684Database\u662f\u5bf9\u8868\u8fdb\u884c\u7ec4\u7ec7\u7ba1\u7406\u7684\u65b9\u5f0f\u3002DataSource\u548cDatabase\u5171\u540c\u7ec4\u7ec7\u7ba1\u7406\u4e86\u8868\u7684\u96c6\u5408\u3002\u5f53\u8bbf\u95eeHive\u548c\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff08\u4f8b\u5982MySQL\uff09\u65f6\uff0cXSQL\u7684Database\u4e0e\u76ee\u6807\u6570\u636e\u5e93\u76f8\u5bf9\u5e94\u3002\u5176\u4ed6\u7c7b\u578b\u7684\u6570\u636e\u6e90\u9700\u8981\u6839\u636e\u5e95\u5c42\u5b9e\u73b0\u7684\u4e0d\u540c\uff0c\u9009\u62e9\u5408\u9002\u7684\u5bf9\u8c61\u4f5c\u4e3aDatabase\uff0c\u4f8b\u5982\uff0cXSQL\u9009\u62e9Elasticsearch\u7684Index\u4f5c\u4e3aDatabase\u3002 Table\uff08\u8868\uff09 XSQL\u4e2d\u7684Table\u5e76\u4e0d\u5b8c\u5168\u7b49\u540c\u4e8e\u4f20\u7edf\u610f\u4e49\u4e0a\u7684\u8868\uff0c\u5b9e\u9645\u662f\u5bf9\u4e00\u4e9b\u884c\u6570\u636e\u7684\u7ec4\u7ec7\u7ba1\u7406\uff0c\u8fd9\u4e9b\u884c\u5b9e\u9645\u53c8\u7ec4\u7ec7\u4e86\u4e00\u7cfb\u5217\u5b9a\u4e49\u4e86\u540d\u79f0\u548c\u7c7b\u578b\u7684\u5b57\u6bb5\u3002\u5bf9\u4e8e\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff08\u4f8b\u5982MySQL\uff09\uff0cXSQL\u7684Table\u4e0e\u76ee\u6807\u6570\u636e\u5e93\u4e2d\u7684\u8868\u5411\u5bf9\u5e94\u3002\u5176\u4ed6\u7c7b\u578b\u7684\u6570\u636e\u6e90\u9700\u8981\u6839\u636e\u5e95\u5c42\u5b9e\u73b0\u7684\u4e0d\u540c\uff0c\u9009\u62e9\u5408\u9002\u7684\u5bf9\u8c61\u4f5c\u4e3aTable\uff0c\u4f8b\u5982\uff1aElasticsearch\u4e2d\u7684Type\u3001MongoDB\u4e2d\u7684Collection\u3002 Table Schema\uff08\u8868\u7684\u5143\u4fe1\u606f\uff09 XSQL\u63a5\u5165\u7684\u6570\u636e\u6e90\u5e76\u4e0d\u662f\u90fd\u6709\u660e\u786e\u7684Table Schema\u7684\uff0c\u4f8b\u5982\uff1aMongoDB\u7684Collection\u662f\u6ca1\u6709\u5143\u4fe1\u606f\u7684\u3002\u6240\u4ee5\u4e3a\u4e86\u4f7f\u7528\u8fd9\u7c7b\u6570\u636e\u6e90\uff0c\u9700\u8981\u7528\u6237\u81ea\u5b9a\u4e49Schema\u914d\u7f6e\u6587\u4ef6\u3002\u5bf9\u4e8e\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff08\u4f8b\u5982MySQL\uff09\u6216\u8005Elasticsearch\u7b49\u5177\u6709\u660e\u786eSchema\u4fe1\u606f\u7684\u6570\u636e\u6e90\uff0c\u5219\u4e0d\u9700\u8981\u7528\u6237\u7ed9\u5b9aSchema\u914d\u7f6e\u6587\u4ef6\u3002XSQL\u76ee\u524d\u867d\u7136\u5b9e\u73b0\u4e86\u5bf9MongoDB\u3001Hbase\u7b49\u6570\u636e\u6e90\u7684Schema\u7684\u63a2\u6d4b\uff0c\u4f46\u662f\u8fd9\u79cd\u65b9\u5f0f\u5b58\u5728\u4e00\u5b9a\u7684\u6548\u7387\u6216\u51c6\u786e\u6027\u95ee\u9898\uff0c\u6682\u65f6\u4f5c\u4e3a\u4e00\u79cd\u5b9e\u9a8c\u6027\u7684\u529f\u80fd\u63d0\u4f9b\u3002 Pushdown\uff08\u4e0b\u63a8\uff09 XSQL\u4e2d\u8fd0\u884cSQL\uff0c\u6709\u4e24\u79cd\u6a21\u5f0f\uff1aPushdown\uff08\u4e0b\u63a8\uff09\u4e0eNo Pushdown\uff08\u975e\u4e0b\u63a8\uff09\u3002Pushdown\u53ef\u4ee5\u76f4\u63a5\u5229\u7528\u6570\u636e\u6e90\u7684API\uff0c\u5bf9\u76ee\u6807\u6570\u636e\u8fdb\u884c\u68c0\u7d22\u6216\u5206\u6790\u3002No Pushdown\u5219\u5c06\u5177\u4f53\u6267\u884c\u4ea4\u7ed9Spark\u6267\u884c\u5f15\u64ce\u3002Pushdown\u901a\u5e38\u7528\u4e8e\u6570\u636e\u6e90API\u6bd4Spark\u6267\u884c\u5f15\u64ce\u66f4\u52a0\u9ad8\u6548\u7684\u573a\u666f\u4e0b\uff0c\u4f8b\u5982Elasticsearch\u7684API\u76f4\u63a5\u67e5\u8be2\u5f80\u5f80\u4f1a\u6bd4Spark\u6267\u884c\u5f15\u64ce\u5feb\u3002Pushdown\u7ed3\u5408\u6570\u636e\u6e90\u7279\u70b9\u5bf9\u4e8e\u6570\u636e\u884c\u6570\u76ee\u524d\u6709\u4e0d\u8d85\u8fc710000\u884c\u7684\u6570\u636e\u91cf\u9650\u5236\u3002\u65e0\u8bba\u662fPushdown\u8fd8\u662fNo Pushdown\u90fd\u53ef\u4ee5\u7528\u4e8e\u591a\u6570\u636e\u6e90\u6df7\u5408\u67e5\u8be2\u7684\u573a\u666f\u3002 Cache Level\uff08\u7f13\u5b58\u7ea7\u522b\uff09 XSQL\u5bf9\u4e8e\u6570\u636e\u5143\u4fe1\u606f\u7684\u7ba1\u7406\uff0c\u91c7\u7528\u4e86\u53bb\u4e2d\u5fc3\u5316\u7684\u65b9\u5f0f\u3002\u8fd9\u6709\u52a9\u4e8eXSQL\u66f4\u52a0\u8f7b\u91cf\u548c\u7075\u6d3b\u3002\u5728\u53bb\u4e2d\u5fc3\u5316\u7684\u8bbe\u8ba1\u601d\u60f3\u4e0b\uff0c\u4e00\u4e9b\u5143\u6570\u636e\u4fe1\u606f\u9700\u8981\u88ab\u7f13\u5b58\u8d77\u6765\u3002XSQL\u76ee\u524d\u63d0\u4f9b\u4e86\u4e24\u79cd\u7f13\u5b58\u7ea7\u522b\uff1aLevel One\uff08\u9ed8\u8ba4\uff09\u548cLevel Two\u3002Level One\u53ea\u4f1a\u7f13\u5b58DataSource\u548cDatabase\u7684\u5143\u4fe1\u606f\uff0c\u8fd9\u79cd\u65b9\u5f0f\u9002\u5e94\u4e8e\u4e34\u65f6\u6027\u7684\u67e5\u8be2\u8bf7\u6c42\u6216\u8005\u5143\u6570\u636e\u53d8\u66f4\u9891\u7e41\u7684\u573a\u666f\uff1bLevel Two\u9664\u4e86\u7f13\u5b58Level One\u4e2d\u6240\u7f13\u5b58\u7684\u5185\u5bb9\u5916\uff0c\u8fd8\u4f1a\u7f13\u5b58Table\u3001Column\u7b49\u66f4\u52a0\u8be6\u7ec6\u7684\u5143\u4fe1\u606f\uff0c\u8fd9\u79cd\u65b9\u5f0f\u9002\u5e94\u4e8e\u5143\u6570\u636e\u4e0d\u53d8\u5316\u6216\u6781\u5c11\u53d8\u5316\uff0c\u5e76\u4e14\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u4efb\u52a1\u3002\u7279\u522b\u9700\u8981\u6ce8\u610f\u7684\u662f\u2014\u2014\u5982\u679c\u7528\u6237\u914d\u7f6e\u7684\u6570\u636e\u6e90\u8fc7\u591a\uff0cLevel Two\u53ef\u80fd\u5bfc\u81f4\u4efb\u52a1\u521d\u59cb\u5316\u65f6\u95f4\u8f83\u957f\uff0c\u6b64\u65f6\u53ef\u4ee5\u901a\u8fc7\u767d\u540d\u5355\u673a\u5236\u51cf\u5c11\u8981\u7f13\u5b58\u7684\u5143\u6570\u636e\u3002 White List\uff08\u767d\u540d\u5355\uff09\u4e0eBlack List\uff08\u9ed1\u540d\u5355\uff09 \u4e00\u4e9b\u7528\u6237\u4e4b\u95f4\u53ef\u80fd\u4f1a\u5171\u4eab\u540c\u4e00\u4e2aDataSource\u6216\u8005\u540c\u4e00\u4e2aDatabase\uff0c\u4f46\u662f\u53ea\u5173\u5fc3\u5c11\u6570\u51e0\u4e2aDatabase\u6216\u8005Table\u3002\u6b64\u65f6\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7White List\u5305\u542b\u81ea\u5df1\u9700\u8981\u7684Database\u6216\u8005Table\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528Black List\u6392\u9664\u81ea\u5df1\u4e0d\u9700\u8981\u7684Database\u6216\u8005Table\u3002\u8fd9\u8fd8\u53ef\u4ee5\u7f29\u77ed\u4efb\u52a1\u7684\u521d\u59cb\u5316\u65f6\u95f4\u3002","title":"Basic Concepts"},{"location":"getting_started/Getting_Started/#installation","text":"XSQL\u81f3\u5c11\u9700\u8981Java 8\u7684\u73af\u5883\uff0c\u5f53\u524d\u63a8\u8350\u4f7f\u7528Oracle JDK\u76841.8.0_152\u7248\u672c\u3002Oracle\u63a8\u8350\u7684\u5b89\u88c5\u6587\u6863\u53ef\u4ee5\u5728 Oracle\u7f51\u7ad9 \u4e0a\u627e\u5230\u3002\u6211\u60f3\u8bf4\u7684\u662f\uff0c\u8bf7\u5728\u5b89\u88c5XSQL\u4e4b\u524d\u68c0\u67e5Java\u7684\u7248\u672c\uff0c\u547d\u4ee4\u5982\u4e0b\uff1a java -version echo $JAVA_HOME Java\u8bbe\u7f6e\u597d\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u5b89\u88c5XSQL\u4e86\u3002XSQL\u76ee\u524d\u63d0\u4f9b\u4e86\u4e24\u79cd\u65b9\u5f0f\u5b89\u88c5\uff1a\u4e00\u79cd\u662f\u5185\u7f6eSpark\u7684\u5b89\u88c5\u5305\uff0c\u53e6\u4e00\u79cd\u662f\u4ee5Spark\u63d2\u4ef6\u7684\u65b9\u5f0f\u3002","title":"Installation"},{"location":"getting_started/Getting_Started/#xsqlspark","text":"\u8fd9\u79cdXSQL\u5b89\u88c5\u5305\u5185\u7f6e\u4e86Spark\uff0c\u5e76\u4e14\u5305\u540d\u4e00\u822c\u4ee5 XSQL\u7248\u672c\u53f7 +bin+ Spark\u7248\u672c\u53f7 \u6765\u547d\u540d\uff08\u4f8b\u5982\uff1axsql-0.6.0-bin-spark-2.4.3.tgz\uff09\u3002\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684\u547d\u4ee4\u63d0\u53d6\u538b\u7f29\u5305\u4e2d\u7684\u5185\u5bb9\uff1a tar -zxvf xsql-0.6.0-bin-spark-2.4.3.tgz \u8fd9\u6761\u547d\u4ee4\u5c06\u5728\u5f53\u524d\u76ee\u5f55\u521b\u5efa\u5927\u91cf\u7684\u6587\u4ef6\u3001\u6587\u4ef6\u5939\u3002\u89e3\u538b\u7f29\u7684\u6839\u76ee\u5f55\u540d\u79f0\u4e3axsql-0.6.0-bin-spark-2.4.3\u3002\u4e00\u4e2a\u826f\u597d\u7684\u4e60\u60ef\u662f\u5efa\u7acb\u6b64\u6587\u4ef6\u5939\u7684\u8f6f\u94fe\uff1a ln -s xsql-0.6.0-bin-spark-2.4.3 xsql \u73b0\u5728\uff0c\u7528\u6237\u9700\u8981\u5728xsql/conf\u76ee\u5f55\u914d\u7f6e\u81ea\u5df1\u7684\u6570\u636e\u6e90\u4fe1\u606f\uff0c\u5728 Configuration \u6709\u76f8\u5173\u7684\u4ecb\u7ecd\u3002 \u5728\u786e\u5b9a\u914d\u7f6e\u597d\u6570\u636e\u6e90\u540e\uff0c\u5c31\u53ef\u4ee5\u8fdb\u5165xsql\u7684bin\u76ee\u5f55\u5e76\u542f\u52a8xsql\u4e86\uff1a cd xsql/bin ./spark-xsql \u5982\u679c\u987a\u5229\u7684\u8bdd\uff0c\u4f60\u5c06\u770b\u5230\u4ee5\u4e0b\u4fe1\u606f\uff1a Java HotSpot(TM) 64-Bit Server VM warning: Using the ParNew young collector with the Serial old collector is deprecated and will likely be removed in a future release Warning: Master yarn-client is deprecated since 2.0. Please use master yarn with specified deploy mode instead. 18/10/25 12:28:03 WARN SparkConf: The configuration key 'spark.scheduler.executorTaskBlacklistTime' has been deprecated as of Spark 2.1.0 and may be removed in the future. Please use the new blacklisting options, spark.blacklist.* 18/10/25 12:28:03 WARN SparkConf: The configuration key 'spark.akka.frameSize' has been deprecated as of Spark 1.6 and may be removed in the future. Please use the new key 'spark.rpc.message.maxSize' instead. 18/10/25 12:28:04 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable \u5e76\u6700\u7ec8\u505c\u7559\u5728spark-xsql\u7684\u63d0\u793a\u7b26\u4e0a\uff1a spark-xsql","title":"XSQL\u5185\u7f6eSpark\u7684\u5b89\u88c5\u5305"},{"location":"getting_started/Getting_Started/#xsqlspark_1","text":"XSQL\u63d2\u4ef6\u662f\u4e00\u4e2a\u538b\u7f29\u5305\uff0c\u4e00\u822c\u4ee5 XSQL\u7248\u672c\u53f7 +plugin+ Spark\u7248\u672c\u53f7 \u6765\u547d\u540d\uff08\u4f8b\u5982\uff1axsql-0.6.0-plugin-spark-2.4.3.tgz\uff09\u3002\u56e0\u6b64\u4f60\u9700\u8981\u786e\u5b9a\u81ea\u5df1\u7684\u673a\u5668\u4e0a\u5df2\u7ecf\u6709\u4e86Spark\u5ba2\u6237\u7aef\uff0c\u5e76\u4e14\u7248\u672c\u4e0eXSQL\u6240\u5bf9\u5e94\u7684Spark\u7248\u672c\u4e00\u81f4\uff0c\u5426\u5219\u53ef\u80fd\u5bfc\u81f4\u8fd0\u884c\u51fa\u9519\u3002 \u4f60\u9700\u8981\u9996\u5148\u5c06XSQL\u63d2\u4ef6\u89e3\u538b\u7f29\u5230Spark\u76ee\u5f55\u4e0b\uff0c\u4f8b\u5982\uff1a tar zxvf xsql-0.6.0-plugin-spark-2.4.3.tgz -C $SPARK_HOME \u8fd9\u6837\u5b9e\u9645\u4f1a\u5728Spark\u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2a\u4fdd\u62a4\u4e86XSQL\u6240\u9700\u8981\u7684jar\u6587\u4ef6\u7684\u76ee\u5f55xsql-jars\uff0c\u8fd8\u4f1a\u5728$SPARK_HOME/bin\u76ee\u5f55\u521b\u5efa\u4e00\u4e2aspark-xsql\u7684\u811a\u672c\u3002 \u7136\u540e\u8fdb\u5165Spark\u7684conf\u76ee\u5f55\uff1a cd $SPARK_HOME/conf \u9700\u8981\u521b\u5efaXSQL\u6240\u9700\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u4f8b\u5982\uff1a vi xsql.conf \u5411xsql.conf\u5199\u5165\u4f60\u6240\u9700\u7684\u6570\u636e\u6e90\u914d\u7f6e\uff08\u8bf7\u53c2\u7167 Configuration \u4ecb\u7ecd\u7684\u4f8b\u5b50\uff09\u3002 \u6700\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u542f\u52a8spark-xsql\u547d\u4ee4\u4e86\uff0c\u8bf7\u53c2\u7167 XSQL\u5185\u7f6eSpark\u7684\u5b89\u88c5\u5305 \u3002 \u6ce8\u610f\uff1aXSQL\u5c06\u9ed8\u8ba4\u52a0\u8f7d $SPARK_HOME/conf/xsql.conf \u3002\u5f53\u7136\uff0cxsql.conf\u4e0d\u4e00\u5b9a\u8981\u653e\u5728conf\u76ee\u5f55\u4e0b\uff0c\u53ef\u4ee5\u662f\u7528\u6237\u60f3\u8981\u7684\u4efb\u4f55\u4f4d\u7f6e\uff0c\u4f60\u5c06\u53ef\u4ee5\u5728 XSQL\u914d\u7f6e \u627e\u5230\u5bf9\u5e94\u7684\u914d\u7f6e\u3002","title":"XSQL\u4f5c\u4e3aSpark\u63d2\u4ef6"},{"location":"getting_started/Getting_Started/#xsql-cli","text":"","title":"\u542f\u52a8XSQL Cli\u7684\u6ce8\u610f\u4e8b\u9879"},{"location":"getting_started/Getting_Started/#configuration","text":"\u9996\u5148\u8fdb\u5165conf\u76ee\u5f55\uff1a cd xsql/conf \u7528\u6237\u9700\u8981\u5c06xsql/conf\u76ee\u5f55\u4e0b\u7684xsql.conf.template\u91cd\u547d\u540d\u4e3axsql.conf\uff1a mv xsql.conf.template xsql.conf \u6253\u5f00xsql.conf\uff1a vi xsql.conf \u53ef\u4ee5\u770b\u5230\u4ee5\u4e0b\u5185\u5bb9\uff1a # Example: # spark.xsql.datasources default # spark.xsql.default.database mysqltest # spark.xsql.datasource.default.type mysql # spark.xsql.datasource.default.url jdbc:mysql://127.0.0.1:2336 # spark.xsql.datasource.default.user user # spark.xsql.datasource.default.password password # spark.xsql.datasource.default.version 5.6.19 \u6b64\u6570\u636e\u6e90\u662f\u63d0\u4f9b\u7ed9\u7528\u6237\u5b66\u4e60\u4f7f\u7528\uff0c\u6240\u4ee5\u5982\u679c\u7528\u6237\u60f3\u8981\u62ff\u6b64\u914d\u7f6e\u7ec3\u624b\uff0c\u8bf7\u5c06\"#\"\u53bb\u6389\uff0c\u5e76\u4e14\u5c06\u5404\u4e2a\u914d\u7f6e\u8c03\u6574\u4e3a\u4f60\u51c6\u5907\u597d\u7684\u6570\u636e\u6e90\u3002\u4f8b\u5982\uff1a spark.xsql.datasources default spark.xsql.default.database real_database spark.xsql.datasource.default.type mysql spark.xsql.datasource.default.url jdbc:mysql://127.0.0.1:2336 spark.xsql.datasource.default.user real_username spark.xsql.datasource.default.password real_password spark.xsql.datasource.default.version 5.6.19 \u8fd9\u4e2a\u914d\u7f6e\u4e2d\u6307\u5b9a\u4e86\u4e00\u4e2a\u540d\u4e3adefault\u7684\u6570\u636e\u6e90\uff0cXSQL\u9ed8\u8ba4\u4f1a\u9009\u62e9\u522b\u540d\u662fdefault\u7684\u6570\u636e\u6e90\u4f5c\u4e3a\u9ed8\u8ba4\u6570\u636e\u6e90\u3002\u672c\u4f8b\u4e2d\uff0cdefault\u6570\u636e\u6e90\u7684\u7c7b\u578b\u662fMySQL\uff0c\u6b64\u5916\u8fd8\u63d0\u4f9b\u4e86default\u6570\u636e\u6e90\u7684\u5176\u4ed6\u8fde\u63a5\u914d\u7f6e\u4fe1\u606f\u53ca\u7248\u672c\u53f7\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cXSQL\u9664\u4e86\u9009\u62e9default\u6570\u636e\u6e90\u4f5c\u4e3a\u5f53\u524d\u6570\u636e\u6e90\u5916\uff0c\u8fd8\u4f1a\u9009\u62e9\u9ed8\u8ba4\u6570\u636e\u6e90\u4e2d\u7684default\u6570\u636e\u5e93\u5b9e\u4f8b\u4f5c\u4e3a\u9ed8\u8ba4\u6570\u636e\u5e93\uff0c\u8fd9\u6709\u4e9b\u7c7b\u4f3c\u4e8e\u8fdb\u5165Hive\u547d\u4ee4\u884c\u540e\u7684\u9ed8\u8ba4\u6570\u636e\u5e93\u3002\u5982\u679c\u7528\u6237\u63d0\u4f9b\u7684\u6570\u636e\u6e90\u4e2d\u6ca1\u6709\u540d\u4e3adefault\u7684\u6570\u636e\u5e93\u5b9e\u4f8b\uff0c\u90a3\u4e48\u9700\u8981\u901a\u8fc7 spark.xsql.default.database \u6307\u5b9a\u9ed8\u8ba4\u6570\u636e\u5e93\u3002\u672c\u4f8b\u4e2d\uff0c\u901a\u8fc7 spark.xsql.default.database \u6307\u5b9a\u9ed8\u8ba4\u6570\u636e\u5e93\u4e3a\u5b9e\u9645\u5b58\u5728\u7684real_database\u3002\u66f4\u591a\u7684\u914d\u7f6e\u4ecb\u7ecd\u8bf7\u9605\u8bfb Configurations","title":"Configuration"},{"location":"getting_started/Getting_Started/#running","text":"\u5982\u679c\u4f60\u4e25\u683c\u6309\u7167 Installation \u4e00\u8282\u7684\u65b9\u5f0f\u542f\u52a8\u4e86XSQL\uff0c\u73b0\u5728\u53ef\u4ee5\u6765\u770b\u770b\u6211\u4eec\u80fd\u505a\u4e9b\u4ec0\u4e48\uff1f\u6211\u4eec\u72b9\u5982\u521a\u521a\u7ecf\u8fc7\u4e86\u6fc0\u70c8\u7684\u98a4\u6296\u540e\u8131\u79bb\u4e86\u5730\u7403\u5f15\u529b\uff0c\u9762\u524d\u662f\u6d69\u6e3a\u3001\u5e7d\u6697\u7684\u592a\u7a7a\u3002\u6211\u5341\u5206\u7406\u89e3\u65b0\u7528\u6237\u5bf9\u4e8e\u4e00\u4e2a\u964c\u751f\u5de5\u5177\u7684\u6050\u60e7\uff0c\u4f46\u662fXSQL\u56e2\u961f\u59cb\u7ec8\u4e0e\u4f60\u540c\u5750\u5728\u540c\u4e00\u8258\u98de\u8239\u4e0a\u3002\u6682\u65f6\u4e0d\u59a8\u5c06XSQL\u7406\u89e3\u6210\u6211\u4eec\u6240\u719f\u77e5\u4e16\u754c\u7684MySQL\u6216Hive\uff0c\u5b83\u4eec\u80fd\u505a\u4ec0\u4e48\uff1f\u5730\u7403\u4e0a\u7684\u7528\u6237\u6bcf\u5929\u90fd\u5728\u4f7f\u7528\u8fd9\u4e24\u4e2a\u5de5\u5177\u3002\u5373\u4fbf\u5982\u6b64\uff0c\u7531\u4e8e\u5065\u5fd8\u662f\u4eba\u7c7b\u4e0e\u751f\u4ff1\u6765\u7684\u80fd\u529b\uff0c\u56e0\u6b64\u7edd\u5927\u591a\u6570\u7528\u6237\u4f9d\u7136\u4e60\u60ef\u4e8e\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\uff1a show databases; \u8fd9\u4e0d\u4ec5\u53ef\u4ee5\u6709\u6548\u6cbb\u6108\u4eba\u4eec\u7684\u5065\u5fd8\uff0c\u5bf9\u4e8e\u6211\u4eec\u800c\u8a00\u4e5f\u80fd\u51cf\u8f7b\u6050\u60e7\u3002\u6240\u4ee5\u8bf7\u5c1d\u8bd5\u8fd9\u6761\u547d\u4ee4\uff1a spark-xsql show databases; 18/10/29 15:23:44 INFO SparkXSQLShell: spark.enable.hiverc:true 18/10/29 15:23:44 INFO SparkXSQLShell: current SQL: show databases 18/10/29 15:23:48 WARN SparkXSQLShell: hive.cli.print.header not configured, so doesn't print colum's name. default MYSQL mysqltest Time taken: 0.028 s spark-xsql \u600e\u4e48\u6837\uff1f\u662f\u4e0d\u662f\u5f88\u719f\u6089\uff1f\u4f46\u662f\u4e5f\u662f\u6709\u533a\u522b\u7684\u3002\u7b2c\u4e00\u5217\u663e\u793a\u7684\u662fDatabase\u6240\u5c5eDataSource\u7684\u540d\u79f0\uff1b\u7b2c\u4e8c\u5217\u662fDataSource\u7684\u7c7b\u578b\uff08\u8fd9\u91cc\u662fMySQL\uff09\uff1b\u7b2c\u4e09\u5217\u662fDatabase\u7684\u540d\u79f0\u3002\u8fd9\u6837\u6211\u4eec\u80fd\u770b\u5230\u5728default\u6570\u636e\u6e90\u4e2d\u6709\u4e00\u4e2a\u540d\u4e3amysqltest\u7684Database\u3002 \u6709\u4e86\u4e0a\u9762\u7684\u6210\u529f\u7ecf\u9a8c\uff0c\u6211\u76f8\u4fe1\u4f60\u4f1a\u5927\u80c6\u4e00\u4e9b\uff0c\u5c1d\u8bd5\u4f7f\u7528Use\uff1a use mysqltest; \u6267\u884c\u4fe1\u606f\u5982\u4e0b\uff1a spark-xsql use mysqltest; 18/10/29 15:28:33 INFO SparkXSQLShell: current SQL: use mysqltest 18/10/29 15:28:33 WARN SparkXSQLShell: hive.cli.print.header not configured, so doesn't print colum's name. Time taken: 0.028 s spark-xsql \u4e0eMySQL\u4e00\u6837\uff0c\u4f60\u5df2\u7ecf\u9009\u62e9mysqltest\u4f5c\u4e3a\u5f53\u524d\u7684Database\u3002\u4f60\u5e94\u8be5\u60f3\u8981\u770b\u770bmysqltest\u91cc\u9762\u6709\u54ea\u4e9bTable\uff0c\u4ee5\u6ee1\u8db3\u4f60\u7684\u597d\u5947\uff0c\u4e60\u60ef\u4e0a\u4f60\u4f1a\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\uff1a show tables; \u5728XSQL\u4e2d\u6267\u884c\u65f6\uff0c\u4f60\u5c06\u770b\u5230\uff1a spark-xsql show tables; 18/10/29 15:30:27 INFO SparkXSQLShell: current SQL: show tables 18/10/29 15:30:28 WARN SparkXSQLShell: hive.cli.print.header not configured, so doesn't print colum's name. default mysqltest activities false default mysqltest course false default mysqltest geonames false default mysqltest geonames_small false default mysqltest person false default mysqltest taxis false default mysqltest taxis_type false default mysqltest test123 false Time taken: 0.066 s spark-xsql \u8fd9\u8ddf\u4f60\u5728MySQL\u4e2d\u6267\u884c\u7684\u7ed3\u679c\u662f\u4e0d\u662f\u4e5f\u975e\u5e38\u76f8\u4f3c\uff0c\u4e0d\u8fc7\u4ecd\u7136\u6709\u4e00\u5c0f\u70b9\u4e0d\u540c\u4e4b\u5904\u2014\u2014\u7b2c\u4e00\u5217\u663e\u793a\u7684\u662fTable\u6240\u5c5eDataSource\u7684\u540d\u79f0\uff1b\u7b2c\u4e8c\u5217\u662fTable\u6240\u5c5eDatabase\u7684\u540d\u79f0\uff1b\u7b2c\u4e09\u5217\u662fTable\u7684\u540d\u79f0\uff1b\u7b2c\u56db\u5217\u8868\u793aTable\u662f\u5426\u662f\u4e34\u65f6\u8868\u3002 \u5728\u672c\u8282\u5185\u5bb9\u7684\u6700\u540e\uff0c\u6211\u4eec\u9009\u62e9course\u8868\u4f5c\u4e3a\u67e5\u8be2\u4f8b\u5b50\uff0c\u8bf7\u5728XSQL\u4e2d\u8f93\u5165\uff1a select * from course; \u4f60\u5c06\u770b\u5230\u4ee5\u4e0b\u8f93\u51fa\u5185\u5bb9\uff1a spark-xsql select * from course; 18/10/29 15:38:15 INFO SparkXSQLShell: current SQL: select * from course 18/10/29 15:38:15 WARN SparkXSQLShell: hive.cli.print.header not configured, so doesn't print colum's name. 1 math 2 english 3 chinese Time taken: 0.148 s spark-xsql \u8fd9\u5f20\u6d4b\u8bd5\u7528\u9014\u7684\u8868\u4e2d\u5171\u6709\u4e09\u6761\u6570\u636e\u8f93\u51fa\u3002 \u672c\u8282\u4ee5\u6700\u7b80\u5355\u7684\u65b9\u5f0f\uff0c\u5411\u7528\u6237\u4ecb\u7ecd\u4e86XSQL\u4e2d\u8fd0\u884cDDL\u548c\u67e5\u8be2SQL\u7684\u4f8b\u5b50\u3002\u6709\u5173\u66f4\u591aXSQL\u81ea\u8eab\u8bed\u6cd5\u7684\u4ecb\u7ecd\u8bf7\u9605\u8bfb Special Syntax \u4e2d\u7684\u5185\u5bb9\u3002","title":"Running"},{"location":"performance_report/common/","text":"\u200b XSQL\u5df2\u7ecf\u5bf9\u591a\u79cd\u6570\u636e\u6e90\u8fdb\u884c\u4e86\u652f\u6301\uff0c\u5b83\u4eec\u5206\u522b\u662f\uff1a Hive MySQL Elasticsearch MongoDB HBASE Redis Druid Oracle\uff08Pending\uff09 Clickhouse\uff08Pending\uff09","title":"Common"},{"location":"performance_report/common/#hive","text":"","title":"Hive"},{"location":"performance_report/common/#mysql","text":"","title":"MySQL"},{"location":"performance_report/common/#elasticsearch","text":"","title":"Elasticsearch"},{"location":"performance_report/common/#mongodb","text":"","title":"MongoDB"},{"location":"performance_report/common/#hbase","text":"","title":"HBASE"},{"location":"performance_report/common/#redis","text":"","title":"Redis"},{"location":"performance_report/common/#druid","text":"Oracle\uff08Pending\uff09 Clickhouse\uff08Pending\uff09","title":"Druid"},{"location":"performance_report/elasticsearch/","text":"Elasticsearch\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a Elasticsearch\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u5206\u4e3a\u57fa\u4e8eTPCDS\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u548c\u57fa\u4e8e\u4e1a\u52a1\u6570\u636e\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u3002 \u6d4b\u8bd5\u73af\u5883 \u64cd\u4f5c\u7cfb\u7edf \uff1a CentOS release 6.2 (Final) \u200b \u865a\u62df\u673a\u7248\u672c \uff1a Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode) \u200b \u6d4b\u8bd5\u673a\u5668 \uff1a client01v.qss.zzzc.qihoo.net\u3001clientadmin.dfs.shbt.qihoo.net XSQL\u914d\u7f6e \uff1a Driver Memory\uff1a5G Executor Instances\uff1a100 Executor Memory\uff1a1536M\u62165G \u57fa\u4e8eTPCDS\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a \u6d4b\u8bd5\u76ee\u6807 \u672c\u6b21\u6d4b\u8bd5\u6db5\u76d6\u6027\u80fd\u6d4b\u8bd5\u4e0e\u529f\u80fd\u6d4b\u8bd5\uff0c\u4e3b\u8981\u5305\u542b\u4e24\u4e2a\u76ee\u7684\uff1a \u5c55\u793aXSQL\u5728\u9488\u5bf9\u5355\u6570\u636e\u6e90\u3001\u591a\u6570\u636e\u6e90\u7684SQL\u89e3\u6790\u53ca\u6267\u884c\u80fd\u529b \u627e\u51faXSQL\u5728\u590d\u6742SQL\u5904\u7406\u4ee5\u53ca\u5927\u89c4\u6a21\u6570\u636e\u96c6\u8ba1\u7b97\u65f6\u5b58\u5728\u7684\u95ee\u9898 \u6d4b\u8bd5\u6570\u636e\u96c6\u5927\u5c0f\uff1a1G/9710124 \u6d4b\u8bd5\u8bed\u53e5\u96c6 \u7f16\u53f7 SQL\u8bed\u53e5 1 select * from myes.xitong_xsql_test.taxis 2 select * from myes.xitong_xsql_test.taxis where do_location_id=\"249\" 3 select * from myes.xitong_xsql_test.taxis where fare_amount 3 4 select * from myes.xitong_xsql_test.taxis where dropoff_datetime is null 5 select * from myes.xitong_xsql_test.taxis where dropoff_datetime is not null 6 select * from myes.xitong_xsql_test.taxis where rate_code_id in (\"1\",\"2\") 7 select vendor_id,total_amount,trip_distance from myes.xitong_xsql_test.taxis where payment_type = \"1\" and tolls_amount = 0 8 select * from myes.xitong_xsql_test.taxis order by total_amount desc 9 select * from myes.xitong_xsql_test.taxis order by vendor_id 10 select * from myes.xitong_xsql_test.taxis limit 20 11 select count(payment_type),sum(total_amount) from myes.xitong_xsql_test.taxis 12 select avg(population) from myes.xitong_xsql_test.geonames_all 13 select payment_type from myes.xitong_xsql_test.taxis group by payment_type 14 select count(payment_type),payment_type from myes.xitong_xsql_test.taxis group by payment_type 15 select count(payment_type),payment_type,total_amount from myes.xitong_xsql_test.taxis group by payment_type,total_amount 16 select sum(total_amount) from myes.xitong_xsql_test.taxis group by vendor_id 17 select sum(population) from myes.xitong_xsql_test.geonames_all group by country_code,timezone 18 select sum(total_amount),vendor_id,payment_type from myes.xitong_xsql_test.taxis group by vendor_id,payment_type 19 select max(population) from myes.xitong_xsql_test.geonames_all group by country_code 20 select min(population),country_code from myes.xitong_xsql_test.geonames_all group by country_code 21 select avg(population) from myes.xitong_xsql_test.geonames_all group by country_code 22 select count(population),country_code from myes.xitong_xsql_test.geonames_all group by country_code order by country_code limit 100 23 select avg(population),max(population),timezone,country_code from myes.xitong_xsql_test.geonames_all group by country_code,timezone order by max(population) limit 100 24 select count(population),timezone,country_code from myes.xitong_xsql_test.geonames_all group by country_code,timezone order by count(population) limit 100 25 select distinct dem,location from myes.xitong_xsql_test.geonames_all 26 select count(distinct passenger_count) from myes.xitong_xsql_test.taxis \u6d4b\u8bd5\u7ed3\u679c\uff08\u5355\u4f4d\uff1a\u79d2\uff09 \u6267\u884c\u5f15\u64ce 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 XSQL [Pushdown] 0.211 0.163 0.173 0.223 0.224 0.249 0.262 0.271 0.195 0.227 0.288 0.158 0.135 0.134 0.198 0.138 0.226 0.161 0.351 0.137 0.132 0.205 0.736 0.559 0.487 0.137 ES 0.147 0.088 0.102 0.177 0.148 0.162 0.165 0.16 0.161 0.178 0.098 0.113 0.08 0.08 0.1 0.098 0.173 0.114 0.116 0.097 0.114 0.145 0.286 0.243 0.262 0.114 \u7ed3\u8bba XSQL [Pushdown]\u76f8\u6bd4\u4e8e\u76f4\u63a5\u8c03\u7528Elasticsearch\u7684API\uff0c\u6267\u884c\u6027\u80fd\u4ec5\u6709\u8f7b\u5fae\u7684\u635f\u8017\u3002 \u57fa\u4e8e\u4e1a\u52a1\u6570\u636e\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a \u6d4b\u8bd5\u76ee\u6807 \u672c\u6b21\u6d4b\u8bd5\u6db5\u76d6\u6027\u80fd\u6d4b\u8bd5\u4e0e\u529f\u80fd\u6d4b\u8bd5\uff0c\u4e3b\u8981\u5305\u542b\u4e24\u4e2a\u76ee\u7684\uff1a \u5c55\u793aXSQL\u5728\u9488\u5bf9\u5355\u6570\u636e\u6e90\u3001\u591a\u6570\u636e\u6e90\u7684SQL\u89e3\u6790\u53ca\u6267\u884c\u80fd\u529b \u627e\u51faXSQL\u5728\u590d\u6742SQL\u5904\u7406\u4ee5\u53ca\u5927\u89c4\u6a21\u6570\u636e\u96c6\u8ba1\u7b97\u65f6\u5b58\u5728\u7684\u95ee\u9898 \u6d4b\u8bd5\u6570\u636e\u96c6\u5927\u5c0f \u6570\u636e\u6e90 50 G/63178212 docs 100 G/123714760 docs 200 G/260567692 docs 500G/371503959 docs 1 T /466168986 docs Elasticsearch logsget-user-qdas-newuser-channel-all.msdocker_frontmidres1 logsget-user-qdas-newuser-channel-all.huajiao_frontmidres1 logsget-user-qdas-newuser-channel-all.chromium_frontmidres1 logsget-user-pc-profile-v1.profile logsget-user-profile.profile \u6d4b\u8bd5\u8bed\u53e5\u96c6 \u9009\u62e9\u64cd\u4f5c \u7f16\u53f7 SQL 1 SELECT m2, active_channel FROM msdocker_frontmidres1 WHERE m2 IS NOT NULL LIMIT 10 2 SELECT m2, active_channel FROM huajiao_frontmidres1 WHERE m2 IS NOT NULL LIMIT 10 3 SELECT m2, active_channel FROM chromium_frontmidres1 WHERE m2 IS NOT NULL LIMIT 10 4 SELECT city, ip FROM logsget_user_pc_profile_v1.profile WHERE city IS NOT NULL LIMIT 10 5 SELECT city, ip FROM logsget_user_profile.profile WHERE city IS NOT NULL LIMIT 10 \u805a\u5408\u64cd\u4f5c \u7f16\u53f7 SQL 1 SELECT appkey, COUNT(m2) FROM msdocker_frontmidres1 WHERE m2 IS NOT NULL GROUP BY appkey LIMIT 10 2 SELECT appkey, COUNT(m2) FROM huajiao_frontmidres1 WHERE m2 IS NOT NULL GROUP BY appkey LIMIT 10 3 SELECT appkey, COUNT(m2) FROM chromium_frontmidres1 WHERE m2 IS NOT NULL GROUP BY appkey LIMIT 10 4 SELECT province, COUNT(ip), SUM(pro_daohang), AVG(pro_daohang) FROM logsget_user_pc_profile_v1.profile WHERE ip IS NOT NULL GROUP BY province LIMIT 10 5 SELECT pro_zhushou, COUNT(m2), SUM(pro_info_flow), AVG(pro_info_flow) FROM logsget_user_profile.profile WHERE m2 IS NOT NULL GROUP BY pro_zhushou LIMIT 10 \u5b50\u67e5\u8be2\u64cd\u4f5c \u8fde\u63a5\u64cd\u4f5c \u6d4b\u8bd5\u7ed3\u679c\uff08\u5355\u4f4d\uff1a\u79d2\uff09 \u9009\u62e9\u64cd\u4f5c 50G/63178212 docs 100G/123714760 docs 200G/260567692 docs 500G/371503959 docs 1T/466168986 docs Elasticsearch 0.399 s 0.558 s 0.949 s 1.080 s 0.381 s XSQL Pushdown [Elasticsearch] 0.426 s 0.575 s 1.025 s 1.107 s 0.407 s XSQL [Elasticsearch] 324.813 568.389 1045.91 1121.31 271.082 \u805a\u5408\u64cd\u4f5c 50G/63178212 docs 100G/123714760 docs 200G/260567692 docs 500G/371503959 docs 1T/466168986 docs Elasticsearch 0.774 s 1.436 s 2.665 s 0.096 s 0.094 s XSQL Pushdown [Elasticsearch] 0.790 s 1.478 s 2.671 s 0.135 s 0.130 s XSQL [Elasticsearch] 338.514 896.007 2507.09 3915.32 3886.388 \u5b50\u67e5\u8be2\u64cd\u4f5c ES\u672c\u8eab\u4e0d\u652f\u6301where\u6761\u4ef6\u540e\u7684\u5b50\u67e5\u8be2\u64cd\u4f5c\uff0c\u6545\u672c\u62a5\u544a\u4e0d\u505a\u6b64\u5904\u7684\u6d4b\u8bd5\u3002 \u8fde\u63a5\u64cd\u4f5c ES\u672c\u8eab\u652f\u6301\u7684\u8fde\u63a5\u64cd\u4f5c\u975e\u5e38\u6709\u9650\u4e14\u6602\u8d35\uff0c\u6545\u672c\u62a5\u544a\u4e0d\u505a\u6b64\u5904\u7684\u6d4b\u8bd5\u3002 \u7ed3\u8bba XSQL [Pushdown]\u76f8\u6bd4\u4e8e\u76f4\u63a5\u8c03\u7528Elasticsearch\u7684API\uff0c\u6267\u884c\u6027\u80fd\u4ec5\u6709\u7ea630\u6beb\u79d2\u7684\u635f\u8017\u3002 XSQL\u501f\u52a9\u4e8eSpark\u6267\u884c\u65f6\uff0c\u6267\u884c\u6548\u7387\u5f88\u4f4e\u3002","title":"Elasticsearch"},{"location":"performance_report/elasticsearch/#elasticsearch","text":"Elasticsearch\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u5206\u4e3a\u57fa\u4e8eTPCDS\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u548c\u57fa\u4e8e\u4e1a\u52a1\u6570\u636e\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u3002","title":"Elasticsearch\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a"},{"location":"performance_report/elasticsearch/#_1","text":"\u64cd\u4f5c\u7cfb\u7edf \uff1a CentOS release 6.2 (Final) \u200b \u865a\u62df\u673a\u7248\u672c \uff1a Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode) \u200b \u6d4b\u8bd5\u673a\u5668 \uff1a client01v.qss.zzzc.qihoo.net\u3001clientadmin.dfs.shbt.qihoo.net XSQL\u914d\u7f6e \uff1a Driver Memory\uff1a5G Executor Instances\uff1a100 Executor Memory\uff1a1536M\u62165G","title":"\u6d4b\u8bd5\u73af\u5883"},{"location":"performance_report/elasticsearch/#tpcds","text":"","title":"\u57fa\u4e8eTPCDS\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a"},{"location":"performance_report/elasticsearch/#_2","text":"\u672c\u6b21\u6d4b\u8bd5\u6db5\u76d6\u6027\u80fd\u6d4b\u8bd5\u4e0e\u529f\u80fd\u6d4b\u8bd5\uff0c\u4e3b\u8981\u5305\u542b\u4e24\u4e2a\u76ee\u7684\uff1a \u5c55\u793aXSQL\u5728\u9488\u5bf9\u5355\u6570\u636e\u6e90\u3001\u591a\u6570\u636e\u6e90\u7684SQL\u89e3\u6790\u53ca\u6267\u884c\u80fd\u529b \u627e\u51faXSQL\u5728\u590d\u6742SQL\u5904\u7406\u4ee5\u53ca\u5927\u89c4\u6a21\u6570\u636e\u96c6\u8ba1\u7b97\u65f6\u5b58\u5728\u7684\u95ee\u9898","title":"\u6d4b\u8bd5\u76ee\u6807"},{"location":"performance_report/elasticsearch/#1g9710124","text":"","title":"\u6d4b\u8bd5\u6570\u636e\u96c6\u5927\u5c0f\uff1a1G/9710124"},{"location":"performance_report/elasticsearch/#_3","text":"\u7f16\u53f7 SQL\u8bed\u53e5 1 select * from myes.xitong_xsql_test.taxis 2 select * from myes.xitong_xsql_test.taxis where do_location_id=\"249\" 3 select * from myes.xitong_xsql_test.taxis where fare_amount 3 4 select * from myes.xitong_xsql_test.taxis where dropoff_datetime is null 5 select * from myes.xitong_xsql_test.taxis where dropoff_datetime is not null 6 select * from myes.xitong_xsql_test.taxis where rate_code_id in (\"1\",\"2\") 7 select vendor_id,total_amount,trip_distance from myes.xitong_xsql_test.taxis where payment_type = \"1\" and tolls_amount = 0 8 select * from myes.xitong_xsql_test.taxis order by total_amount desc 9 select * from myes.xitong_xsql_test.taxis order by vendor_id 10 select * from myes.xitong_xsql_test.taxis limit 20 11 select count(payment_type),sum(total_amount) from myes.xitong_xsql_test.taxis 12 select avg(population) from myes.xitong_xsql_test.geonames_all 13 select payment_type from myes.xitong_xsql_test.taxis group by payment_type 14 select count(payment_type),payment_type from myes.xitong_xsql_test.taxis group by payment_type 15 select count(payment_type),payment_type,total_amount from myes.xitong_xsql_test.taxis group by payment_type,total_amount 16 select sum(total_amount) from myes.xitong_xsql_test.taxis group by vendor_id 17 select sum(population) from myes.xitong_xsql_test.geonames_all group by country_code,timezone 18 select sum(total_amount),vendor_id,payment_type from myes.xitong_xsql_test.taxis group by vendor_id,payment_type 19 select max(population) from myes.xitong_xsql_test.geonames_all group by country_code 20 select min(population),country_code from myes.xitong_xsql_test.geonames_all group by country_code 21 select avg(population) from myes.xitong_xsql_test.geonames_all group by country_code 22 select count(population),country_code from myes.xitong_xsql_test.geonames_all group by country_code order by country_code limit 100 23 select avg(population),max(population),timezone,country_code from myes.xitong_xsql_test.geonames_all group by country_code,timezone order by max(population) limit 100 24 select count(population),timezone,country_code from myes.xitong_xsql_test.geonames_all group by country_code,timezone order by count(population) limit 100 25 select distinct dem,location from myes.xitong_xsql_test.geonames_all 26 select count(distinct passenger_count) from myes.xitong_xsql_test.taxis","title":"\u6d4b\u8bd5\u8bed\u53e5\u96c6"},{"location":"performance_report/elasticsearch/#_4","text":"\u6267\u884c\u5f15\u64ce 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 XSQL [Pushdown] 0.211 0.163 0.173 0.223 0.224 0.249 0.262 0.271 0.195 0.227 0.288 0.158 0.135 0.134 0.198 0.138 0.226 0.161 0.351 0.137 0.132 0.205 0.736 0.559 0.487 0.137 ES 0.147 0.088 0.102 0.177 0.148 0.162 0.165 0.16 0.161 0.178 0.098 0.113 0.08 0.08 0.1 0.098 0.173 0.114 0.116 0.097 0.114 0.145 0.286 0.243 0.262 0.114","title":"\u6d4b\u8bd5\u7ed3\u679c\uff08\u5355\u4f4d\uff1a\u79d2\uff09"},{"location":"performance_report/elasticsearch/#_5","text":"XSQL [Pushdown]\u76f8\u6bd4\u4e8e\u76f4\u63a5\u8c03\u7528Elasticsearch\u7684API\uff0c\u6267\u884c\u6027\u80fd\u4ec5\u6709\u8f7b\u5fae\u7684\u635f\u8017\u3002","title":"\u7ed3\u8bba"},{"location":"performance_report/elasticsearch/#_6","text":"","title":"\u57fa\u4e8e\u4e1a\u52a1\u6570\u636e\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a"},{"location":"performance_report/elasticsearch/#_7","text":"\u672c\u6b21\u6d4b\u8bd5\u6db5\u76d6\u6027\u80fd\u6d4b\u8bd5\u4e0e\u529f\u80fd\u6d4b\u8bd5\uff0c\u4e3b\u8981\u5305\u542b\u4e24\u4e2a\u76ee\u7684\uff1a \u5c55\u793aXSQL\u5728\u9488\u5bf9\u5355\u6570\u636e\u6e90\u3001\u591a\u6570\u636e\u6e90\u7684SQL\u89e3\u6790\u53ca\u6267\u884c\u80fd\u529b \u627e\u51faXSQL\u5728\u590d\u6742SQL\u5904\u7406\u4ee5\u53ca\u5927\u89c4\u6a21\u6570\u636e\u96c6\u8ba1\u7b97\u65f6\u5b58\u5728\u7684\u95ee\u9898","title":"\u6d4b\u8bd5\u76ee\u6807"},{"location":"performance_report/elasticsearch/#_8","text":"\u6570\u636e\u6e90 50 G/63178212 docs 100 G/123714760 docs 200 G/260567692 docs 500G/371503959 docs 1 T /466168986 docs Elasticsearch logsget-user-qdas-newuser-channel-all.msdocker_frontmidres1 logsget-user-qdas-newuser-channel-all.huajiao_frontmidres1 logsget-user-qdas-newuser-channel-all.chromium_frontmidres1 logsget-user-pc-profile-v1.profile logsget-user-profile.profile","title":"\u6d4b\u8bd5\u6570\u636e\u96c6\u5927\u5c0f"},{"location":"performance_report/elasticsearch/#_9","text":"\u9009\u62e9\u64cd\u4f5c \u7f16\u53f7 SQL 1 SELECT m2, active_channel FROM msdocker_frontmidres1 WHERE m2 IS NOT NULL LIMIT 10 2 SELECT m2, active_channel FROM huajiao_frontmidres1 WHERE m2 IS NOT NULL LIMIT 10 3 SELECT m2, active_channel FROM chromium_frontmidres1 WHERE m2 IS NOT NULL LIMIT 10 4 SELECT city, ip FROM logsget_user_pc_profile_v1.profile WHERE city IS NOT NULL LIMIT 10 5 SELECT city, ip FROM logsget_user_profile.profile WHERE city IS NOT NULL LIMIT 10 \u805a\u5408\u64cd\u4f5c \u7f16\u53f7 SQL 1 SELECT appkey, COUNT(m2) FROM msdocker_frontmidres1 WHERE m2 IS NOT NULL GROUP BY appkey LIMIT 10 2 SELECT appkey, COUNT(m2) FROM huajiao_frontmidres1 WHERE m2 IS NOT NULL GROUP BY appkey LIMIT 10 3 SELECT appkey, COUNT(m2) FROM chromium_frontmidres1 WHERE m2 IS NOT NULL GROUP BY appkey LIMIT 10 4 SELECT province, COUNT(ip), SUM(pro_daohang), AVG(pro_daohang) FROM logsget_user_pc_profile_v1.profile WHERE ip IS NOT NULL GROUP BY province LIMIT 10 5 SELECT pro_zhushou, COUNT(m2), SUM(pro_info_flow), AVG(pro_info_flow) FROM logsget_user_profile.profile WHERE m2 IS NOT NULL GROUP BY pro_zhushou LIMIT 10 \u5b50\u67e5\u8be2\u64cd\u4f5c \u8fde\u63a5\u64cd\u4f5c","title":"\u6d4b\u8bd5\u8bed\u53e5\u96c6"},{"location":"performance_report/elasticsearch/#_10","text":"\u9009\u62e9\u64cd\u4f5c 50G/63178212 docs 100G/123714760 docs 200G/260567692 docs 500G/371503959 docs 1T/466168986 docs Elasticsearch 0.399 s 0.558 s 0.949 s 1.080 s 0.381 s XSQL Pushdown [Elasticsearch] 0.426 s 0.575 s 1.025 s 1.107 s 0.407 s XSQL [Elasticsearch] 324.813 568.389 1045.91 1121.31 271.082 \u805a\u5408\u64cd\u4f5c 50G/63178212 docs 100G/123714760 docs 200G/260567692 docs 500G/371503959 docs 1T/466168986 docs Elasticsearch 0.774 s 1.436 s 2.665 s 0.096 s 0.094 s XSQL Pushdown [Elasticsearch] 0.790 s 1.478 s 2.671 s 0.135 s 0.130 s XSQL [Elasticsearch] 338.514 896.007 2507.09 3915.32 3886.388 \u5b50\u67e5\u8be2\u64cd\u4f5c ES\u672c\u8eab\u4e0d\u652f\u6301where\u6761\u4ef6\u540e\u7684\u5b50\u67e5\u8be2\u64cd\u4f5c\uff0c\u6545\u672c\u62a5\u544a\u4e0d\u505a\u6b64\u5904\u7684\u6d4b\u8bd5\u3002 \u8fde\u63a5\u64cd\u4f5c ES\u672c\u8eab\u652f\u6301\u7684\u8fde\u63a5\u64cd\u4f5c\u975e\u5e38\u6709\u9650\u4e14\u6602\u8d35\uff0c\u6545\u672c\u62a5\u544a\u4e0d\u505a\u6b64\u5904\u7684\u6d4b\u8bd5\u3002","title":"\u6d4b\u8bd5\u7ed3\u679c\uff08\u5355\u4f4d\uff1a\u79d2\uff09"},{"location":"performance_report/elasticsearch/#_11","text":"XSQL [Pushdown]\u76f8\u6bd4\u4e8e\u76f4\u63a5\u8c03\u7528Elasticsearch\u7684API\uff0c\u6267\u884c\u6027\u80fd\u4ec5\u6709\u7ea630\u6beb\u79d2\u7684\u635f\u8017\u3002 XSQL\u501f\u52a9\u4e8eSpark\u6267\u884c\u65f6\uff0c\u6267\u884c\u6548\u7387\u5f88\u4f4e\u3002","title":"\u7ed3\u8bba"},{"location":"performance_report/hbase/","text":"HBase\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a HBase\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u4e3b\u8981\u662f\u57fa\u4e8eTPCDS\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u3002 \u6d4b\u8bd5\u73af\u5883 \u64cd\u4f5c\u7cfb\u7edf \uff1a CentOS release 6.2 (Final) \u200b \u865a\u62df\u673a\u7248\u672c \uff1a Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode) \u200b \u6d4b\u8bd5\u673a\u5668 \uff1a client01v.qss.zzzc.qihoo.net\u3001clientadmin.dfs.shbt.qihoo.net XSQL\u914d\u7f6e \uff1a Driver Memory\uff1a5G \u57fa\u4e8eTPCDS\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a \u6d4b\u8bd5\u76ee\u6807 \u672c\u6b21\u6d4b\u8bd5\u6db5\u76d6\u6027\u80fd\u6d4b\u8bd5\u4e0e\u529f\u80fd\u6d4b\u8bd5\uff0c\u65e8\u5728\u5bf9\u6bd4XSQL\u4e0b\u63a8\u4e0ehbase java api\u7684\u6027\u80fd\u8868\u73b0\u3002 \u6d4b\u8bd5\u6570\u636e\u96c6 \u6570\u636e\u91cf\u4e00\uff1a2W\u6761 \u6570\u636e\u91cf\u4e8c\uff1a10W\u6761 \u6570\u636e\u91cf\u4e09\uff1a100W\u6761 \u6570\u636e\u91cf\u56db\uff1a1000W\u6761 \u6d4b\u8bd5\u8bed\u53e5\u96c6 \u5e8f\u53f7 sql\u5185\u5bb9 1 select * from geonames where latitude = '40' 2 select * from geonames where dem = 1000 and dem 990 3 select * from geonames where dem 1000 and dem 990 4 select * from geonames where geoname_id in ('11110175','10099012') 5 select * from geonames where geoname_id like '111101%' 6 select * from geonames where geoname_id like '%682' 7 select * from geonames where geoname_id like '%9954%' 8 select * from geonames where name like 'Suh%' 9 select * from geonames where timezone like '%ne' 10 select * from geonames where timezone like '%sia%' 11 select * from geonames where timezone not in ('Asia/Dubai','Asia/Yerevan') 12 select * from geonames where alternatenames is null 13 select * from geonames where geoname_id = '10054920' and admin1_code is null 14 select * from geonames where alternatenames is not null 15 select name from geonames where longitude is not null 16 select geoname_id from geonames 17 select geoname_id from geonames where geoname_id like '%397' 18 select count(*) from geonames where alternatenames is not null \u6d4b\u8bd5\u7ed3\u679c\u6c47\u603b \u7ed3\u8bba \u5bf9\u4e8e\u67e5\u8be2\u7ed3\u679c\u5c11\u4e8e2\u4e07\u7684sql\uff0cxsql\u67e5\u8be2\u4e0e\u4f20\u7edf\u7684hbase java api\u76f8\u6bd4\uff0c\u6027\u80fd\u635f\u5931\u57281s\u4e4b\u5185\u3002 \u5bf9\u4e8e\u67e5\u8be2\u7ed3\u679c\u8fbe\u657010\u4e07\u7684sql\uff0cxsql\u7684\u6027\u80fd\u635f\u5931\u4ee5\u6bcf1\u4e07/\u5ef6\u8fdf0.5s\u7684\u589e\u957f\uff08\u89c1\u56fe\u4e2dsql\u8bed\u53e510\u300111\u300112\u300113\u548c15\u300116\u300117\uff09\u3002 xsql\u5728\u8303\u56f4\u8fc7\u6ee4\u65f6\u4e3a\u4e86\u5e94\u5bf9\u8d1f\u6570\u7684\u5e72\u6270\uff0c\u4f7f\u7528\u4e86\u66f4\u89c4\u8303\u7684\u9650\u754c\u8fc7\u6ee4\uff0c\u5bfc\u81f4\u6267\u884c\u65f6\u95f4\u7ffb\u500d\uff08\u89c1\u56fe\u4e2dsql\u8bed\u53e53\u30014\uff09\u3002","title":"HBase"},{"location":"performance_report/hbase/#hbase","text":"HBase\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u4e3b\u8981\u662f\u57fa\u4e8eTPCDS\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u3002","title":"HBase\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a"},{"location":"performance_report/hbase/#_1","text":"\u64cd\u4f5c\u7cfb\u7edf \uff1a CentOS release 6.2 (Final) \u200b \u865a\u62df\u673a\u7248\u672c \uff1a Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode) \u200b \u6d4b\u8bd5\u673a\u5668 \uff1a client01v.qss.zzzc.qihoo.net\u3001clientadmin.dfs.shbt.qihoo.net XSQL\u914d\u7f6e \uff1a Driver Memory\uff1a5G","title":"\u6d4b\u8bd5\u73af\u5883"},{"location":"performance_report/hbase/#tpcds","text":"","title":"\u57fa\u4e8eTPCDS\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a"},{"location":"performance_report/hbase/#_2","text":"\u672c\u6b21\u6d4b\u8bd5\u6db5\u76d6\u6027\u80fd\u6d4b\u8bd5\u4e0e\u529f\u80fd\u6d4b\u8bd5\uff0c\u65e8\u5728\u5bf9\u6bd4XSQL\u4e0b\u63a8\u4e0ehbase java api\u7684\u6027\u80fd\u8868\u73b0\u3002","title":"\u6d4b\u8bd5\u76ee\u6807"},{"location":"performance_report/hbase/#_3","text":"\u6570\u636e\u91cf\u4e00\uff1a2W\u6761 \u6570\u636e\u91cf\u4e8c\uff1a10W\u6761 \u6570\u636e\u91cf\u4e09\uff1a100W\u6761 \u6570\u636e\u91cf\u56db\uff1a1000W\u6761","title":"\u6d4b\u8bd5\u6570\u636e\u96c6"},{"location":"performance_report/hbase/#_4","text":"\u5e8f\u53f7 sql\u5185\u5bb9 1 select * from geonames where latitude = '40' 2 select * from geonames where dem = 1000 and dem 990 3 select * from geonames where dem 1000 and dem 990 4 select * from geonames where geoname_id in ('11110175','10099012') 5 select * from geonames where geoname_id like '111101%' 6 select * from geonames where geoname_id like '%682' 7 select * from geonames where geoname_id like '%9954%' 8 select * from geonames where name like 'Suh%' 9 select * from geonames where timezone like '%ne' 10 select * from geonames where timezone like '%sia%' 11 select * from geonames where timezone not in ('Asia/Dubai','Asia/Yerevan') 12 select * from geonames where alternatenames is null 13 select * from geonames where geoname_id = '10054920' and admin1_code is null 14 select * from geonames where alternatenames is not null 15 select name from geonames where longitude is not null 16 select geoname_id from geonames 17 select geoname_id from geonames where geoname_id like '%397' 18 select count(*) from geonames where alternatenames is not null","title":"\u6d4b\u8bd5\u8bed\u53e5\u96c6"},{"location":"performance_report/hbase/#_5","text":"","title":"\u6d4b\u8bd5\u7ed3\u679c\u6c47\u603b"},{"location":"performance_report/hbase/#_6","text":"\u5bf9\u4e8e\u67e5\u8be2\u7ed3\u679c\u5c11\u4e8e2\u4e07\u7684sql\uff0cxsql\u67e5\u8be2\u4e0e\u4f20\u7edf\u7684hbase java api\u76f8\u6bd4\uff0c\u6027\u80fd\u635f\u5931\u57281s\u4e4b\u5185\u3002 \u5bf9\u4e8e\u67e5\u8be2\u7ed3\u679c\u8fbe\u657010\u4e07\u7684sql\uff0cxsql\u7684\u6027\u80fd\u635f\u5931\u4ee5\u6bcf1\u4e07/\u5ef6\u8fdf0.5s\u7684\u589e\u957f\uff08\u89c1\u56fe\u4e2dsql\u8bed\u53e510\u300111\u300112\u300113\u548c15\u300116\u300117\uff09\u3002 xsql\u5728\u8303\u56f4\u8fc7\u6ee4\u65f6\u4e3a\u4e86\u5e94\u5bf9\u8d1f\u6570\u7684\u5e72\u6270\uff0c\u4f7f\u7528\u4e86\u66f4\u89c4\u8303\u7684\u9650\u754c\u8fc7\u6ee4\uff0c\u5bfc\u81f4\u6267\u884c\u65f6\u95f4\u7ffb\u500d\uff08\u89c1\u56fe\u4e2dsql\u8bed\u53e53\u30014\uff09\u3002","title":"\u7ed3\u8bba"},{"location":"performance_report/hive/","text":"Hive\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a Hive\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u5206\u4e3a\u57fa\u4e8eTPCDS\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u548c\u57fa\u4e8e\u4e1a\u52a1\u6570\u636e\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u3002 \u6d4b\u8bd5\u73af\u5883 \u64cd\u4f5c\u7cfb\u7edf \uff1a CentOS release 6.2 (Final) \u200b \u865a\u62df\u673a\u7248\u672c \uff1a Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode) \u200b \u6d4b\u8bd5\u673a\u5668 \uff1a client01v.qss.zzzc.qihoo.net\u3001clientadmin.dfs.shbt.qihoo.net XSQL\u914d\u7f6e \uff1a Driver Memory\uff1a5G Executor Instances\uff1a100 Executor Memory\uff1a1536M\u62165G \u57fa\u4e8eTPCDS\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a \u6d4b\u8bd5\u76ee\u6807 \u672c\u6b21\u6d4b\u8bd5\u6db5\u76d6\u6027\u80fd\u6d4b\u8bd5\u4e0e\u529f\u80fd\u6d4b\u8bd5\uff0c\u4e3b\u8981\u5305\u542b\u4e24\u4e2a\u76ee\u7684\uff1a \u5c55\u793aXSQL\u5728\u9488\u5bf9\u5355\u6570\u636e\u6e90\u3001\u591a\u6570\u636e\u6e90\u7684SQL\u89e3\u6790\u53ca\u6267\u884c\u80fd\u529b \u627e\u51faXSQL\u5728\u590d\u6742SQL\u5904\u7406\u4ee5\u53ca\u5927\u89c4\u6a21\u6570\u636e\u96c6\u8ba1\u7b97\u65f6\u5b58\u5728\u7684\u95ee\u9898 \u6d4b\u8bd5\u6570\u636e\u96c6\u5927\u5c0f\uff1a1G/9710124 \u6d4b\u8bd5\u8bed\u53e5\u96c6 \u7f16\u53f7 SQL\u8bed\u53e5 1 select * from taxi where trip_distance=7.75 and ratecodeid=1 limit 10; 2 select count(*) from taxi; 3 select count(*) from taxi where mta_tax 100; 4 select sum(trip_distance),store_and_fwd_flag from taxi group by store_and_fwd_flag; 5 select max(mta_tax) as max_tax from taxi order by max_tax desc limit 10; 6 select avg(trip_distance) as avg_dis,max(trip_distance) as max_dis,vendorid,store_and_fwd_flag from taxi group by vendorid,store_and_fwd_flag order by max_dis desc limit 100; 7 select sum(t1.trip_distance) from taxi t1 join taxi2 t2 on t1.pulocationid = t2.pulocationid where t2.pulocationid 300; 8 select count(*),avg(t1.trip_distance) as avg_dis,t1.dolocationid ,t1.pulocationid from taxi t1 join taxi2 t2 on t1.vendorid = t2.vendorid where t2.vendorid='1' and t2.pulocationid =360 group by t1.pulocationid,t1.dolocationid order by avg_dis desc; 9 select max(trip_distance) as max_dis,pulocationid from taxi where pulocationid 200 and pulocationid 300 group by pulocationid order by max_dis desc; 10 create table taxi_copy from select * from taxi where trip_distance=7.75 order by trip_distance desc; \u6d4b\u8bd5\u7ed3\u679c\uff08\u5355\u4f4d\uff1a\u79d2\uff09 \u6267\u884c\u5f15\u64ce 1 2 3 4 5 6 7 8 9 10 Hive 66.408 190.93 122.291 134.45 104.48 231.631 244.139 448.953 295.705 139.184 XSQL 5.515 42.463 34.983 53.079 29.424 63.561 118.163 95.816 69.001 193.906 \u7ed3\u8bba XSQL\u76f8\u6bd4\u4e8eHive\uff0c\u6267\u884c\u6027\u80fd\u5f97\u5230\u660e\u663e\u7684\u63d0\u5347\u3002 \u57fa\u4e8e\u4e1a\u52a1\u6570\u636e\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a \u6d4b\u8bd5\u76ee\u6807 \u672c\u6b21\u6d4b\u8bd5\u6db5\u76d6\u6027\u80fd\u6d4b\u8bd5\u4e0e\u529f\u80fd\u6d4b\u8bd5\uff0c\u4e3b\u8981\u5305\u542b\u4e24\u4e2a\u76ee\u7684\uff1a \u5c55\u793aXSQL\u5728\u9488\u5bf9\u5355\u6570\u636e\u6e90\u3001\u591a\u6570\u636e\u6e90\u7684SQL\u89e3\u6790\u53ca\u6267\u884c\u80fd\u529b \u627e\u51faXSQL\u5728\u590d\u6742SQL\u5904\u7406\u4ee5\u53ca\u5927\u89c4\u6a21\u6570\u636e\u96c6\u8ba1\u7b97\u65f6\u5b58\u5728\u7684\u95ee\u9898 \u6d4b\u8bd5\u6570\u636e\u96c6\u5927\u5c0f \u5f15\u64ce\\\u8868\u540d 5 G/9105516 rows 10 G/116119018 rows 20 G/26252422 rows 50 G/317473749 rows 100 G/450071755 rows Hive (shbt) pre_newusergamepay gbc_20171128_hot_1 shoujizhushou_push_logshare_event pre_qdas_huajiao_unlogin_behavior pre_usergame_monthly \u6d4b\u8bd5\u8bed\u53e5\u96c6 \u7f16\u53f7 SQL 1 SELECT count(channel2) FROM pre_newusergamepay WHERE channel2 IS NOT NULL 2 SELECT count(pos) FROM gbc_20171128_hot_1 WHERE pos IS NOT NULL 3 SELECT count(m1) FROM shoujizhushou_push_logshare_event WHERE m1 IS NOT NULL 4 SELECT count(watch_tag) FROM pre_qdas_huajiao_unlogin_behavior WHERE watch_tag IS NOT NULL 5 SELECT count(plat_channel3) FROM pre_usergame_monthly WHERE plat_channel3 IS NOT NULL 6 SELECT game_id, count(channel2), sum(p_day_id),avg(p_day_id) FROM pre_newusergamepay WHERE channel2 IS NOT NULL GROUP BY game_id 7 SELECT m2, count(pos) FROM gbc_20171128_hot_1 WHERE pos IS NOT NULL GROUP BY m2 8 SELECT model, count(m1) FROM shoujizhushou_push_logshare_event WHERE m1 IS NOT NULL GROUP BY model 9 SELECT servercountry, count(watch_tag) FROM pre_qdas_huajiao_unlogin_behavior WHERE watch_tag IS NOT NULL GROUP BY servercountry 10 SELECT plat_id, count(plat_channel3),sum(paycnt),avg(paycnt) FROM pre_usergame_monthly WHERE plat_channel3 IS NOT NULL GROUP BY plat_id 11 SELECT count(channel2) FROM pre_newusergamepay WHERE channel2 in (SELECT channel2 FROM pre_newusergamepay as table2 WHERE channel2 IS NOT NULL) 12 SELECT count(pos) FROM gbc_20171128_hot_1 WHERE pos in (SELECT pos FROM gbc_20171128_hot_1 as table2 WHERE pos IS NOT NULL) 13 SELECT count(m1) FROM shoujizhushou_push_logshare_event WHERE m1 in (SELECT m1 FROM shoujizhushou_push_logshare_event as table2 WHERE m1 IS NOT NULL) 14 SELECT count(watch_tag) FROM pre_qdas_huajiao_unlogin_behavior WHERE watch_tag in (SELECT distinct watch_tag FROM pre_qdas_huajiao_unlogin_behavior as table2 WHERE watch_tag IS NOT NULL) 15 SELECT count(plat_channel3) FROM pre_usergame_monthly WHERE plat_channel3 in (SELECT plat_channel3 FROM pre_usergame_monthly as table2 WHERE plat_channel3 IS NOT NULL) 16 SELECT count(a.channel2), count(b.game_id) FROM pre_newusergamepay a JOIN pre_newusergamepay b ON(a.user_id = b.user_id) 17 SELECT count(a.pos), count(b.uid) FROM gbc_20171128_hot_1 a JOIN gbc_20171128_hot_1 b ON(a.uid= b.uid) WHERE a.uid != 'UNKNOWN' and b.uid != 'UNKNOWN' 18 SELECT count(a.m1), count(b.servercountry) FROM shoujizhushou_push_logshare_event a JOIN shoujizhushou_push_logshare_event b ON(a.serverip= b.serverip) 19 SELECT count(a.watch_tag), count(b.model) FROM pre_qdas_huajiao_unlogin_behavior a JOIN pre_qdas_huajiao_unlogin_behavior b ON(a.liveid= b.liveid) 20 SELECT count(a.plat_channel3), count(b.game_id) FROM pre_usergame_monthly a JOIN pre_usergame_monthly b ON(a.user_id= b.user_id) \u6d4b\u8bd5\u7ed3\u679c\uff08\u5355\u4f4d\uff1a\u79d2\uff09 \u9009\u62e9\u64cd\u4f5c 5 G/9105516 rows 10 G/116119018 rows 20 G/26252422 rows 50 G/317473749 rows 100 G/450071755 rows Hive 288.921 s 299.864 s 178.928 s 176.595 s 247.195 s XSQL [Hive] 1536M 80.288 s 79.956 s 62.488 s 80.713 s 124.946 s XSQL [Hive] 5G 87.433 s 76.751 s 67.481 s 118.724 s 124.656 s \u805a\u5408\u64cd\u4f5c 5 G/9105516 rows 10 G/116119018 rows 20 G/26252422 rows 50 G/317473749 rows 100 G/450071755 rows Hive 265.160 s 332.685 s 197.688 s 271.324 s 363.762 s XSQL [Hive] 1536M 55.571 s 139.857 s 85.429 s 79.161 s 171.741 s XSQL [Hive] 5G 69.143 s 90.857 s 62.013 s 88.219 s 148.372 s \u5b50\u67e5\u8be2\u64cd\u4f5c Hive\u672c\u8eab\u4e0d\u652f\u6301where\u6761\u4ef6\u540e\u7684\u5b50\u67e5\u8be2\u64cd\u4f5c\uff0c\u6545\u672c\u62a5\u544a\u4e0d\u505a\u6b64\u5904\u7684\u6d4b\u8bd5\u3002 5 G/9105516 rows 10 G/116119018 rows 20 G/26252422 rows 50 G/317473749 rows 100 G/450071755 rows Hive 484.135 s 513.226 s 267.819 s 668.408 s 842.294 s XSQL [Hive] 1536M 150.691 s X 81.608 s 264.522 s 363.889 s XSQL [Hive] 5G 126.336 s 186.671 s 63.181 s 248.902 s 261.815 s \u8fde\u63a5\u64cd\u4f5c 5 G/9105516 rows 10 G/116119018 rows 20 G/26252422 rows 50 G/317473749 rows 100 G/450071755 rows Hive 428.481 s 2058.069 s 521.880 s 6674.270 s 552.231 s XSQL [Hive] 1536M 168.356 s 348.017 s 162.350 s 778.396 s 335.320 s XSQL [Hive] 5G 142.399 s 188.24 s 81.000 s 558.605 s 211.967 s \u7ed3\u8bba XSQL\u76f8\u6bd4\u4e8eHive\uff0c\u6267\u884c\u6027\u80fd\u5f97\u5230\u660e\u663e\u7684\u63d0\u5347\u3002 \u5b50\u67e5\u8be2\u3001\u8fde\u63a5\u64cd\u4f5c\uff0cXSQL\u914d\u7ed9Executor\u7684\u5185\u5b58\u591a\u5c11\uff0c\u5bf9\u6267\u884c\u65f6\u95f4\u4e5f\u6709\u5f71\u54cd\u3002","title":"Hive"},{"location":"performance_report/hive/#hive","text":"Hive\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u5206\u4e3a\u57fa\u4e8eTPCDS\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u548c\u57fa\u4e8e\u4e1a\u52a1\u6570\u636e\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u3002","title":"Hive\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a"},{"location":"performance_report/hive/#_1","text":"\u64cd\u4f5c\u7cfb\u7edf \uff1a CentOS release 6.2 (Final) \u200b \u865a\u62df\u673a\u7248\u672c \uff1a Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode) \u200b \u6d4b\u8bd5\u673a\u5668 \uff1a client01v.qss.zzzc.qihoo.net\u3001clientadmin.dfs.shbt.qihoo.net XSQL\u914d\u7f6e \uff1a Driver Memory\uff1a5G Executor Instances\uff1a100 Executor Memory\uff1a1536M\u62165G","title":"\u6d4b\u8bd5\u73af\u5883"},{"location":"performance_report/hive/#tpcds","text":"","title":"\u57fa\u4e8eTPCDS\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a"},{"location":"performance_report/hive/#_2","text":"\u672c\u6b21\u6d4b\u8bd5\u6db5\u76d6\u6027\u80fd\u6d4b\u8bd5\u4e0e\u529f\u80fd\u6d4b\u8bd5\uff0c\u4e3b\u8981\u5305\u542b\u4e24\u4e2a\u76ee\u7684\uff1a \u5c55\u793aXSQL\u5728\u9488\u5bf9\u5355\u6570\u636e\u6e90\u3001\u591a\u6570\u636e\u6e90\u7684SQL\u89e3\u6790\u53ca\u6267\u884c\u80fd\u529b \u627e\u51faXSQL\u5728\u590d\u6742SQL\u5904\u7406\u4ee5\u53ca\u5927\u89c4\u6a21\u6570\u636e\u96c6\u8ba1\u7b97\u65f6\u5b58\u5728\u7684\u95ee\u9898","title":"\u6d4b\u8bd5\u76ee\u6807"},{"location":"performance_report/hive/#1g9710124","text":"","title":"\u6d4b\u8bd5\u6570\u636e\u96c6\u5927\u5c0f\uff1a1G/9710124"},{"location":"performance_report/hive/#_3","text":"\u7f16\u53f7 SQL\u8bed\u53e5 1 select * from taxi where trip_distance=7.75 and ratecodeid=1 limit 10; 2 select count(*) from taxi; 3 select count(*) from taxi where mta_tax 100; 4 select sum(trip_distance),store_and_fwd_flag from taxi group by store_and_fwd_flag; 5 select max(mta_tax) as max_tax from taxi order by max_tax desc limit 10; 6 select avg(trip_distance) as avg_dis,max(trip_distance) as max_dis,vendorid,store_and_fwd_flag from taxi group by vendorid,store_and_fwd_flag order by max_dis desc limit 100; 7 select sum(t1.trip_distance) from taxi t1 join taxi2 t2 on t1.pulocationid = t2.pulocationid where t2.pulocationid 300; 8 select count(*),avg(t1.trip_distance) as avg_dis,t1.dolocationid ,t1.pulocationid from taxi t1 join taxi2 t2 on t1.vendorid = t2.vendorid where t2.vendorid='1' and t2.pulocationid =360 group by t1.pulocationid,t1.dolocationid order by avg_dis desc; 9 select max(trip_distance) as max_dis,pulocationid from taxi where pulocationid 200 and pulocationid 300 group by pulocationid order by max_dis desc; 10 create table taxi_copy from select * from taxi where trip_distance=7.75 order by trip_distance desc;","title":"\u6d4b\u8bd5\u8bed\u53e5\u96c6"},{"location":"performance_report/hive/#_4","text":"\u6267\u884c\u5f15\u64ce 1 2 3 4 5 6 7 8 9 10 Hive 66.408 190.93 122.291 134.45 104.48 231.631 244.139 448.953 295.705 139.184 XSQL 5.515 42.463 34.983 53.079 29.424 63.561 118.163 95.816 69.001 193.906","title":"\u6d4b\u8bd5\u7ed3\u679c\uff08\u5355\u4f4d\uff1a\u79d2\uff09"},{"location":"performance_report/hive/#_5","text":"XSQL\u76f8\u6bd4\u4e8eHive\uff0c\u6267\u884c\u6027\u80fd\u5f97\u5230\u660e\u663e\u7684\u63d0\u5347\u3002","title":"\u7ed3\u8bba"},{"location":"performance_report/hive/#_6","text":"","title":"\u57fa\u4e8e\u4e1a\u52a1\u6570\u636e\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a"},{"location":"performance_report/hive/#_7","text":"\u672c\u6b21\u6d4b\u8bd5\u6db5\u76d6\u6027\u80fd\u6d4b\u8bd5\u4e0e\u529f\u80fd\u6d4b\u8bd5\uff0c\u4e3b\u8981\u5305\u542b\u4e24\u4e2a\u76ee\u7684\uff1a \u5c55\u793aXSQL\u5728\u9488\u5bf9\u5355\u6570\u636e\u6e90\u3001\u591a\u6570\u636e\u6e90\u7684SQL\u89e3\u6790\u53ca\u6267\u884c\u80fd\u529b \u627e\u51faXSQL\u5728\u590d\u6742SQL\u5904\u7406\u4ee5\u53ca\u5927\u89c4\u6a21\u6570\u636e\u96c6\u8ba1\u7b97\u65f6\u5b58\u5728\u7684\u95ee\u9898","title":"\u6d4b\u8bd5\u76ee\u6807"},{"location":"performance_report/hive/#_8","text":"\u5f15\u64ce\\\u8868\u540d 5 G/9105516 rows 10 G/116119018 rows 20 G/26252422 rows 50 G/317473749 rows 100 G/450071755 rows Hive (shbt) pre_newusergamepay gbc_20171128_hot_1 shoujizhushou_push_logshare_event pre_qdas_huajiao_unlogin_behavior pre_usergame_monthly","title":"\u6d4b\u8bd5\u6570\u636e\u96c6\u5927\u5c0f"},{"location":"performance_report/hive/#_9","text":"\u7f16\u53f7 SQL 1 SELECT count(channel2) FROM pre_newusergamepay WHERE channel2 IS NOT NULL 2 SELECT count(pos) FROM gbc_20171128_hot_1 WHERE pos IS NOT NULL 3 SELECT count(m1) FROM shoujizhushou_push_logshare_event WHERE m1 IS NOT NULL 4 SELECT count(watch_tag) FROM pre_qdas_huajiao_unlogin_behavior WHERE watch_tag IS NOT NULL 5 SELECT count(plat_channel3) FROM pre_usergame_monthly WHERE plat_channel3 IS NOT NULL 6 SELECT game_id, count(channel2), sum(p_day_id),avg(p_day_id) FROM pre_newusergamepay WHERE channel2 IS NOT NULL GROUP BY game_id 7 SELECT m2, count(pos) FROM gbc_20171128_hot_1 WHERE pos IS NOT NULL GROUP BY m2 8 SELECT model, count(m1) FROM shoujizhushou_push_logshare_event WHERE m1 IS NOT NULL GROUP BY model 9 SELECT servercountry, count(watch_tag) FROM pre_qdas_huajiao_unlogin_behavior WHERE watch_tag IS NOT NULL GROUP BY servercountry 10 SELECT plat_id, count(plat_channel3),sum(paycnt),avg(paycnt) FROM pre_usergame_monthly WHERE plat_channel3 IS NOT NULL GROUP BY plat_id 11 SELECT count(channel2) FROM pre_newusergamepay WHERE channel2 in (SELECT channel2 FROM pre_newusergamepay as table2 WHERE channel2 IS NOT NULL) 12 SELECT count(pos) FROM gbc_20171128_hot_1 WHERE pos in (SELECT pos FROM gbc_20171128_hot_1 as table2 WHERE pos IS NOT NULL) 13 SELECT count(m1) FROM shoujizhushou_push_logshare_event WHERE m1 in (SELECT m1 FROM shoujizhushou_push_logshare_event as table2 WHERE m1 IS NOT NULL) 14 SELECT count(watch_tag) FROM pre_qdas_huajiao_unlogin_behavior WHERE watch_tag in (SELECT distinct watch_tag FROM pre_qdas_huajiao_unlogin_behavior as table2 WHERE watch_tag IS NOT NULL) 15 SELECT count(plat_channel3) FROM pre_usergame_monthly WHERE plat_channel3 in (SELECT plat_channel3 FROM pre_usergame_monthly as table2 WHERE plat_channel3 IS NOT NULL) 16 SELECT count(a.channel2), count(b.game_id) FROM pre_newusergamepay a JOIN pre_newusergamepay b ON(a.user_id = b.user_id) 17 SELECT count(a.pos), count(b.uid) FROM gbc_20171128_hot_1 a JOIN gbc_20171128_hot_1 b ON(a.uid= b.uid) WHERE a.uid != 'UNKNOWN' and b.uid != 'UNKNOWN' 18 SELECT count(a.m1), count(b.servercountry) FROM shoujizhushou_push_logshare_event a JOIN shoujizhushou_push_logshare_event b ON(a.serverip= b.serverip) 19 SELECT count(a.watch_tag), count(b.model) FROM pre_qdas_huajiao_unlogin_behavior a JOIN pre_qdas_huajiao_unlogin_behavior b ON(a.liveid= b.liveid) 20 SELECT count(a.plat_channel3), count(b.game_id) FROM pre_usergame_monthly a JOIN pre_usergame_monthly b ON(a.user_id= b.user_id)","title":"\u6d4b\u8bd5\u8bed\u53e5\u96c6"},{"location":"performance_report/hive/#_10","text":"\u9009\u62e9\u64cd\u4f5c 5 G/9105516 rows 10 G/116119018 rows 20 G/26252422 rows 50 G/317473749 rows 100 G/450071755 rows Hive 288.921 s 299.864 s 178.928 s 176.595 s 247.195 s XSQL [Hive] 1536M 80.288 s 79.956 s 62.488 s 80.713 s 124.946 s XSQL [Hive] 5G 87.433 s 76.751 s 67.481 s 118.724 s 124.656 s \u805a\u5408\u64cd\u4f5c 5 G/9105516 rows 10 G/116119018 rows 20 G/26252422 rows 50 G/317473749 rows 100 G/450071755 rows Hive 265.160 s 332.685 s 197.688 s 271.324 s 363.762 s XSQL [Hive] 1536M 55.571 s 139.857 s 85.429 s 79.161 s 171.741 s XSQL [Hive] 5G 69.143 s 90.857 s 62.013 s 88.219 s 148.372 s \u5b50\u67e5\u8be2\u64cd\u4f5c Hive\u672c\u8eab\u4e0d\u652f\u6301where\u6761\u4ef6\u540e\u7684\u5b50\u67e5\u8be2\u64cd\u4f5c\uff0c\u6545\u672c\u62a5\u544a\u4e0d\u505a\u6b64\u5904\u7684\u6d4b\u8bd5\u3002 5 G/9105516 rows 10 G/116119018 rows 20 G/26252422 rows 50 G/317473749 rows 100 G/450071755 rows Hive 484.135 s 513.226 s 267.819 s 668.408 s 842.294 s XSQL [Hive] 1536M 150.691 s X 81.608 s 264.522 s 363.889 s XSQL [Hive] 5G 126.336 s 186.671 s 63.181 s 248.902 s 261.815 s \u8fde\u63a5\u64cd\u4f5c 5 G/9105516 rows 10 G/116119018 rows 20 G/26252422 rows 50 G/317473749 rows 100 G/450071755 rows Hive 428.481 s 2058.069 s 521.880 s 6674.270 s 552.231 s XSQL [Hive] 1536M 168.356 s 348.017 s 162.350 s 778.396 s 335.320 s XSQL [Hive] 5G 142.399 s 188.24 s 81.000 s 558.605 s 211.967 s","title":"\u6d4b\u8bd5\u7ed3\u679c\uff08\u5355\u4f4d\uff1a\u79d2\uff09"},{"location":"performance_report/hive/#_11","text":"XSQL\u76f8\u6bd4\u4e8eHive\uff0c\u6267\u884c\u6027\u80fd\u5f97\u5230\u660e\u663e\u7684\u63d0\u5347\u3002 \u5b50\u67e5\u8be2\u3001\u8fde\u63a5\u64cd\u4f5c\uff0cXSQL\u914d\u7ed9Executor\u7684\u5185\u5b58\u591a\u5c11\uff0c\u5bf9\u6267\u884c\u65f6\u95f4\u4e5f\u6709\u5f71\u54cd\u3002","title":"\u7ed3\u8bba"},{"location":"performance_report/mongo/","text":"MongoDB\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a MongoDB\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u5206\u4e3a\u57fa\u4e8eTPCDS\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u548c\u57fa\u4e8e\u4e1a\u52a1\u6570\u636e\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u3002 \u6d4b\u8bd5\u73af\u5883 \u64cd\u4f5c\u7cfb\u7edf \uff1a CentOS release 6.2 (Final) \u200b \u865a\u62df\u673a\u7248\u672c \uff1a Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode) \u200b \u6d4b\u8bd5\u673a\u5668 \uff1a client01v.qss.zzzc.qihoo.net\u3001clientadmin.dfs.shbt.qihoo.net XSQL\u914d\u7f6e \uff1a Driver Memory\uff1a5G Executor Instances\uff1a100 Executor Memory\uff1a1536M\u62165G \u57fa\u4e8eTPCDS\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a \u6d4b\u8bd5\u76ee\u6807 \u672c\u6b21\u6d4b\u8bd5\u6db5\u76d6\u6027\u80fd\u6d4b\u8bd5\u4e0e\u529f\u80fd\u6d4b\u8bd5\uff0c\u4e3b\u8981\u5305\u542b\u4e24\u4e2a\u76ee\u7684\uff1a \u5c55\u793aXSQL\u5728\u9488\u5bf9\u5355\u6570\u636e\u6e90\u3001\u591a\u6570\u636e\u6e90\u7684SQL\u89e3\u6790\u53ca\u6267\u884c\u80fd\u529b \u627e\u51faXSQL\u5728\u590d\u6742SQL\u5904\u7406\u4ee5\u53ca\u5927\u89c4\u6a21\u6570\u636e\u96c6\u8ba1\u7b97\u65f6\u5b58\u5728\u7684\u95ee\u9898 \u6d4b\u8bd5\u6570\u636e\u96c6 \u6570\u636e\u91cf\u4e00\uff1a1G/9710124 \u6570\u636e\u91cf\u4e8c\uff1a14G/113496874 \u6d4b\u8bd5\u8bed\u53e5\u96c6 \u7f16\u53f7 SQL\u8bed\u53e5 1 select * from mymongo.xitong_mongo.taxis 2 select VendorID, trip_distance from mymongo.xitong_mongo.taxis 3 select * from mymongo.xitong_mongo.taxis order by trip_distance 4 select * from mymongo.xitong_mongo.taxis where DOLocationID = 229 5 select * from mymongo.xitong_mongo.taxis where RatecodeID is null 6 select * from mymongo.xitong_mongo.taxis where payment_type in (1,2) 7 select * from mymongo.xitong_mongo.taxis where tpep_pickup_datetime like '2017-01-01 00:00:0_' 8 select sum(total_amount) from mymongo.xitong_mongo.taxis 9 select sum(total_amount), payment_type from mymongo.xitong_mongo.taxis group by payment_type 10 select count(*) from mymongo.xitong_mongo.taxis 11 select count(*), payment_type from mymongo.xitong_mongo.taxis group by payment_type 12 select distinct payment_type from mymongo.xitong_mongo.taxis 13 select count(distinct payment_type) from mymongo.xitong_mongo.taxis \u6d4b\u8bd5\u7ed3\u679c\u4e00\uff08\u5355\u4f4d\uff1a\u79d2\uff0c\u6570\u636e\u91cf\uff1a1G/9710124\uff09 \u6267\u884c\u5f15\u64ce 1 2 3 4 5 6 7 8 9 10 11 12 13 Mongo API 0.849 0.459 15.184 0.466 5.555 0.468 0.471 12.652 13.865 4.239 10.48 10.151 10.222 XSQL Pushdown 0.458 0.172 14.859 0.135 5.456 0.1 0.494 12.291 13.557 4.444 10.044 9.845 9.863 XSQL 6.29 3.169 64.728 28.466 10.778 21.097 22.592 12.197 18.77 54.345 13.145 13.615 15.662 \u7ed3\u8bba XSQL [Pushdown]\u76f8\u6bd4\u4e8e\u76f4\u63a5\u8c03\u7528MongoDB\u7684API\uff0c\u6027\u80fd\u4e0a\u51e0\u4e4e\u6ca1\u6709\u635f\u8017\u3002 \u5728\u5c0f\u6570\u636e\u91cf\u60c5\u51b5\u4e0b\uff0cXSQL\u4f7f\u7528Spark\u7684\u6548\u7387\u76f8\u5bf9\u6765\u8bf4\u4e0d\u9ad8\u3002 \u6d4b\u8bd5\u7ed3\u679c\u4e8c\uff08\u5355\u4f4d\uff1a\u79d2\uff0c\u6570\u636e\u91cf\uff1a14G/113496874\uff09 \u6267\u884c\u5f15\u64ce 1 2 3 4 5 6 7 8 9 10 11 12 13 Mongo API 0.788 0.513 236.142 0.508 117.646 0.497 0.521 207.773 224.417 97.639 182.1 179.221 179.229 XSQL Pushdown 0.617 0.129 233.148 0.103 119.321 0.067 0.096 204.984 223.216 98.152 181.033 177.489 178.387 XSQL 6.063 8.793 435.851 407.283 230.014 362.561 347.276 50.207 71.676 430.705 52.205 54.794 48.358 \u7ed3\u8bba XSQL [Pushdown]\u76f8\u6bd4\u4e8e\u76f4\u63a5\u8c03\u7528MongoDB\u7684API\uff0c\u6027\u80fd\u4e0a\u51e0\u4e4e\u6ca1\u6709\u635f\u8017\u3002 \u5728\u5927\u6570\u636e\u91cf\u60c5\u51b5\u4e0b\uff0c\u5bf9\u4e8e\u6295\u5f71\u64cd\u4f5c\u6765\u8bf4\uff0cXSQL\u4f7f\u7528Spark\u7684\u6548\u7387\u76f8\u5bf9\u6765\u8bf4\u4e0d\u9ad8\uff0c\u5bf9\u4e8e\u5206\u7ec4\u3001\u805a\u5408\u7b49\u8fd0\u7b97Spark\u53cd\u800c\u6709\u4f18\u52bf\u3002 \u57fa\u4e8e\u4e1a\u52a1\u6570\u636e\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\uff08\u6682\u65e0\uff09","title":"MongoDB"},{"location":"performance_report/mongo/#mongodb","text":"MongoDB\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u5206\u4e3a\u57fa\u4e8eTPCDS\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u548c\u57fa\u4e8e\u4e1a\u52a1\u6570\u636e\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u3002","title":"MongoDB\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a"},{"location":"performance_report/mongo/#_1","text":"\u64cd\u4f5c\u7cfb\u7edf \uff1a CentOS release 6.2 (Final) \u200b \u865a\u62df\u673a\u7248\u672c \uff1a Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode) \u200b \u6d4b\u8bd5\u673a\u5668 \uff1a client01v.qss.zzzc.qihoo.net\u3001clientadmin.dfs.shbt.qihoo.net XSQL\u914d\u7f6e \uff1a Driver Memory\uff1a5G Executor Instances\uff1a100 Executor Memory\uff1a1536M\u62165G","title":"\u6d4b\u8bd5\u73af\u5883"},{"location":"performance_report/mongo/#tpcds","text":"","title":"\u57fa\u4e8eTPCDS\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a"},{"location":"performance_report/mongo/#_2","text":"\u672c\u6b21\u6d4b\u8bd5\u6db5\u76d6\u6027\u80fd\u6d4b\u8bd5\u4e0e\u529f\u80fd\u6d4b\u8bd5\uff0c\u4e3b\u8981\u5305\u542b\u4e24\u4e2a\u76ee\u7684\uff1a \u5c55\u793aXSQL\u5728\u9488\u5bf9\u5355\u6570\u636e\u6e90\u3001\u591a\u6570\u636e\u6e90\u7684SQL\u89e3\u6790\u53ca\u6267\u884c\u80fd\u529b \u627e\u51faXSQL\u5728\u590d\u6742SQL\u5904\u7406\u4ee5\u53ca\u5927\u89c4\u6a21\u6570\u636e\u96c6\u8ba1\u7b97\u65f6\u5b58\u5728\u7684\u95ee\u9898","title":"\u6d4b\u8bd5\u76ee\u6807"},{"location":"performance_report/mongo/#_3","text":"\u6570\u636e\u91cf\u4e00\uff1a1G/9710124 \u6570\u636e\u91cf\u4e8c\uff1a14G/113496874","title":"\u6d4b\u8bd5\u6570\u636e\u96c6"},{"location":"performance_report/mongo/#_4","text":"\u7f16\u53f7 SQL\u8bed\u53e5 1 select * from mymongo.xitong_mongo.taxis 2 select VendorID, trip_distance from mymongo.xitong_mongo.taxis 3 select * from mymongo.xitong_mongo.taxis order by trip_distance 4 select * from mymongo.xitong_mongo.taxis where DOLocationID = 229 5 select * from mymongo.xitong_mongo.taxis where RatecodeID is null 6 select * from mymongo.xitong_mongo.taxis where payment_type in (1,2) 7 select * from mymongo.xitong_mongo.taxis where tpep_pickup_datetime like '2017-01-01 00:00:0_' 8 select sum(total_amount) from mymongo.xitong_mongo.taxis 9 select sum(total_amount), payment_type from mymongo.xitong_mongo.taxis group by payment_type 10 select count(*) from mymongo.xitong_mongo.taxis 11 select count(*), payment_type from mymongo.xitong_mongo.taxis group by payment_type 12 select distinct payment_type from mymongo.xitong_mongo.taxis 13 select count(distinct payment_type) from mymongo.xitong_mongo.taxis","title":"\u6d4b\u8bd5\u8bed\u53e5\u96c6"},{"location":"performance_report/mongo/#1g9710124","text":"\u6267\u884c\u5f15\u64ce 1 2 3 4 5 6 7 8 9 10 11 12 13 Mongo API 0.849 0.459 15.184 0.466 5.555 0.468 0.471 12.652 13.865 4.239 10.48 10.151 10.222 XSQL Pushdown 0.458 0.172 14.859 0.135 5.456 0.1 0.494 12.291 13.557 4.444 10.044 9.845 9.863 XSQL 6.29 3.169 64.728 28.466 10.778 21.097 22.592 12.197 18.77 54.345 13.145 13.615 15.662","title":"\u6d4b\u8bd5\u7ed3\u679c\u4e00\uff08\u5355\u4f4d\uff1a\u79d2\uff0c\u6570\u636e\u91cf\uff1a1G/9710124\uff09"},{"location":"performance_report/mongo/#_5","text":"XSQL [Pushdown]\u76f8\u6bd4\u4e8e\u76f4\u63a5\u8c03\u7528MongoDB\u7684API\uff0c\u6027\u80fd\u4e0a\u51e0\u4e4e\u6ca1\u6709\u635f\u8017\u3002 \u5728\u5c0f\u6570\u636e\u91cf\u60c5\u51b5\u4e0b\uff0cXSQL\u4f7f\u7528Spark\u7684\u6548\u7387\u76f8\u5bf9\u6765\u8bf4\u4e0d\u9ad8\u3002","title":"\u7ed3\u8bba"},{"location":"performance_report/mongo/#14g113496874","text":"\u6267\u884c\u5f15\u64ce 1 2 3 4 5 6 7 8 9 10 11 12 13 Mongo API 0.788 0.513 236.142 0.508 117.646 0.497 0.521 207.773 224.417 97.639 182.1 179.221 179.229 XSQL Pushdown 0.617 0.129 233.148 0.103 119.321 0.067 0.096 204.984 223.216 98.152 181.033 177.489 178.387 XSQL 6.063 8.793 435.851 407.283 230.014 362.561 347.276 50.207 71.676 430.705 52.205 54.794 48.358","title":"\u6d4b\u8bd5\u7ed3\u679c\u4e8c\uff08\u5355\u4f4d\uff1a\u79d2\uff0c\u6570\u636e\u91cf\uff1a14G/113496874\uff09"},{"location":"performance_report/mongo/#_6","text":"XSQL [Pushdown]\u76f8\u6bd4\u4e8e\u76f4\u63a5\u8c03\u7528MongoDB\u7684API\uff0c\u6027\u80fd\u4e0a\u51e0\u4e4e\u6ca1\u6709\u635f\u8017\u3002 \u5728\u5927\u6570\u636e\u91cf\u60c5\u51b5\u4e0b\uff0c\u5bf9\u4e8e\u6295\u5f71\u64cd\u4f5c\u6765\u8bf4\uff0cXSQL\u4f7f\u7528Spark\u7684\u6548\u7387\u76f8\u5bf9\u6765\u8bf4\u4e0d\u9ad8\uff0c\u5bf9\u4e8e\u5206\u7ec4\u3001\u805a\u5408\u7b49\u8fd0\u7b97Spark\u53cd\u800c\u6709\u4f18\u52bf\u3002","title":"\u7ed3\u8bba"},{"location":"performance_report/mongo/#_7","text":"","title":"\u57fa\u4e8e\u4e1a\u52a1\u6570\u636e\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\uff08\u6682\u65e0\uff09"},{"location":"performance_report/multi_datasource/","text":"\u6df7\u5408\u67e5\u8be2\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a \u6df7\u5408\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u662f\u57fa\u4e8e\u4e1a\u52a1\u6570\u636e\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u3002\u7528\u4e8e\u5c55\u73b0\u591a\u4e2a\u6570\u636e\u6e90\u4e4b\u95f4\u6df7\u5408\u67e5\u8be2\u7684\u6027\u80fd\u3002 \u6d4b\u8bd5\u73af\u5883 \u64cd\u4f5c\u7cfb\u7edf \uff1a CentOS release 6.2 (Final) \u200b \u865a\u62df\u673a\u7248\u672c \uff1a Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode) \u200b \u6d4b\u8bd5\u673a\u5668 \uff1a client01v.qss.zzzc.qihoo.net\u3001clientadmin.dfs.shbt.qihoo.net XSQL\u914d\u7f6e \uff1a Driver Memory\uff1a5G Executor Instances\uff1a100 Executor Memory\uff1a1536M\u62165G \u6d4b\u8bd5\u76ee\u6807 \u672c\u6b21\u6d4b\u8bd5\u6db5\u76d6\u6027\u80fd\u6d4b\u8bd5\u4e0e\u529f\u80fd\u6d4b\u8bd5\uff0c\u4e3b\u8981\u5305\u542b\u4e24\u4e2a\u76ee\u7684\uff1a \u5c55\u793aXSQL\u5728\u9488\u5bf9\u5355\u6570\u636e\u6e90\u3001\u591a\u6570\u636e\u6e90\u7684SQL\u89e3\u6790\u53ca\u6267\u884c\u80fd\u529b \u627e\u51faXSQL\u5728\u590d\u6742SQL\u5904\u7406\u4ee5\u53ca\u5927\u89c4\u6a21\u6570\u636e\u96c6\u8ba1\u7b97\u65f6\u5b58\u5728\u7684\u95ee\u9898 \u6d4b\u8bd5\u6570\u636e\u96c6\u5927\u5c0f \u6570\u636e\u5747\u4e3a\u4e1a\u52a1\u90e8\u95e8\u7684\u7ebf\u4e0a\u6570\u636e\u3002 \u6570\u636e\u6e90 50 G/63178212 docs 100 G/123714760 docs 200 G/260567692 docs 500G/371503959 docs 1 T /466168986 docs Elasticsearch logsget-user-qdas-newuser-channel-all.msdocker_frontmidres1 logsget-user-qdas-newuser-channel-all.huajiao_frontmidres1 logsget-user-qdas-newuser-channel-all.chromium_frontmidres1 logsget-user-pc-profile-v1.profile logsget-user-profile.profile \u6570\u636e\u6e90 5 G/9105516 rows 10 G/116119018 rows 20 G/26252422 rows 50 G/317473749 rows 100 G/450071755 rows Hive (shbt) pre_newusergamepay gbc_20171128_hot_1 shoujizhushou_push_logshare_event pre_qdas_huajiao_unlogin_behavior pre_usergame_monthly \u6570\u636e\u6e90 50 M/1062854 rows 100 M/3230371 rows 500 M/9459722 rows 1 G/10100177 rows 2 G/29055658 rows MySQL (DB7) rpt_mso_english_result_q_daily rpt_shouyou_week_retention rpt_360game_plugin_new_report_daily rpt_cloudlive_drop_hourly1\uff08\u540e\u6765\u66f4\u6362\u4e3arpt_mso_chns_360aphone_query_pvuv_daily\uff09 rpt_cloudlive_errornum_all_daily Elasticsearch\u4e0eHive\u7684\u6df7\u5408\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a \u6d4b\u8bd5\u8bed\u53e5\u96c6 \u7f16\u53f7 SQL 1 SELECT a.serverip, b.active_channel FROM (SELECT serverip FROM default.logsget.shoujizhushou_push_logshare_event WHERE serverip = '59.44.240.36') a JOIN (SELECT active_channel FROM myes.logsget_user_qdas_newuser_channel_all.msdocker_frontmidres1 WHERE channel = '100054' LIMIT 10) b ON a.serverip = b.active_channel 2 (SELECT serverip FROM default.logsget.shoujizhushou_push_logshare_event) UNION (SELECT active_channel FROM myes.logsget_user_qdas_newuser_channel_all.msdocker_frontmidres1 WHERE channel = '100054' LIMIT 10) 3 SELECT serverip, model FROM default.logsget.shoujizhushou_push_logshare_event WHERE serverip IN (SELECT channel FROM myes.logsget_user_qdas_newuser_channel_all.msdocker_frontmidres1 LIMIT 10) 4 SELECT first_table.active_channel FROM (SELECT active_channel FROM myes.logsget_user_qdas_newuser_channel_all.msdocker_frontmidres1 WHERE channel = '100054' LIMIT 10) first_table WHERE first_table.active_channel IS NOT NULL \u6d4b\u8bd5\u7ed3\u679c\uff08\u5355\u4f4d\uff1a\u79d2\uff09 \u6267\u884c\u5f15\u64ce Join Union SubQuery\uff08WHERE\uff09 SubQuery\uff08FROM\uff09 XSQL[ElasticSearch] XSQL[Hive] 201.862 190 360 21.183 XSQL Pushdown [ElasticSearch] XSQL[Hive] 141.476 153.667 125.207 0.249 \u7ed3\u8bba XSQL Pushdown\u76f8\u6bd4\u4e8eXSQL\uff0c\u6267\u884cElasticSearch\u67e5\u8be2\uff0c\u6027\u80fd\u6709\u8f83\u5927\u5e45\u5ea6\u7684\u63d0\u5347\u3002 MySQL\u4e0eHive\u7684\u6df7\u5408\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a \u6d4b\u8bd5\u8bed\u53e5\u96c6 \u7f16\u53f7 SQL 1 select a.serverip, b.bid from (SELECT serverip FROM default.logsget.shoujizhushou_push_logshare_event where serverip = '59.44.240.36') as a join (SELECT bid FROM test_mysql.db_share.rpt_cloudlive_errornum_all_daily where bid = 'huajiao' limit 10) as b on(a.serverip = b.bid) 2 (SELECT serverip FROM default.logsget.shoujizhushou_push_logshare_event) UNION (SELECT bid FROM test_mysql.db_share.rpt_cloudlive_errornum_all_daily where bid = 'huajiao' limit 10) 3 SELECT serverip, model FROM default.logsget.shoujizhushou_push_logshare_event WHERE serverip in (SELECT cid FROM test_mysql.db_share.rpt_cloudlive_errornum_all_daily LIMIT 10) 4 SELECT serverip, (SELECT COUNT(bid) FROM test_mysql.db_share.rpt_cloudlive_errornum_all_daily where cid = 'live_huajiao_v2') FROM default.logsget.shoujizhushou_push_logshare_event WHERE serverip = '59.44.240.36' \u6d4b\u8bd5\u7ed3\u679c\uff08\u5355\u4f4d\uff1a\u79d2\uff09 \u6267\u884c\u5f15\u64ce Join Union SubQuery(WHERE [MySQL]) SubQuery(SELECT [MySQL]) XSQL[MySQL] XSQL[Hive] 196.0173 241.5 165.3875 230.1265 XSQL Pushdown[MySQL] XSQL[Hive] 169.1963 183 163.9458 220.5993 \u7ed3\u8bba \u7531\u4e0a\u56fe\u5206\u6790\u53ef\u77e5\uff0c\u6267\u884cMySQL\u4e0eHive\u7684\u6df7\u5408\u67e5\u8be2\u65f6,XSQL PushDown\u76f8\u6bd4\u4e8eXSQL,\u6027\u80fd\u6709\u4e00\u5b9a\u5e45\u5ea6\u7684\u63d0\u5347\uff0c\u6267\u884cjoin\u64cd\u4f5c\u548cunion\u64cd\u4f5c\u7684\u63d0\u5347\u6548\u7387\u660e\u663e\u3002 MySQL\u4e0eElasticSearch\u7684\u6df7\u5408\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a \u6d4b\u8bd5\u8bed\u53e5\u96c6 \u7f16\u53f7 SQL 1 select a.active_channel, b.bid from (SELECT active_channel FROM myes.logsget_user_qdas_newuser_channel_all.msdocker_frontmidres1 where channel='100054' limit 10) as a join (SELECT bid FROM test_mysql.db_share.rpt_cloudlive_errornum_all_daily where bid = 'huajiao' limit 10) as b on(a.active_channel = b.bid) 2 (SELECT active_channel FROM myes.logsget_user_qdas_newuser_channel_all.msdocker_frontmidres1 where channel='100054' limit 10) UNION (SELECT bid FROM test_mysql.db_share.rpt_cloudlive_errornum_all_daily where bid = 'huajiao' limit 10) 3 SELECT channel FROM myes.logsget_user_qdas_newuser_channel_all.msdocker_frontmidres1 WHERE channel in (SELECT cid FROM test_mysql.db_share.rpt_cloudlive_errornum_all_daily LIMIT 10) 4 SELECT cid FROM test_mysql.db_share.rpt_cloudlive_errornum_all_daily where cid in (SELECT channel FROM myes.logsget_user_qdas_newuser_channel_all.msdocker_frontmidres1 limit 10) 5 select active_channel,(select count(bid) from test_mysql.db_share.rpt_cloudlive_errornum_all_daily) from myes.logsget_user_qdas_newuser_channel_all.msdocker_frontmidres1 where channel='100054' limit 10 6 select cid,(select count( active_channel) from myes.logsget_user_qdas_newuser_channel_all.msdocker_frontmidres1) from test_mysql.db_share.rpt_cloudlive_errornum_all_daily where cid = 'live_polo' \u6d4b\u8bd5\u7ed3\u679c\uff08\u5355\u4f4d\uff1a\u79d2\uff09 \u6267\u884c\u5f15\u64ce Jion Union SubQuery\uff08WHERE[MySQL]\uff09 SubQuery\uff08WHERE[ES]\uff09 SubQuery\uff08SELECT[MySQL]\uff09 SubQuery\uff08SELECT[ES]\uff09 XSQL Pushdown[MySQL] XSQL Pushdown[ElasticSearch] 0.56 1.1315 262.07675 11.40975 15.31425 2.5765 XSQL[MySQL] XSQL Pushdown[ElasticSearch] 7.941 6.53375 288.0025 11.40975 20.77525 2.5765 XSQL Pushdown[MySQL] XSQL[ElasticSearch] 20.4 9.977 262.07675 error 15.31425 287 XSQL[MySQL] XSQL[ElasticSearch] 20.745 15.75 288.0025 error 20.77525 287 \u7ed3\u8bba \u4e0a\u56fe\u5206\u6790\u53ef\u77e5\uff0c\u6267\u884cElasticSearch\u4e0eMySQL\u7684\u6df7\u5408\u67e5\u8be2\u65f6\uff0c\u4e24\u4e2a\u6570\u636e\u6e90\u4e0b\u63a8\u7684\u6267\u884c\u6548\u7387\u8981\u9ad8\u4e8e\u975e\u4e0b\u63a8\u7684\u6267\u884c\u6548\u7387\uff1b\u5c24\u5176\u5bf9\u4e8eES\u7684\u6267\u884c\uff0c\u975e\u4e0b\u63a8\u65f6\u6267\u884c\u5f88\u6162\uff0c\u5e76\u4e14\u6709\u65f6\u5b50\u67e5\u8be2\u6267\u884c\u4f1a\u51fa\u73b0\u8d85\u65f6\u9519\u8bef\u3002","title":"Multiple Data Sources"},{"location":"performance_report/multi_datasource/#_1","text":"\u6df7\u5408\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u662f\u57fa\u4e8e\u4e1a\u52a1\u6570\u636e\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u3002\u7528\u4e8e\u5c55\u73b0\u591a\u4e2a\u6570\u636e\u6e90\u4e4b\u95f4\u6df7\u5408\u67e5\u8be2\u7684\u6027\u80fd\u3002","title":"\u6df7\u5408\u67e5\u8be2\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a"},{"location":"performance_report/multi_datasource/#_2","text":"\u64cd\u4f5c\u7cfb\u7edf \uff1a CentOS release 6.2 (Final) \u200b \u865a\u62df\u673a\u7248\u672c \uff1a Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode) \u200b \u6d4b\u8bd5\u673a\u5668 \uff1a client01v.qss.zzzc.qihoo.net\u3001clientadmin.dfs.shbt.qihoo.net XSQL\u914d\u7f6e \uff1a Driver Memory\uff1a5G Executor Instances\uff1a100 Executor Memory\uff1a1536M\u62165G","title":"\u6d4b\u8bd5\u73af\u5883"},{"location":"performance_report/multi_datasource/#_3","text":"\u672c\u6b21\u6d4b\u8bd5\u6db5\u76d6\u6027\u80fd\u6d4b\u8bd5\u4e0e\u529f\u80fd\u6d4b\u8bd5\uff0c\u4e3b\u8981\u5305\u542b\u4e24\u4e2a\u76ee\u7684\uff1a \u5c55\u793aXSQL\u5728\u9488\u5bf9\u5355\u6570\u636e\u6e90\u3001\u591a\u6570\u636e\u6e90\u7684SQL\u89e3\u6790\u53ca\u6267\u884c\u80fd\u529b \u627e\u51faXSQL\u5728\u590d\u6742SQL\u5904\u7406\u4ee5\u53ca\u5927\u89c4\u6a21\u6570\u636e\u96c6\u8ba1\u7b97\u65f6\u5b58\u5728\u7684\u95ee\u9898","title":"\u6d4b\u8bd5\u76ee\u6807"},{"location":"performance_report/multi_datasource/#_4","text":"\u6570\u636e\u5747\u4e3a\u4e1a\u52a1\u90e8\u95e8\u7684\u7ebf\u4e0a\u6570\u636e\u3002 \u6570\u636e\u6e90 50 G/63178212 docs 100 G/123714760 docs 200 G/260567692 docs 500G/371503959 docs 1 T /466168986 docs Elasticsearch logsget-user-qdas-newuser-channel-all.msdocker_frontmidres1 logsget-user-qdas-newuser-channel-all.huajiao_frontmidres1 logsget-user-qdas-newuser-channel-all.chromium_frontmidres1 logsget-user-pc-profile-v1.profile logsget-user-profile.profile \u6570\u636e\u6e90 5 G/9105516 rows 10 G/116119018 rows 20 G/26252422 rows 50 G/317473749 rows 100 G/450071755 rows Hive (shbt) pre_newusergamepay gbc_20171128_hot_1 shoujizhushou_push_logshare_event pre_qdas_huajiao_unlogin_behavior pre_usergame_monthly \u6570\u636e\u6e90 50 M/1062854 rows 100 M/3230371 rows 500 M/9459722 rows 1 G/10100177 rows 2 G/29055658 rows MySQL (DB7) rpt_mso_english_result_q_daily rpt_shouyou_week_retention rpt_360game_plugin_new_report_daily rpt_cloudlive_drop_hourly1\uff08\u540e\u6765\u66f4\u6362\u4e3arpt_mso_chns_360aphone_query_pvuv_daily\uff09 rpt_cloudlive_errornum_all_daily","title":"\u6d4b\u8bd5\u6570\u636e\u96c6\u5927\u5c0f"},{"location":"performance_report/multi_datasource/#elasticsearchhive","text":"","title":"Elasticsearch\u4e0eHive\u7684\u6df7\u5408\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a"},{"location":"performance_report/multi_datasource/#_5","text":"\u7f16\u53f7 SQL 1 SELECT a.serverip, b.active_channel FROM (SELECT serverip FROM default.logsget.shoujizhushou_push_logshare_event WHERE serverip = '59.44.240.36') a JOIN (SELECT active_channel FROM myes.logsget_user_qdas_newuser_channel_all.msdocker_frontmidres1 WHERE channel = '100054' LIMIT 10) b ON a.serverip = b.active_channel 2 (SELECT serverip FROM default.logsget.shoujizhushou_push_logshare_event) UNION (SELECT active_channel FROM myes.logsget_user_qdas_newuser_channel_all.msdocker_frontmidres1 WHERE channel = '100054' LIMIT 10) 3 SELECT serverip, model FROM default.logsget.shoujizhushou_push_logshare_event WHERE serverip IN (SELECT channel FROM myes.logsget_user_qdas_newuser_channel_all.msdocker_frontmidres1 LIMIT 10) 4 SELECT first_table.active_channel FROM (SELECT active_channel FROM myes.logsget_user_qdas_newuser_channel_all.msdocker_frontmidres1 WHERE channel = '100054' LIMIT 10) first_table WHERE first_table.active_channel IS NOT NULL","title":"\u6d4b\u8bd5\u8bed\u53e5\u96c6"},{"location":"performance_report/multi_datasource/#_6","text":"\u6267\u884c\u5f15\u64ce Join Union SubQuery\uff08WHERE\uff09 SubQuery\uff08FROM\uff09 XSQL[ElasticSearch] XSQL[Hive] 201.862 190 360 21.183 XSQL Pushdown [ElasticSearch] XSQL[Hive] 141.476 153.667 125.207 0.249","title":"\u6d4b\u8bd5\u7ed3\u679c\uff08\u5355\u4f4d\uff1a\u79d2\uff09"},{"location":"performance_report/multi_datasource/#_7","text":"XSQL Pushdown\u76f8\u6bd4\u4e8eXSQL\uff0c\u6267\u884cElasticSearch\u67e5\u8be2\uff0c\u6027\u80fd\u6709\u8f83\u5927\u5e45\u5ea6\u7684\u63d0\u5347\u3002","title":"\u7ed3\u8bba"},{"location":"performance_report/multi_datasource/#mysqlhive","text":"","title":"MySQL\u4e0eHive\u7684\u6df7\u5408\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a"},{"location":"performance_report/multi_datasource/#_8","text":"\u7f16\u53f7 SQL 1 select a.serverip, b.bid from (SELECT serverip FROM default.logsget.shoujizhushou_push_logshare_event where serverip = '59.44.240.36') as a join (SELECT bid FROM test_mysql.db_share.rpt_cloudlive_errornum_all_daily where bid = 'huajiao' limit 10) as b on(a.serverip = b.bid) 2 (SELECT serverip FROM default.logsget.shoujizhushou_push_logshare_event) UNION (SELECT bid FROM test_mysql.db_share.rpt_cloudlive_errornum_all_daily where bid = 'huajiao' limit 10) 3 SELECT serverip, model FROM default.logsget.shoujizhushou_push_logshare_event WHERE serverip in (SELECT cid FROM test_mysql.db_share.rpt_cloudlive_errornum_all_daily LIMIT 10) 4 SELECT serverip, (SELECT COUNT(bid) FROM test_mysql.db_share.rpt_cloudlive_errornum_all_daily where cid = 'live_huajiao_v2') FROM default.logsget.shoujizhushou_push_logshare_event WHERE serverip = '59.44.240.36'","title":"\u6d4b\u8bd5\u8bed\u53e5\u96c6"},{"location":"performance_report/multi_datasource/#_9","text":"\u6267\u884c\u5f15\u64ce Join Union SubQuery(WHERE [MySQL]) SubQuery(SELECT [MySQL]) XSQL[MySQL] XSQL[Hive] 196.0173 241.5 165.3875 230.1265 XSQL Pushdown[MySQL] XSQL[Hive] 169.1963 183 163.9458 220.5993","title":"\u6d4b\u8bd5\u7ed3\u679c\uff08\u5355\u4f4d\uff1a\u79d2\uff09"},{"location":"performance_report/multi_datasource/#_10","text":"\u7531\u4e0a\u56fe\u5206\u6790\u53ef\u77e5\uff0c\u6267\u884cMySQL\u4e0eHive\u7684\u6df7\u5408\u67e5\u8be2\u65f6,XSQL PushDown\u76f8\u6bd4\u4e8eXSQL,\u6027\u80fd\u6709\u4e00\u5b9a\u5e45\u5ea6\u7684\u63d0\u5347\uff0c\u6267\u884cjoin\u64cd\u4f5c\u548cunion\u64cd\u4f5c\u7684\u63d0\u5347\u6548\u7387\u660e\u663e\u3002","title":"\u7ed3\u8bba"},{"location":"performance_report/multi_datasource/#mysqlelasticsearch","text":"","title":"MySQL\u4e0eElasticSearch\u7684\u6df7\u5408\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a"},{"location":"performance_report/multi_datasource/#_11","text":"\u7f16\u53f7 SQL 1 select a.active_channel, b.bid from (SELECT active_channel FROM myes.logsget_user_qdas_newuser_channel_all.msdocker_frontmidres1 where channel='100054' limit 10) as a join (SELECT bid FROM test_mysql.db_share.rpt_cloudlive_errornum_all_daily where bid = 'huajiao' limit 10) as b on(a.active_channel = b.bid) 2 (SELECT active_channel FROM myes.logsget_user_qdas_newuser_channel_all.msdocker_frontmidres1 where channel='100054' limit 10) UNION (SELECT bid FROM test_mysql.db_share.rpt_cloudlive_errornum_all_daily where bid = 'huajiao' limit 10) 3 SELECT channel FROM myes.logsget_user_qdas_newuser_channel_all.msdocker_frontmidres1 WHERE channel in (SELECT cid FROM test_mysql.db_share.rpt_cloudlive_errornum_all_daily LIMIT 10) 4 SELECT cid FROM test_mysql.db_share.rpt_cloudlive_errornum_all_daily where cid in (SELECT channel FROM myes.logsget_user_qdas_newuser_channel_all.msdocker_frontmidres1 limit 10) 5 select active_channel,(select count(bid) from test_mysql.db_share.rpt_cloudlive_errornum_all_daily) from myes.logsget_user_qdas_newuser_channel_all.msdocker_frontmidres1 where channel='100054' limit 10 6 select cid,(select count( active_channel) from myes.logsget_user_qdas_newuser_channel_all.msdocker_frontmidres1) from test_mysql.db_share.rpt_cloudlive_errornum_all_daily where cid = 'live_polo'","title":"\u6d4b\u8bd5\u8bed\u53e5\u96c6"},{"location":"performance_report/multi_datasource/#_12","text":"\u6267\u884c\u5f15\u64ce Jion Union SubQuery\uff08WHERE[MySQL]\uff09 SubQuery\uff08WHERE[ES]\uff09 SubQuery\uff08SELECT[MySQL]\uff09 SubQuery\uff08SELECT[ES]\uff09 XSQL Pushdown[MySQL] XSQL Pushdown[ElasticSearch] 0.56 1.1315 262.07675 11.40975 15.31425 2.5765 XSQL[MySQL] XSQL Pushdown[ElasticSearch] 7.941 6.53375 288.0025 11.40975 20.77525 2.5765 XSQL Pushdown[MySQL] XSQL[ElasticSearch] 20.4 9.977 262.07675 error 15.31425 287 XSQL[MySQL] XSQL[ElasticSearch] 20.745 15.75 288.0025 error 20.77525 287","title":"\u6d4b\u8bd5\u7ed3\u679c\uff08\u5355\u4f4d\uff1a\u79d2\uff09"},{"location":"performance_report/multi_datasource/#_13","text":"\u4e0a\u56fe\u5206\u6790\u53ef\u77e5\uff0c\u6267\u884cElasticSearch\u4e0eMySQL\u7684\u6df7\u5408\u67e5\u8be2\u65f6\uff0c\u4e24\u4e2a\u6570\u636e\u6e90\u4e0b\u63a8\u7684\u6267\u884c\u6548\u7387\u8981\u9ad8\u4e8e\u975e\u4e0b\u63a8\u7684\u6267\u884c\u6548\u7387\uff1b\u5c24\u5176\u5bf9\u4e8eES\u7684\u6267\u884c\uff0c\u975e\u4e0b\u63a8\u65f6\u6267\u884c\u5f88\u6162\uff0c\u5e76\u4e14\u6709\u65f6\u5b50\u67e5\u8be2\u6267\u884c\u4f1a\u51fa\u73b0\u8d85\u65f6\u9519\u8bef\u3002","title":"\u7ed3\u8bba"},{"location":"performance_report/mysql/","text":"MySQL\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a MySQL\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u662f\u57fa\u4e8e\u4e1a\u52a1\u6570\u636e\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u3002 \u6d4b\u8bd5\u73af\u5883 \u64cd\u4f5c\u7cfb\u7edf \uff1a CentOS release 6.2 \uff08Final\uff09 \u865a\u62df\u673a\u7248\u672c \uff1a Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode) \u6d4b\u8bd5\u673a\u5668 \uff1a client01v.qss.zzzc.qihoo.net xsql\u914d\u7f6e \uff1a Driver Memory\uff1a 5G Executor Inatances: 10\u6216100 Executor Memory\uff1a 5G \u6d4b\u8bd5\u76ee\u6807 \u672c\u6b21\u6d4b\u8bd5\u6db5\u76d6\u6027\u80fd\u6d4b\u8bd5\u4e0e\u529f\u80fd\u6d4b\u8bd5\uff0c\u4e3b\u8981\u5305\u542b\u4e24\u4e2a\u76ee\u7684\uff1a \u5c55\u793aXSQL\u5728\u9488\u5bf9\u5355\u6570\u636e\u6e90\u3001\u591a\u6570\u636e\u6e90\u7684sql\u89e3\u6790\u53ca\u6267\u884c\u80fd\u529b \u627e\u51faXSQL\u5728\u590d\u6742SQL\u5904\u7406\u4ee5\u53ca\u5927\u89c4\u6a21\u6570\u636e\u96c6\u8ba1\u7b97\u65f6\u5b58\u5728\u7684\u95ee\u9898 \u6d4b\u8bd5\u6570\u636e\u96c6\u7684\u5927\u5c0f \u6570\u636e\u6e90 50 M/1062854 rows 100 M/3230371 rows 500 M/9459722 rows 1 G/10100177 rows 2 G/29055658 rows MySQL db_share.rpt_mso_english_result_q_daily db_share.rpt_shouyou_week_retention db_share.rpt_360game_plugin_new_report_daily db_share.rpt_mso_chns_360aphone_query_pvuv_daily db_share.rpt_cloudlive_errornum_all_daily \u6d4b\u8bd5\u8bed\u53e5\u96c6 \u9009\u62e9\u64cd\u4f5c \u7f16\u53f7 SQL 1 select count(id) from rpt_mso_english_result_q_daily where id is not null 2 select count(id) from rpt_shouyou_week_retention where id is not null 3 select count(id) from rpt_360game_plugin_new_report_daily where id is not null 4 select count(id) from rpt_mso_chns_360aphone_query_pvuv_daily where id is not null 5 select count(id) from rpt_cloudlive_errornum_all_daily where id is not null \u805a\u5408\u64cd\u4f5c \u7f16\u53f7 SQL 1 select thedate,count(id),sum(pv1),avg(uv1) from rpt_mso_english_result_q_daily where id is not null group by thedate 2 select thedate,count(id),sum(cnt),avg(margin) from rpt_shouyou_week_retention where id is not null group by thedate 3 select thedate,count(id),sum(mids),avg(mids) from rpt_360game_plugin_new_report_daily where id is not null group by thedate 4 select thedate,count(id),sum(pv),avg(uv) from rpt_mso_chns_360aphone_query_pvuv_daily where id is not null group by thedate 5 select thedate,count(id),sum(times),avg(times) from rpt_cloudlive_errornum_all_daily where id is not null group by thedate \u5b50\u67e5\u8be2\u64cd\u4f5c \u7f16\u53f7 SQL 1 select id,q from rpt_mso_english_result_q_daily where id in (select id from dim_qwdesktop_pids where id is not null) 2 select id,channel from rpt_shouyou_week_retention where id in (select id from dim_qwdesktop_pids where id is not null) 3 select id,ver from rpt_360game_plugin_new_report_daily where id in (select id from dim_qwdesktop_pids where id is not null) 4 select id,version from rpt_mso_chns_360aphone_query_pvuv_daily where id in(select id from dim_qwdesktop_pids where id is not null) 5 select id, er from rpt_cloudlive_errornum_all_daily where id in (select id from dim_qwdesktop_pids where id is not null) \u8fde\u63a5\u64cd\u4f5c \u7f16\u53f7 SQL 1 select a.pv1,b.pid from dim_qwdesktop_pids b join rpt_mso_english_result_q_daily a on b.id = a.id 2 select a.channel,b.pid from dim_qwdesktop_pids b join rpt_shouyou_week_retention a on b.id = a.id 3 select a.ver,b.pid from dim_qwdesktop_pids b join rpt_360game_plugin_new_report_daily a on a.id = b.id 4 select a.version,b.pid from dim_qwdesktop_pids b join rpt_mso_chns_360aphone_query_pvuv_daily a on b.id = a.id 5 select a.cid,b.pid from dim_qwdesktop_pids b join rpt_cloudlive_errornum_all_daily a on b.id = a.id \u6d4b\u8bd5\u7ed3\u679c \uff08\u5355\u4f4d\uff1a\u79d2\uff09 \u9009\u62e9\u64cd\u4f5c 50 M/1062854 rows 100 M/3230371 rows 500 M/9459722 rows 1 G/10100177 rows 2 G/29055658 rows MySQL 0.3108 0.7944 2.14 2.408 6.512 XSQL Pushdown [MySQL] 0.3342 0.8236 2.187 2.433 6.56 XSQL [MySQL] 10 cores 0.8194 1.097 2.3772 2.4212 6.858 XSQL [MySQL] 100 cores 0.6592 0.9368 1.6762 2.3554 6.701 \u805a\u5408\u64cd\u4f5c 50 M/1062854 rows 100 M/3230371 rows 500 M/9459722 rows 1 G/10100177 rows 2 G/29055658 rows MySQL 1.3268 3.9434 11.916 15 95.5718 XSQL Pushdown [MySQL] 1.4412 4.0342 11.9726 15.1388 95.7764 XSQL [MySQL] 10 cores 3.0158 4.1242 10.2626 7.5206 20.182 XSQL [MySQL] 100 cores 1.1198 2.0068 4.4312 5.2076 11.0678 \u5b50\u67e5\u8be2\u64cd\u4f5c 50 M/1062854 rows 100 M/3230371 rows 500 M/9459722 rows 1 G/10100177 rows 2 G/29055658 rows MySQL 0.071 0.0712 0.0634 0.0686 0.0732 XSQL Pushdown [MySQL] 0.0906 0.093 0.0994 0.0972 0.1024 XSQL [MySQL] 10 cores 3.2938 3.2064 9.701 9.6808 19.2942 XSQL [MySQL] 100 cores 2.177 2.0992 5.6532 3.619 8.1348 \u8fde\u63a5\u64cd\u4f5c 50 M/1062854 rows 100 M/3230371 rows 500 M/9459722 rows 1 G/10100177 rows 2 G/29055658 rows MySQL 0.0726 0.0732 0.0648 0.0686 0.0714 XSQL Pushdown [MySQL] 0.0732 0.1136 0.1112 0.0948 0.0936 XSQL [MySQL] 10 cores 1.8602 2.6942 7.1488 11.2076 21.9634 XSQL [MySQL] 100 cores 1.4092 1.9544 3.6058 4.1024 11.534 \u7ed3\u8bba XSQL [Pushdown]\u76f8\u6bd4\u4e8eMySQL\u547d\u4ee4\u884c\uff0c\u6267\u884c\u6027\u80fd\u4ec5\u6709\u7ea650\u6beb\u79d2\u7684\u635f\u8017 XSQL\u501f\u52a9\u4e8eSpark\u6267\u884c\u65f6\uff0c\u5bf9\u4e8e\u9009\u62e9\u64cd\u4f5c\uff0c\u5176\u6027\u80fd\u548c\u4e0b\u63a8\u6267\u884c\u76f8\u5dee\u4e0d\u591a\uff1b\u5bf9\u4e8e\u805a\u5408\u64cd\u4f5c\uff0c\u6267\u884c\u7684\u6548\u7387\u660e\u663e\u63d0\u5347\uff0c\u800c\u4e14\u7533\u8bf7\u7684\u8d44\u6e90\u8d8a\u591a\uff0c\u6267\u884c\u901f\u5ea6\u8d8a\u5feb\uff1b\u5bf9\u4e8e\u5b50\u67e5\u8be2\u548c\u8fde\u63a5\u64cd\u4f5c\uff0c\u6027\u80fd\u8f83\u5dee\u3002 Note \u4ee5\u4e0a\u7ed3\u8bba\u7684\u5f97\u51fa\u53d7\u6570\u636e\u91cf\u3001SQL\u8bed\u53e5\u53ca\u6d4b\u8bd5\u73af\u5883\u7684\u5f71\u54cd\uff0c\u4ec5\u4f9b\u53c2\u8003\u3002","title":"MySQL"},{"location":"performance_report/mysql/#mysql","text":"MySQL\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u662f\u57fa\u4e8e\u4e1a\u52a1\u6570\u636e\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u3002","title":"MySQL\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a"},{"location":"performance_report/mysql/#_1","text":"\u64cd\u4f5c\u7cfb\u7edf \uff1a CentOS release 6.2 \uff08Final\uff09 \u865a\u62df\u673a\u7248\u672c \uff1a Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode) \u6d4b\u8bd5\u673a\u5668 \uff1a client01v.qss.zzzc.qihoo.net xsql\u914d\u7f6e \uff1a Driver Memory\uff1a 5G Executor Inatances: 10\u6216100 Executor Memory\uff1a 5G","title":"\u6d4b\u8bd5\u73af\u5883"},{"location":"performance_report/mysql/#_2","text":"\u672c\u6b21\u6d4b\u8bd5\u6db5\u76d6\u6027\u80fd\u6d4b\u8bd5\u4e0e\u529f\u80fd\u6d4b\u8bd5\uff0c\u4e3b\u8981\u5305\u542b\u4e24\u4e2a\u76ee\u7684\uff1a \u5c55\u793aXSQL\u5728\u9488\u5bf9\u5355\u6570\u636e\u6e90\u3001\u591a\u6570\u636e\u6e90\u7684sql\u89e3\u6790\u53ca\u6267\u884c\u80fd\u529b \u627e\u51faXSQL\u5728\u590d\u6742SQL\u5904\u7406\u4ee5\u53ca\u5927\u89c4\u6a21\u6570\u636e\u96c6\u8ba1\u7b97\u65f6\u5b58\u5728\u7684\u95ee\u9898","title":"\u6d4b\u8bd5\u76ee\u6807"},{"location":"performance_report/mysql/#_3","text":"\u6570\u636e\u6e90 50 M/1062854 rows 100 M/3230371 rows 500 M/9459722 rows 1 G/10100177 rows 2 G/29055658 rows MySQL db_share.rpt_mso_english_result_q_daily db_share.rpt_shouyou_week_retention db_share.rpt_360game_plugin_new_report_daily db_share.rpt_mso_chns_360aphone_query_pvuv_daily db_share.rpt_cloudlive_errornum_all_daily","title":"\u6d4b\u8bd5\u6570\u636e\u96c6\u7684\u5927\u5c0f"},{"location":"performance_report/mysql/#_4","text":"\u9009\u62e9\u64cd\u4f5c \u7f16\u53f7 SQL 1 select count(id) from rpt_mso_english_result_q_daily where id is not null 2 select count(id) from rpt_shouyou_week_retention where id is not null 3 select count(id) from rpt_360game_plugin_new_report_daily where id is not null 4 select count(id) from rpt_mso_chns_360aphone_query_pvuv_daily where id is not null 5 select count(id) from rpt_cloudlive_errornum_all_daily where id is not null \u805a\u5408\u64cd\u4f5c \u7f16\u53f7 SQL 1 select thedate,count(id),sum(pv1),avg(uv1) from rpt_mso_english_result_q_daily where id is not null group by thedate 2 select thedate,count(id),sum(cnt),avg(margin) from rpt_shouyou_week_retention where id is not null group by thedate 3 select thedate,count(id),sum(mids),avg(mids) from rpt_360game_plugin_new_report_daily where id is not null group by thedate 4 select thedate,count(id),sum(pv),avg(uv) from rpt_mso_chns_360aphone_query_pvuv_daily where id is not null group by thedate 5 select thedate,count(id),sum(times),avg(times) from rpt_cloudlive_errornum_all_daily where id is not null group by thedate \u5b50\u67e5\u8be2\u64cd\u4f5c \u7f16\u53f7 SQL 1 select id,q from rpt_mso_english_result_q_daily where id in (select id from dim_qwdesktop_pids where id is not null) 2 select id,channel from rpt_shouyou_week_retention where id in (select id from dim_qwdesktop_pids where id is not null) 3 select id,ver from rpt_360game_plugin_new_report_daily where id in (select id from dim_qwdesktop_pids where id is not null) 4 select id,version from rpt_mso_chns_360aphone_query_pvuv_daily where id in(select id from dim_qwdesktop_pids where id is not null) 5 select id, er from rpt_cloudlive_errornum_all_daily where id in (select id from dim_qwdesktop_pids where id is not null) \u8fde\u63a5\u64cd\u4f5c \u7f16\u53f7 SQL 1 select a.pv1,b.pid from dim_qwdesktop_pids b join rpt_mso_english_result_q_daily a on b.id = a.id 2 select a.channel,b.pid from dim_qwdesktop_pids b join rpt_shouyou_week_retention a on b.id = a.id 3 select a.ver,b.pid from dim_qwdesktop_pids b join rpt_360game_plugin_new_report_daily a on a.id = b.id 4 select a.version,b.pid from dim_qwdesktop_pids b join rpt_mso_chns_360aphone_query_pvuv_daily a on b.id = a.id 5 select a.cid,b.pid from dim_qwdesktop_pids b join rpt_cloudlive_errornum_all_daily a on b.id = a.id","title":"\u6d4b\u8bd5\u8bed\u53e5\u96c6"},{"location":"performance_report/mysql/#_5","text":"\u9009\u62e9\u64cd\u4f5c 50 M/1062854 rows 100 M/3230371 rows 500 M/9459722 rows 1 G/10100177 rows 2 G/29055658 rows MySQL 0.3108 0.7944 2.14 2.408 6.512 XSQL Pushdown [MySQL] 0.3342 0.8236 2.187 2.433 6.56 XSQL [MySQL] 10 cores 0.8194 1.097 2.3772 2.4212 6.858 XSQL [MySQL] 100 cores 0.6592 0.9368 1.6762 2.3554 6.701 \u805a\u5408\u64cd\u4f5c 50 M/1062854 rows 100 M/3230371 rows 500 M/9459722 rows 1 G/10100177 rows 2 G/29055658 rows MySQL 1.3268 3.9434 11.916 15 95.5718 XSQL Pushdown [MySQL] 1.4412 4.0342 11.9726 15.1388 95.7764 XSQL [MySQL] 10 cores 3.0158 4.1242 10.2626 7.5206 20.182 XSQL [MySQL] 100 cores 1.1198 2.0068 4.4312 5.2076 11.0678 \u5b50\u67e5\u8be2\u64cd\u4f5c 50 M/1062854 rows 100 M/3230371 rows 500 M/9459722 rows 1 G/10100177 rows 2 G/29055658 rows MySQL 0.071 0.0712 0.0634 0.0686 0.0732 XSQL Pushdown [MySQL] 0.0906 0.093 0.0994 0.0972 0.1024 XSQL [MySQL] 10 cores 3.2938 3.2064 9.701 9.6808 19.2942 XSQL [MySQL] 100 cores 2.177 2.0992 5.6532 3.619 8.1348 \u8fde\u63a5\u64cd\u4f5c 50 M/1062854 rows 100 M/3230371 rows 500 M/9459722 rows 1 G/10100177 rows 2 G/29055658 rows MySQL 0.0726 0.0732 0.0648 0.0686 0.0714 XSQL Pushdown [MySQL] 0.0732 0.1136 0.1112 0.0948 0.0936 XSQL [MySQL] 10 cores 1.8602 2.6942 7.1488 11.2076 21.9634 XSQL [MySQL] 100 cores 1.4092 1.9544 3.6058 4.1024 11.534","title":"\u6d4b\u8bd5\u7ed3\u679c \uff08\u5355\u4f4d\uff1a\u79d2\uff09"},{"location":"performance_report/mysql/#_6","text":"XSQL [Pushdown]\u76f8\u6bd4\u4e8eMySQL\u547d\u4ee4\u884c\uff0c\u6267\u884c\u6027\u80fd\u4ec5\u6709\u7ea650\u6beb\u79d2\u7684\u635f\u8017 XSQL\u501f\u52a9\u4e8eSpark\u6267\u884c\u65f6\uff0c\u5bf9\u4e8e\u9009\u62e9\u64cd\u4f5c\uff0c\u5176\u6027\u80fd\u548c\u4e0b\u63a8\u6267\u884c\u76f8\u5dee\u4e0d\u591a\uff1b\u5bf9\u4e8e\u805a\u5408\u64cd\u4f5c\uff0c\u6267\u884c\u7684\u6548\u7387\u660e\u663e\u63d0\u5347\uff0c\u800c\u4e14\u7533\u8bf7\u7684\u8d44\u6e90\u8d8a\u591a\uff0c\u6267\u884c\u901f\u5ea6\u8d8a\u5feb\uff1b\u5bf9\u4e8e\u5b50\u67e5\u8be2\u548c\u8fde\u63a5\u64cd\u4f5c\uff0c\u6027\u80fd\u8f83\u5dee\u3002 Note \u4ee5\u4e0a\u7ed3\u8bba\u7684\u5f97\u51fa\u53d7\u6570\u636e\u91cf\u3001SQL\u8bed\u53e5\u53ca\u6d4b\u8bd5\u73af\u5883\u7684\u5f71\u54cd\uff0c\u4ec5\u4f9b\u53c2\u8003\u3002","title":"\u7ed3\u8bba"},{"location":"performance_report/redis/","text":"Redis\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a Redis\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u4e3b\u8981\u662f\u57fa\u4e8eTPCDS\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u3002 \u6d4b\u8bd5\u73af\u5883 \u64cd\u4f5c\u7cfb\u7edf \uff1a CentOS release 6.2 (Final) \u200b \u865a\u62df\u673a\u7248\u672c \uff1a Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode) \u200b \u6d4b\u8bd5\u673a\u5668 \uff1a client01v.qss.zzzc.qihoo.net\u3001clientadmin.dfs.shbt.qihoo.net XSQL\u914d\u7f6e \uff1a Driver Memory\uff1a5G \u57fa\u4e8eTPCDS\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a \u6d4b\u8bd5\u76ee\u6807 \u672c\u6b21\u6d4b\u8bd5\u65e8\u5728\u5bf9\u6bd4XSQL\u4e0b\u63a8\u4e0ejedis api\u7684\u6027\u80fd\u8868\u73b0\u3002 \u6d4b\u8bd5\u6570\u636e\u96c6 \u6570\u636e\u91cf\u4e00\uff1a2W\u6761 \u6570\u636e\u91cf\u4e8c\uff1a10W\u6761 \u6d4b\u8bd5\u7ed3\u679c\u6c47\u603b \u5e8f\u53f7 jedis api xsql sql\u8bed\u53e5 1 0.003 0.479 select * where key = 'geonames2w:10000029'; 2 0.005 0.142 select * from geonames2w where suffix in ('10000028','10000030'); 3 55.818 59.991 select * from geonames2w; 4 0.003 0.465 select * where key = 'geonames10w:10000029'; 5 0.006 0.072 select * from geonames10w where suffix in ('10000028','10000030'); 6 297.196 294.35 select * from geonames10w; 7 0.004 0.047 select * where key = 'geonames10w:10000029'; 8 0.006 0.051 select * from geonames100w where suffix in ('10000028','10000030'); 9 2832.887 2960.651 select * from geonames100w; \u91c7\u7528pipeline\u65b9\u6cd5\u540e\uff1a \u5e8f\u53f7 jedis get key only xsql sql\u8bed\u53e5 3 5.17 8.219 select * from geonames2w; 6 25.895 30.513 select * from geonames10w; 9 261.946 333.238 select * from geonames100w; \u7ed3\u8bba \u5bf9\u4e8e\u70b9\u67e5\u8be2\uff0c\u4f7f\u7528jedis api\u67e5\u8be2\u7528\u65f6\u4e3a0.003s\uff0c\u4f7f\u7528xsql\u67e5\u8be2\u7528\u65f6\u7ea6\u4e3a0.05s\u3002 \u5bf9\u4e8escan\u7c7b\u578b\u7684\u67e5\u8be2\uff0c\u4f7f\u7528jedis api\u548cxsql\u7684\u67e5\u8be2\u6027\u80fd\u5747\u4e0d\u7406\u60f3\uff0c\u7528\u65f6\u4f30\u7b97\u65b9\u6cd5\u4e3a\uff1a\u6bcf1\u4e07/\u5ef6\u8fdf3s\u3002 \u66f4\u65b0\uff1a\u91c7\u7528pipeline\u65b9\u6cd5\u540e\uff0c\u7528\u65f6\u4f30\u7b97\u65b9\u6cd5\u4e3a\u7b2c1\u4e07/\u5ef6\u8fdf0.3s\u3002","title":"Redis"},{"location":"performance_report/redis/#redis","text":"Redis\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u4e3b\u8981\u662f\u57fa\u4e8eTPCDS\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\u3002","title":"Redis\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a"},{"location":"performance_report/redis/#_1","text":"\u64cd\u4f5c\u7cfb\u7edf \uff1a CentOS release 6.2 (Final) \u200b \u865a\u62df\u673a\u7248\u672c \uff1a Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode) \u200b \u6d4b\u8bd5\u673a\u5668 \uff1a client01v.qss.zzzc.qihoo.net\u3001clientadmin.dfs.shbt.qihoo.net XSQL\u914d\u7f6e \uff1a Driver Memory\uff1a5G","title":"\u6d4b\u8bd5\u73af\u5883"},{"location":"performance_report/redis/#tpcds","text":"","title":"\u57fa\u4e8eTPCDS\u7684\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a"},{"location":"performance_report/redis/#_2","text":"\u672c\u6b21\u6d4b\u8bd5\u65e8\u5728\u5bf9\u6bd4XSQL\u4e0b\u63a8\u4e0ejedis api\u7684\u6027\u80fd\u8868\u73b0\u3002","title":"\u6d4b\u8bd5\u76ee\u6807"},{"location":"performance_report/redis/#_3","text":"\u6570\u636e\u91cf\u4e00\uff1a2W\u6761 \u6570\u636e\u91cf\u4e8c\uff1a10W\u6761","title":"\u6d4b\u8bd5\u6570\u636e\u96c6"},{"location":"performance_report/redis/#_4","text":"\u5e8f\u53f7 jedis api xsql sql\u8bed\u53e5 1 0.003 0.479 select * where key = 'geonames2w:10000029'; 2 0.005 0.142 select * from geonames2w where suffix in ('10000028','10000030'); 3 55.818 59.991 select * from geonames2w; 4 0.003 0.465 select * where key = 'geonames10w:10000029'; 5 0.006 0.072 select * from geonames10w where suffix in ('10000028','10000030'); 6 297.196 294.35 select * from geonames10w; 7 0.004 0.047 select * where key = 'geonames10w:10000029'; 8 0.006 0.051 select * from geonames100w where suffix in ('10000028','10000030'); 9 2832.887 2960.651 select * from geonames100w; \u91c7\u7528pipeline\u65b9\u6cd5\u540e\uff1a \u5e8f\u53f7 jedis get key only xsql sql\u8bed\u53e5 3 5.17 8.219 select * from geonames2w; 6 25.895 30.513 select * from geonames10w; 9 261.946 333.238 select * from geonames100w;","title":"\u6d4b\u8bd5\u7ed3\u679c\u6c47\u603b"},{"location":"performance_report/redis/#_5","text":"\u5bf9\u4e8e\u70b9\u67e5\u8be2\uff0c\u4f7f\u7528jedis api\u67e5\u8be2\u7528\u65f6\u4e3a0.003s\uff0c\u4f7f\u7528xsql\u67e5\u8be2\u7528\u65f6\u7ea6\u4e3a0.05s\u3002 \u5bf9\u4e8escan\u7c7b\u578b\u7684\u67e5\u8be2\uff0c\u4f7f\u7528jedis api\u548cxsql\u7684\u67e5\u8be2\u6027\u80fd\u5747\u4e0d\u7406\u60f3\uff0c\u7528\u65f6\u4f30\u7b97\u65b9\u6cd5\u4e3a\uff1a\u6bcf1\u4e07/\u5ef6\u8fdf3s\u3002 \u66f4\u65b0\uff1a\u91c7\u7528pipeline\u65b9\u6cd5\u540e\uff0c\u7528\u65f6\u4f30\u7b97\u65b9\u6cd5\u4e3a\u7b2c1\u4e07/\u5ef6\u8fdf0.3s\u3002","title":"\u7ed3\u8bba"},{"location":"troubleshooting/common/","text":"Spark\u6545\u969c\u8bca\u65ad \u76ee\u524d\u7cfb\u7edf\u90e8\u8fd0\u7ef4\u7684Spark\u4e3b\u8981\u6709Spark2.3\u548cSpark1.6\u4e24\u4e2a\u7248\u672c\u3002\u7528\u6237\u5728\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\u96be\u514d\u4f1a\u53d1\u751f\u5404\u79cd\u5404\u6837\u7684\u95ee\u9898\uff0c\u4e3a\u4e86\u63d0\u9ad8\u6545\u969c\u8bca\u65ad\u7684\u6548\u7387\uff0c\u4e5f\u4e3a\u4e86\u5bf9\u7ecf\u9a8c\u8fdb\u884c\u6c89\u6dc0\uff0c\u8fd9\u91cc\u5c06\u5bf9\u5404\u7c7b\u95ee\u9898\u5982\u4f55\u5904\u7406\u8fdb\u884c\u4ecb\u7ecd\u3002 \u672c\u6587\u5c06Spark\u6545\u969c\u5206\u4e3a\u901a\u7528\u6545\u969c\u3001Spark2.3\u7279\u6709\u6545\u969c\u3001Spark1.6\u7279\u6709\u6545\u969c\u3002 \u4e00\u3001\u901a\u7528\u6545\u969c 1\u3001\u96c6\u7fa4\u73af\u5883\u7c7b 1-1\u3001\u63d0\u4ea4\u7684spark\u4efb\u52a1\uff0c\u957f\u65f6\u95f4\u5904\u4e8eACCEPTED\u72b6\u6001\u3002 \u200b \u8fd9\u79cd\u95ee\u9898\u975e\u5e38\u5e38\u89c1\uff0c\u6b64\u65f6\u9700\u8981\u4ece\u5ba2\u6237\u7aef\u65e5\u5fd7\u4e2d\u627e\u5230tracking URL\uff0c\u4f8b\u5982\uff1a 18/12/14 17:42:29 INFO Client: client token: N/A diagnostics: N/A ApplicationMaster host: N/A ApplicationMaster RPC port: -1 queue: root.test start time: 1544780544655 final status: UNDEFINED tracking URL: http://test.qihoo.net:8888/proxy/application_1543893582405_838478/ user: test 18/12/14 17:42:32 INFO Client: Application report for application_1543893582405_838478 (state: ACCEPTED) \u5176\u4e2d\u7684tracking URL\u4e3ahttp://test.qihoo.net:8888/proxy/application_1543893582405_838478/\uff0c\u4ece\u6d4f\u89c8\u5668\u6253\u5f00\u9875\u9762\u5c06\u770b\u5230\u7c7b\u4f3c\u4fe1\u606f\uff1a User: test Queue: root.test clientHost: Name: runFeatureAnalysis Application Type: SPARK Application Tags: Application Priority: NORMAL (Higher Integer value indicates higher priority) YarnApplicationState: ACCEPTED: waiting for AM container to be allocated, launched and register with RM. FinalStatus Reported by AM: Application has not completed yet. Started: Fri Dec 14 15:50:20 +0800 2018 Elapsed: 2hrs, 3mins, 55sec Tracking URL: ApplicationMaster Diagnostics: \u53ef\u4ee5\u770b\u5230\u72b6\u6001\u4e5f\u662fACCEPTED\u3002\u5e76\u4e14\u961f\u5217\u662froot.test\u3002 \u6253\u5f00http://test.qihoo.net:8888/cluster/scheduler?openQueues=root.test\uff0c\u627e\u5230root.test\u961f\u5217\u7684\u8d44\u6e90\uff0c\u5c06\u770b\u5230\u5982\u4e0b\u4fe1\u606f\uff1a Used Resources: memory:799232, vCores:224, gCores:0 Reserved Resources: memory:0, vCores:0, gCores:0 Num Active Applications: 2 Num Pending Applications: 12 Min Resources: memory:40000, vCores:20, gCores:0 Max Resources: memory:800000, vCores:400, gCores:0 Accessible Node Labels: CentOS6,CentOS7,DEFAULT_LABEL Steady Fair Share: memory:800000, vCores:0, gCores:0 Instantaneous Fair Share: memory:800000, vCores:0, gCores:0 \u4e3b\u8981\u5173\u6ce8Max Resources\u548cUsed Resources\uff0c\u8bf4\u660e\u7528\u6237\u961f\u5217\u7684\u8d44\u6e90\u5df2\u7ecf\u6d88\u8017\u5b8c\u4e86\u3002 1-2\u3001\u6ca1\u6709\u5b89\u88c5Java8 \u7528\u6237\u63d0\u4ea4\u7684\u4f5c\u4e1a\u5728\u672a\u8fd0\u884ctask\u4e4b\u524d\uff0cAM\u5df2\u7ecf\u9000\u51fa\uff0c\u5bfc\u81f4\u4f5c\u4e1a\u5931\u8d25\u3002 Container exited with a non-zero exit code 127 Failing this attempt. Failing the application. ApplicationMaster host: N/A ApplicationMaster RPC port: -1 queue: root.default start time: 1546850986115 final status: FAILED tracking URL: http://xxxxxxxx:8888/cluster/app/application_1493705730010_45634 user: hdp-360sec Moved to trash: /home/spark/cache/.sparkStaging/application_1493705730010_45634 19/01/07 16:48:07 INFO Client: Deleted staging directory hdfs://xxxxxxx:9000/home/spark/cache/.sparkStaging/application_1493705730010_45634 19/01/07 16:48:07 ERROR SparkContext: Error initializing SparkContext. org.apache.spark.SparkException: Yarn application has already ended! It might have been killed or unable to launch application master. at org.apache.spark.scheduler.cluster.YarnClientSchedulerBackend.waitForApplication(YarnClientSchedulerBackend.scala:89) at org.apache.spark.scheduler.cluster.YarnClientSchedulerBackend.start(YarnClientSchedulerBackend.scala:63) at org.apache.spark.scheduler.TaskSchedulerImpl.start(TaskSchedulerImpl.scala:164) at org.apache.spark.SparkContext. init (SparkContext.scala:502) ... at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:497) at org.apache.spark.deploy.JavaMainApplication.start(SparkApplication.scala:52) at org.apache.spark.deploy.SparkSubmit$.org$apache$spark$deploy$SparkSubmit$$runMain(SparkSubmit.scala:879) at org.apache.spark.deploy.SparkSubmit$.doRunMain$1(SparkSubmit.scala:197) at org.apache.spark.deploy.SparkSubmit$.submit(SparkSubmit.scala:227) at org.apache.spark.deploy.SparkSubmit$.main(SparkSubmit.scala:136) at org.apache.spark.deploy.SparkSubmit.main(SparkSubmit.scala) Exception in thread main java.lang.ExceptionInInitializerError ... at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:497) at org.apache.spark.deploy.JavaMainApplication.start(SparkApplication.scala:52) at org.apache.spark.deploy.SparkSubmit$.org$apache$spark$deploy$SparkSubmit$$runMain(SparkSubmit.scala:879) at org.apache.spark.deploy.SparkSubmit$.doRunMain$1(SparkSubmit.scala:197) at org.apache.spark.deploy.SparkSubmit$.submit(SparkSubmit.scala:227) at org.apache.spark.deploy.SparkSubmit$.main(SparkSubmit.scala:136) at org.apache.spark.deploy.SparkSubmit.main(SparkSubmit.scala) Caused by: org.apache.spark.SparkException: Yarn application has already ended! It might have been killed or unable to launch application master. at org.apache.spark.scheduler.cluster.YarnClientSchedulerBackend.waitForApplication(YarnClientSchedulerBackend.scala:89) at org.apache.spark.scheduler.cluster.YarnClientSchedulerBackend.start(YarnClientSchedulerBackend.scala:63) at org.apache.spark.scheduler.TaskSchedulerImpl.start(TaskSchedulerImpl.scala:164) at org.apache.spark.SparkContext. init (SparkContext.scala:502) ... 11 more \u67e5\u770btracking URL\uff0c\u53d1\u73b0\u5982\u4e0b\u4fe1\u606f\uff1a /bin/bash: /home/xxx/xxxxx/java8/bin/java: ucirc; #65533; #65533; #65533; #504; #65533; #65533; #316; #65533; #65533; #65533; #319; frac14; \u548c\u660e\u663e\u662f\u96c6\u7fa4\u7684\u4e00\u4e9b\u673a\u5668\u6f0f\u88c5java8\u4e86 2\u3001spark\u5e94\u7528\u7c7b 2-1\u3001\u8fde\u4e0d\u4e0a\u67d0\u4e2aexecutor\uff0c\u5bfc\u81f4\u4efb\u52a1\u5931\u8d25 Caused by: java.net.ConnectException: Connection refused: /10.160.113.58:39941 at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method) at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:735) at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:223) \u8be5\u8282\u70b9\u4e0a\u7684nodemanager\u4e0a\u67d0\u4e2acontainer\u7684\u65e5\u5fd7\u663e\u793a INFO org.apache.hadoop.yarn.server.nodemanager.containermanager.monitor.ContainersMonitorImpl: Memory usage of ProcessTree 29181 for container-ia container e124 1 888381: 10.7 GB of 11 GB physical memory used; 11.7 GB of 23.1 GB virtual memory used INFO org.apac e.hadoop.yarn.server.nodemanager.containermanager.container.ContainerImpl: Container container e124 1543893582485 1154818 81 transitioned f om RUNNING to KILLING INFO org.apache.hadoop.yarn.server.nodemanager.contaxnermanager.launcher.ContaznerLaunch. Cleaning up container container e124 1543893582485 1154 18 INFO org.apache.hadoop.yarn.server.nodemanager.containermanager.monitor.ContainersMonitorImpl: Memory usage of ProcessTree 29181 for container-ia container e124 1543893582485 1154818 81 888381: -1B of 11 GB physical memory used; -1B of 23.1 GB virtual memory used INFO org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerImpl: Container container e124 1543893582485 1154818 81 transitioned from KILLING to EXITED WITH FAIIURE WARN org.apache.hadoop.yarn.server.nodemanager.NMAuditLogger: USER=hdp-portrait OPERATION=Container Finished \u2014 Failed TARGET=ContainerImpl P SULT=FAILURE DESCRIPTION=Container failed with state: EXITED WITH FAILURE APPID=application 1543893582485 1154818 CONTAINERID=container e124 1543893582485 115481 1 888381 INFO org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerImpl: Container container e124 1543893582485 1154818 81 888381 transitioned from EXITED WITH FAILURE to DONE \u6216\u8005\u4efb\u52a1\u65e5\u5fd7\u663e\u793a ERROR executor.CoarseGrainedExecutorBackend: RECEIVED SIGNAL 15: SIGTERM \u539f\u56e0\uff1a \u95ee\u9898\u7684\u6700\u7ec8\u539f\u56e0\u662f\u67d0\u4e2a\u8282\u70b9\u4e0a\u7684\u67d0\u4e2aexecutor\u6302\u6389\u4e86\uff0c\u5bfc\u81f4\u65e0\u6cd5\u83b7\u53d6\u4e0a\u9762\u7684\u6570\u636e\uff0c\u5bfc\u81f4\u4efb\u52a1\u5931\u8d25\u3002 \u89e3\u51b3\u65b9\u6cd5\uff1a \u5f52\u6839\u7ed3\u5e95\u8fd8\u662f\u5185\u5b58\u7684\u95ee\u9898\uff0c\u6709\u4e24\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u9519\u8bef\uff0c\u52a0\u5927excutor-memory\u7684\u503c \u6216\u8005 \u51cf\u5c11executor-cores\u7684\u6570\u91cf \u6216\u8005\u589e\u52a0\u5206\u533a\u7b49\u624b\u6bb5\u5c31\u53ef\u4ee5\u89e3\u51b3\u3002 2-2\u3001spark kryo size \u8bbe\u7f6e\u592a\u5c0f\u6216\u8005\u8d85\u8fc7\u6700\u5927\u503c\uff08 2G\uff09 Job aborted due to stage failure: Task 2 in stage 3.0 failed 4 times, most recent failure: Lost task 2.3 in stage 3.0 (TID 28, hpc152.sys.lycc.qihoo.net, executor 11): org.apache.spark.SparkException: Kryo serialization failed: Buffer overflow. Available: 2, required: 8 \u5408\u7406\u8bbe\u7f6espark.kryoserializer.buffer.max,spark.kryoserializer.buffer spark.kryoserializer.buffer.max\u5e94\u8be5\u5c0f\u4e8e2G \u5982\u679c\u8bbe\u7f6e\u5c0f\u4e8e2G\u8fd8\u662f\u62a5\u9519\uff0c\u53ef\u80fd\u662f\u8f93\u5165\u6570\u636e\u592a\u5927\u6216\u8005\u903b\u8f91\u590d\u6742\u751f\u6210\u7684\u6570\u636e\u591a\uff0c\u5efa\u8bae\u51cf\u5c11\u6bcf\u4e2atask\u7684\u5904\u7406\u6570\u636e\u91cf 2-3\u3001executor \u5185\u5b58\u6ea2\u51fa executor java.lang.OutOfMemoryError:Java heap space \u89e3\u51b3\u65b9\u6cd5\uff1a \u52a0\u5927excutor-memory\u7684\u503c\u6216\u8005\u51cf\u5c11executor-cores\u7684\u6570\u91cf\u6216\u8005\u589e\u52a0\u5206\u533a\u7b49\u624b\u6bb5\u5c31\u53ef\u4ee5\u89e3\u51b3\u3002 2-4\u3001spark\u4f5c\u4e1a\u8d85\u65f6 Connection to /10.203.34.203:36650 has been quiet for 300000 ms while there are outstanding requests. Assuming connection is dead; please adjust spark.network.timeout if this is wrong. Connection to /10.203.34.203:36650 has been quiet for 300000 ms while there are outstanding requests. Assuming connection is dead; please adjust spark.network.timeout if this is wrong. Connection to /10.203.34.203:36650 has been quiet for 300000 ms while there are outstanding requests. Assuming connection is dead; please adjust spark.network.timeout if this is wrong. Connection to /10.203.34.203:36650 has been quiet for 300000 ms while there are outstanding requests. Assuming connection is dead; please adjust spark.network.timeout if this is wrong. Connection to /10.203.34.203:36650 has been quiet for 300000 ms while there are outstanding requests. Assuming connection is dead; please adjust spark.network.timeout if this is wrong \u539f\u56e0 \u8be5executor gc\u975e\u5e38\u9891\u7e41\uff0c\u5bfc\u81f4\u8d85\u65f6 \u89e3\u51b3\u65b9\u6cd5\uff1a 1\u3001\u52a0\u5927excutor-memory\u7684\u503c\u6216\u8005\u51cf\u5c11executor-cores\u7684\u6570\u91cf\u6216\u8005\u589e\u52a0\u5206\u533a\u7b49\u624b\u6bb5\u5c31\u53ef\u4ee5\u89e3\u51b3\u3002 2\u3001\u5408\u7406\u8bbe\u7f6espark.network.timeout 2-5\u3001WARN cannot remove /xxxxx/data_mode=d/xxx:No such file or directory 18/12/17 17:17:17 WARN FileSystem:java.io.FileNotFoundException: cannot remove /xxxxx/data_mode=d/hist_dur=1/part-00000-cad0a9bc-0c8b-4298-b636-207f107732c1-c000: No such file or directory. at org.apache.hadoop.fs.FsShell.delete(FsShell.java:1423) at org.apache.hadoop.hdfs.DistributedFileSystem.deleteUsingTrash(DistributedFileSystem.java:956) \u5bf9\u4e8e\u8fd9\u79cd\u8b66\u544a\u4fe1\u606f\uff0c\u4e0d\u5f71\u54cd\u4f5c\u4e1a\uff0c\u7528\u6237\u53ef\u4ee5\u5ffd\u7565\u3002 2-6\u3001WARN fs.TrashPolicyDefault: Can\u2019t create trash directory: hdfs://xxx/xxx/... 19/01/07 11:51:31 WARN fs.TrashPolicyDefault: Can\u2019t create trash directory: hdfsold://xxxxx:9000/user/xxxxx/.Trash/Current/home/xxxxx/project/bool/userdata/optimization/targeting/xxxxxxxxxx/xxxxxxx Problem with Trash.java.io.FileNotFoundException: Parent path is not a directory: /user/xxxxx/.Trash/Current/home/xxxxx/project/bool/userdata/optimization/targeting/xxxxxxx/xxxxxxx at org.apache.hadoop.hdfs.server.namenode.FSDirectory.mkdirs(FSDirectory.java:1637) at org.apache.hadoop.hdfs.server.namenode.FSNamesystem.mkdirsInternal(FSNamesystem.java:4177) at org.apache.hadoop.hdfs.server.namenode.FSNamesystem.mkdirs(FSNamesystem.java:4107) at org.apache.hadoop.hdfs.server.namenode.NameNode.mkdirs(NameNode.java:1184) at sun.reflect.GeneratedMethodAccessor122.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at org.apache.hadoop.ipc.RPCServer.call(RPC.java:743) at org.apache.hadoop.ipc.ServerServer.call(RPC.java:743)atorg.apache.hadoop.ipc.ServerHandler1.run(Server.java:1189) at org.apache.hadoop.ipc.Server1.run(Server.java:1189)atorg.apache.hadoop.ipc.ServerHandler1.run(Server.java:1185) at java.security.AccessController.doPrivileged(Native Method) at javax.security.auth.Subject.doAs(Subject.java:415) at org.apache.hadoop.ipc.Server1.run(Server.java:1185)atjava.security.AccessController.doPrivileged(NativeMethod)atjavax.security.auth.Subject.doAs(Subject.java:415)atorg.apache.hadoop.ipc.ServerHandler.run(Server.java:1183) . Consider using -skipTrash option \u5bf9\u4e8e\u8fd9\u79cd\u8b66\u544a\u4fe1\u606f\uff0c\u4e0d\u5f71\u54cd\u4f5c\u4e1a\uff0c\u7528\u6237\u53ef\u4ee5\u5ffd\u7565\u3002 2-7\u3001Total size of serialized results of ... is bigger than spark.driver.maxResultSize (1024.0 MB) \u7528\u6237\u6267\u884c\u7684\u62a5\u9519\u4fe1\u606f\uff1a ERROR TaskSetManager: Total size of serialized results of 329 tasks (1025.4 MB) is bigger than spark.driver.maxResultSize (1024.0 MB) \u200b \u8fd9\u79cd\u95ee\u9898\u4e00\u822c\u662f\u7528\u6237\u5728spark-sql\u6216spark-hive\u4e2d\u76f4\u63a5\u67e5\u8be2\u8fd4\u56de\u7684\u6570\u636e\u91cf\u8fc7\u5927\u9020\u6210\u3002\u4e5f\u53ef\u80fd\u662f\u7528\u6237\u5e94\u7528\u4e2d\u4f7f\u7528\u4e86\u62c9\u53d6\u6570\u636e\u5230driver\u7aef\u7684API\uff08\u4f8b\u5982\uff1acollect\u3001show\uff09\u3002 \u200b \u89e3\u51b3\u65b9\u6cd5\uff1a\u7528\u6237\u5e94\u8be5\u8003\u8651\u62c9\u53d6\u6570\u636e\u5230driver\u7aef\u662f\u5426\u5408\u7406\uff1f\u5982\u679c\u4e0d\u5408\u7406\uff0c\u589e\u52a0\u8fc7\u6ee4\u6761\u4ef6\u6216\u8005\u91c7\u7528insert overwrite directory\u547d\u4ee4\u89e3\u51b3\uff1b\u5982\u679c\u5408\u7406\uff0c\u5219\u9002\u5f53\u589e\u52a0spark.driver.maxResultSize\u7684\u5927\u5c0f\u3002 2-8\u3001 Current usage: 3.5 GB of 3.5 GB physical memory used \u7528\u6237\u4f5c\u4e1a\u51fa\u73b0\u5982\u4e0b\u9519\u8bef\uff1a 19/01/10 16:01:01 ERROR YarnScheduler: Lost executor 70 on 10.162.90.26: Executor for container container_e46_1545125871120_683318_01_000071 exited because of a YARN event (e.g., pre-emption) and not because of an error in the running j ob. 19/01/10 16:02:32 ERROR YarnScheduler: Lost executor 265 on 10.160.98.120: Container marked as failed: container_e46_1545125871120_683318_01_000252 on host: 10.160.98.120. Exit status: 137. Diagnostics: Container killed on request. Exit code is 137. More Information Container exited with a non-zero exit code 137 Killed by external signal 19/01/10 16:02:35 ERROR YarnScheduler: Lost executor 159 on 10.160.107.169: Container marked as failed: container_e46_1545125871120_683318_01_000164 on host: 10.160.107.169. **\\*==Exit status: 15. Diagnostics: Container [pid=31942,containerID=container_e46_1545125871120_683318_01_000164] is running beyond physical memory limits. Current usage: 3.5 GB of 3.5 GB physical memory used; 5.3 GB of 7.3 GB virtual memory used. Killing container.**==* \u9047\u5230\u8fd9\u79cd\u95ee\u9898\uff0c\u5e94\u8be5\u9996\u5148\u67e5\u770b\u6570\u636e\u662f\u5426\u6709\u503e\u659c\uff0c\u5982\u679c\u6ca1\u6709\u503e\u659c\uff0c\u770b\u770b\u80fd\u5426\u9002\u5f53\u589e\u52a0\u5206\u533a\u6570\uff08\u5206\u533a\u8bbe\u7f6e\u8fc7\u591a\u662f\u6709\u4ee3\u4ef7\u7684\uff09\uff0c\u6216\u8005\u4ece\u6e90\u5934\u8fc7\u6ee4\u6216\u8005\u51cf\u5c11\u6570\u636e\u91cf\u3002\u6700\u540e\u4e0d\u884c\uff0c\u518d\u8c03\u9ad8executor\u7684\u5185\u5b58\u3002 3\u3001PySpark\u76f8\u5173 3-1\u3001python\u4f7f\u7528\u4e0d\u5f53 ERROR ApplicationMaster: User class threw exception: java.io.IOException: Cannot run program ./python27/bin/python : error=2, No such file or directory java.io.IOException:Cannot run program ./python27/bin/python : error=2, No such file or directory \u89e3\u51b3\u65b9\u6cd5\uff1a\u7528\u6237\u4f7f\u7528archives\u65b9\u5f0f\u63d0\u4ea4python2.7.tgz\uff0c\u8be5tgz\u6709\u591a\u7ea7\u76ee\u5f55\u6307\u5b9a\u7684Python\u7684\u8def\u5f84\u4e0d\u5bf9\u3002 3-2\u3001python\u4efb\u52a1\u957f\u65f6\u95f4\u4e0d\u7ed3\u675f \u67e5\u770b\u7528\u6237\u7684executor\u7ebf\u7a0b\uff0c\u53d1\u73b0\uff1a java.net.SocketInputStream.socketRead0(Native Method) java.net.SocketInputStream.read(SocketInputStream.java:152) java.net.SocketInputStream.read(SocketInputStream.java:122) java.io.BufferedInputStream.fill(BufferedInputStream.java:235) java.io.BufferedInputStream.read1(BufferedInputStream.java:275) java.io.BufferedInputStream.read(BufferedInputStream.java:334) java.io.DataInputStream.readFully(DataInputStream.java:195) java.io.DataInputStream.readFully(DataInputStream.java:169) org.apache.spark.api.python.PythonRunner$$anon$1.read(PythonRDD.scala:142) org.apache.spark.api.python.PythonRunner$$anon$1.next(PythonRDD.scala:129) org.apache.spark.api.python.PythonRunner$$anon$1.next(PythonRDD.scala:125) org.apache.spark.InterruptibleIterator.next(InterruptibleIterator.scala:43) scala.collection.Iterator$$anon$11.next(Iterator.scala:328) org.apache.spark.shuffle.sort.BypassMergeSortShuffleWriter.write(BypassMergeSortShuffleWriter.java:149) org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:73) org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:41) org.apache.spark.scheduler.Task.run(Task.scala:89) org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:213) java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) java.lang.Thread.run(Thread.java:724) pyspark\u5b9e\u9645\u662f\u521b\u5efa\u4e86python\u8fdb\u7a0b\u4e0ejava\u8fdb\u7a0b\u901a\u8fc7socket\u901a\u4fe1\u5b9e\u73b0\u7684\uff0cpyspark\u6267\u884c\u5728\u67b6\u6784\u4e0a\u5929\u751f\u5c31\u6709\u6548\u7387\u3001\u6027\u80fd\u5dee\u7684\u95ee\u9898\u3002\u5efa\u8bae\u6539\u4e3ascala\u5b9e\u73b0\u3002\u6709spark\u540c\u884c\u544a\u8bc9\u6211\uff0c\u53ef\u4ee5\u901a\u8fc7apache arrow\u6765\u4f18\u5316\uff0c\u4e0d\u8fc7\u76ee\u524d\u6682\u65f6\u6ca1\u6709\u8c03\u7814\u8fd9\u5757\u3002 4\u3001\u7528\u6237\u7a0b\u5e8f\u81ea\u8eab\u95ee\u9898 \u8fd9\u7c7b\u95ee\u9898\u662f\u7528\u6237\u4ee3\u7801\u672c\u8eab\u7684\u9519\u8bef\uff0c\u6bd4\u5982\u7a7a\u6307\u9488\u5f02\u5e38\uff0c\u6570\u7ec4\u8bbf\u95ee\u8d8a\u754c\u4ec0\u4e48\u7684\u3002 4-1\u3001\u6d4b\u8bd5\u4ee3\u7801 \u7528\u6237\u53cd\u9988\uff1a\u4f7f\u7528yarn-client\u6a21\u5f0f\u8fd0\u884c\u6210\u529f\uff0c\u4f46\u662f\u5207\u6362\u6210cluster\u6a21\u5f0f\u6267\u884c\u5931\u8d25\u3002\u7ecf\u8fc7\u6392\u67e5\uff0c\u53d1\u73b0\u7528\u6237\u7684\u4ee3\u7801\u4e2d\u7684\u6d4b\u8bd5\u4ee3\u7801\u6ca1\u6709\u6539\u6210\u6b63\u5f0f\u7684\u3002\u7528\u6237\u7684\u90e8\u5206\u4ee3\u7801\u5982\u4e0b\uff1a def main(args: Array[String]): Unit={ val spark = SparkSession.builder().master( local ) .appName( test**** ).getOrCreate() // \u7701\u7565\u5176\u4f59\u4ee3\u7801\u903b\u8f91 spark.stop() } 4-2\u3001SparkSession\u3001SparkContext\u7b49\u6838\u5fc3\u7c7b\uff0c\u4e0d\u8981\u5199\u5728main\u51fd\u6570\u5916 \u7528\u6237\u7684\u4f5c\u4e1a\u63d0\u4ea4\u6267\u884c\u4e0d\u6210\u529f\uff0c\u7ecf\u8fc7\u6392\u67e5\u53d1\u73b0\u4ee3\u7801\u4f7f\u7528\u65b9\u5f0f\u4e0d\u5bf9\u3002 val sparkConf = new SparkConf().setAppName( xxxxxx ) .set( spark.driver.maxResultSize , 3g ) .setMaster( yarn-client ) val sc = new SparkContext(sparkConf) def main (args: Array[String]): Unit = { val checklist = sc.textFile( hdfs://xxxxxx:9000/home/xxxxx/xxxxx/*/*.txt ) .filter(x= x.split( , ).length==9).map(x= x.toString.replace( , )) \u4e8c\u3001Spark2.3\u7279\u6709\u6545\u969c \u8bf7\u9605\u8bfb Spark2.3\u7279\u6709\u6545\u969c \u3002 \u4e09\u3001Spark1.6\u7279\u6709\u6545\u969c \u8bf7\u9605\u8bfb Spark1.6\u7279\u6709\u6545\u969c \u3002","title":"Common Troubleshooting"},{"location":"troubleshooting/common/#spark","text":"\u76ee\u524d\u7cfb\u7edf\u90e8\u8fd0\u7ef4\u7684Spark\u4e3b\u8981\u6709Spark2.3\u548cSpark1.6\u4e24\u4e2a\u7248\u672c\u3002\u7528\u6237\u5728\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\u96be\u514d\u4f1a\u53d1\u751f\u5404\u79cd\u5404\u6837\u7684\u95ee\u9898\uff0c\u4e3a\u4e86\u63d0\u9ad8\u6545\u969c\u8bca\u65ad\u7684\u6548\u7387\uff0c\u4e5f\u4e3a\u4e86\u5bf9\u7ecf\u9a8c\u8fdb\u884c\u6c89\u6dc0\uff0c\u8fd9\u91cc\u5c06\u5bf9\u5404\u7c7b\u95ee\u9898\u5982\u4f55\u5904\u7406\u8fdb\u884c\u4ecb\u7ecd\u3002 \u672c\u6587\u5c06Spark\u6545\u969c\u5206\u4e3a\u901a\u7528\u6545\u969c\u3001Spark2.3\u7279\u6709\u6545\u969c\u3001Spark1.6\u7279\u6709\u6545\u969c\u3002","title":"Spark\u6545\u969c\u8bca\u65ad"},{"location":"troubleshooting/common/#_1","text":"","title":"\u4e00\u3001\u901a\u7528\u6545\u969c"},{"location":"troubleshooting/common/#1","text":"","title":"1\u3001\u96c6\u7fa4\u73af\u5883\u7c7b"},{"location":"troubleshooting/common/#2spark","text":"","title":"2\u3001spark\u5e94\u7528\u7c7b"},{"location":"troubleshooting/common/#3pyspark","text":"","title":"3\u3001PySpark\u76f8\u5173"},{"location":"troubleshooting/common/#4","text":"\u8fd9\u7c7b\u95ee\u9898\u662f\u7528\u6237\u4ee3\u7801\u672c\u8eab\u7684\u9519\u8bef\uff0c\u6bd4\u5982\u7a7a\u6307\u9488\u5f02\u5e38\uff0c\u6570\u7ec4\u8bbf\u95ee\u8d8a\u754c\u4ec0\u4e48\u7684\u3002","title":"4\u3001\u7528\u6237\u7a0b\u5e8f\u81ea\u8eab\u95ee\u9898"},{"location":"troubleshooting/common/#spark23","text":"\u8bf7\u9605\u8bfb Spark2.3\u7279\u6709\u6545\u969c \u3002","title":"\u4e8c\u3001Spark2.3\u7279\u6709\u6545\u969c"},{"location":"troubleshooting/common/#spark16","text":"\u8bf7\u9605\u8bfb Spark1.6\u7279\u6709\u6545\u969c \u3002","title":"\u4e09\u3001Spark1.6\u7279\u6709\u6545\u969c"},{"location":"troubleshooting/spark1.6-troubleshooting/","text":"Spark1.6\u7279\u6709\u6545\u969c \u4e00\u3001\u96c6\u7fa4\u73af\u5883\u7c7b 1\u3001ExecutorLostFailure 1-1\u3001Diagnostics: Container released on a lost node \u200b \u7528\u6237\u63d0\u4ea4\u7684\u4efb\u52a1\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u90e8\u5206executor\u51fa\u73b0\u4ee5\u4e0b\u5f02\u5e38\uff1a ExecutorLostFailure (executor 268 exited caused by one of the running tasks) Reason: Container marked as failed: container_e46_1545125871120_21448_01_000282 on host: 10.160.140.153. Exit status: -100. Diagnostics: Container released on a *lost* node \u5b9e\u9645\u662fNodeManager\u91cd\u542f\u6240\u81f4\u3002 1-2\u3001Killed by external signal \u200b \u7528\u6237\u63d0\u4ea4\u7684\u4efb\u52a1\uff0cexecutor\u8bbe\u7f6e\u4e86\u8f83\u5927\u7684\u5185\u5b58\u540e\uff0c\u90e8\u5206executor\u51fa\u73b0\u4ee5\u4e0b\u5f02\u5e38\uff1a ExecutorLostFailure (executor 335 exited caused by one of the running tasks) Reason: Container marked as failed: container_e124_1543893582405_1626578_01_000394 on host: 10.203.21.109. Exit status: 143. Diagnostics: Container killed on request. Exit code is 143. More Information Container exited with a non-zero exit code 143 Killed by external signal \u521d\u6b65\u5224\u65adexecutor\u662f\u56e0\u4e3a\u5185\u5b58\u8d85\u9650\uff0c\u88abNodeManager\u6740\u6389\u3002\u4f46\u662f\u5177\u4f53\u539f\u56e0\u9700\u8981\u8fdb\u4e00\u6b65\u8bca\u65ad\u3002 \u7ecf\u8fc7\u8bca\u65ad\uff0c\u53d1\u73b0\u5982\u4e0b\u4fe1\u606f\uff1a Summary Metrics for 409 Completed Tasks Metric Min 25th percentile Median 75th percentile Max Duration 62 ms 0.6 s 0.7 s 1 s 33 s Scheduler Delay 26 ms 0.1 s 0.1 s 0.1 s 0.9 s Task Deserialization Time 26 ms 2 s 2 s 2 s 6 s GC Time 0 ms 53 ms 66 ms 87 ms 4 s Result Serialization Time 0 ms 1 ms 2 ms 2 ms 30 ms Getting Result Time 0 ms 0 ms 0 ms 0 ms 0 ms Peak Execution Memory 0.0 B 64.0 KB 64.0 KB 64.1 MB 1024.0 MB Shuffle Read Blocked Time 0 ms 0 ms 0 ms 0 ms 16 s Shuffle Read Size / Records 126.0 B / 0 126.0 B / 0 126.0 B / 0 1679.0 B / 11 74.2 MB / 3936473 Shuffle Remote Reads 105.0 B 126.0 B 126.0 B 1378.0 B 74.2 MB Shuffle Write Size / Records 0.0 B / 0 0.0 B / 0 0.0 B / 0 564.0 B / 11 5.1 KB / 150 \u53ef\u4ee5\u770b\u51fa\u6709\u660e\u663e\u7684\u6570\u636e\u503e\u659c\uff0c\u7528\u6237\u4e5f\u8bb8\u89c9\u5f9774.2 MB\u7684\u6570\u636e\u503e\u659c\u4e5f\u4e0d\u5e94\u8be5\u51fa\u73b0\u5185\u5b58\u95ee\u9898\u800c\u88abkill\u3002\u5b9e\u9645\u4e0a\u88abkill\u6389\u7684executor\u7684shuffle\u7edf\u8ba1\u6570\u636e\u65e0\u6cd5\u51c6\u786e\u4f20\u9012\u5230driver UI\u3002 2\u3001HDFS\u73af\u5883\u76f8\u5173 2-1\u3001DSQuotaExceededException: The DiskSpace quota of /home/logsget is exceeded \u200b \u7528\u6237\u63d0\u4ea4\u7684\u4efb\u52a1\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u90e8\u5206executor\u51fa\u73b0\u4ee5\u4e0b\u5f02\u5e38\uff1a org.apache.hadoop.hdfs.protocol.DSQuotaExceededException: org.apache.hadoop.hdfs.protocol.DSQuotaExceededException: The DiskSpace quota of /home/logsget is exceeded: quota=4178144185548800 diskspace consumed=3891200.7g at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) at java.lang.reflect.Constructor.newInstance(Constructor.java:526) at org.apache.hadoop.ipc.RemoteException.instantiateException(RemoteException.java:96) at org.apache.hadoop.ipc.RemoteException.unwrapRemoteException(RemoteException.java:58) at org.apache.hadoop.hdfs.DFSClient$DFSOutputStream.locateFollowingBlock(DFSClient.java:6111) at org.apache.hadoop.hdfs.DFSClient$DFSOutputStream.nextBlockOutputStream(DFSClient.java:5817) at org.apache.hadoop.hdfs.DFSClient$DFSOutputStream.access$3400(DFSClient.java:4660) at org.apache.hadoop.hdfs.DFSClient$DFSOutputStream$DataStreamer.run(DFSClient.java:5023) Caused by: org.apache.hadoop.ipc.RemoteException: org.apache.hadoop.hdfs.protocol.DSQuotaExceededException: The DiskSpace quota of /home/logsget is exceeded: quota=4178144185548800 diskspace consumed=3891200.7g at org.apache.hadoop.hdfs.server.namenode.INodeDirectoryWithQuota.verifyQuota(INodeDirectoryWithQuota.java:159) at org.apache.hadoop.hdfs.server.namenode.FSDirectory.verifyQuota(FSDirectory.java:1748) at org.apache.hadoop.hdfs.server.namenode.FSDirectory.updateCount(FSDirectory.java:1506) at org.apache.hadoop.hdfs.server.namenode.FSDirectory.addBlock(FSDirectory.java:499) at org.apache.hadoop.hdfs.server.namenode.FSNamesystem.allocateBlock(FSNamesystem.java:3404) at org.apache.hadoop.hdfs.server.namenode.FSNamesystem.getAdditionalBlock(FSNamesystem.java:2768) at org.apache.hadoop.hdfs.server.namenode.NameNode.addBlockWithBlockType(NameNode.java:963) at org.apache.hadoop.hdfs.server.namenode.NameNode.addBlockAndFetchMetaInfoAndBlockType(NameNode.java:919) at sun.reflect.GeneratedMethodAccessor28.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:743) at org.apache.hadoop.ipc.Server$Handler$1.run(Server.java:1189) at org.apache.hadoop.ipc.Server$Handler$1.run(Server.java:1185) at java.security.AccessController.doPrivileged(Native Method) at javax.security.auth.Subject.doAs(Subject.java:415) at org.apache.hadoop.ipc.Server$Handler.run(Server.java:1183) at org.apache.hadoop.ipc.Client.call(Client.java:863) at org.apache.hadoop.ipc.RPC$Invoker.invoke(RPC.java:227) at com.sun.proxy.$Proxy18.addBlockAndFetchMetaInfoAndBlockType(Unknown Source) at sun.reflect.GeneratedMethodAccessor77.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at org.apache.hadoop.io.retry.RetryInvocationHandler.invokeMethod(RetryInvocationHandler.java:82) at org.apache.hadoop.io.retry.RetryInvocationHandler.invoke(RetryInvocationHandler.java:59) at com.sun.proxy.$Proxy18.addBlockAndFetchMetaInfoAndBlockType(Unknown Source) at org.apache.hadoop.hdfs.DFSClient$DFSOutputStream.locateFollowingBlock(DFSClient.java:6051) ... 3 more \u5b9e\u9645\u662f\u5206\u914d\u7ed9\u7528\u6237\u7684hdfs\u7684quato\u6ee1\u4e86\uff0c\u9700\u8981\u767b\u5f55\u4e91\u56fe\u7533\u8bf7\u52a0\u8d44\u6e90\uff0c\u5177\u4f53\u627e\u4f55\u4efb\u5929\u5ba1\u6279\u3002 \u4e8c\u3001spark-submit\u4f7f\u7528 1\u3001java.lang.ExceptionInInitializerError 1-1\u3001MountRootFileSystem can not mkdir \u200b \u7528\u6237\u63d0\u4ea4Scala\u5e94\u7528\u7a0b\u5e8f\uff0c\u6210\u529f\u63d0\u4ea4application\uff0c\u83b7\u5f97application_1544090606001_349694\u3002\u5728\u83b7\u5f97executor\u8d44\u6e90\u540e\u5f00\u59cb\u8fd0\u884c\uff0c\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u4ee5\u4e0b\u9519\u8bef\uff1a java.lang.ExceptionInInitializerError at net.qihoo.scanns.Test$$anonfun$transform$1.apply(Test.scala:85) at net.qihoo.scanns.Test$$anonfun$transform$1.apply(Test.scala:85) at org.apache.spark.rdd.PairRDDFunctions$$anonfun$mapValues$1$$anonfun$apply$41$$anonfun$apply$42.apply(PairRDDFunctions.scala:755) at org.apache.spark.rdd.PairRDDFunctions$$anonfun$mapValues$1$$anonfun$apply$41$$anonfun$apply$42.apply(PairRDDFunctions.scala:755) at scala.collection.Iterator$$anon$11.next(Iterator.scala:328) at scala.collection.Iterator$$anon$13.hasNext(Iterator.scala:371) at org.apache.spark.shuffle.sort.UnsafeShuffleWriter.write(UnsafeShuffleWriter.java:163) at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:73) at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:41) at org.apache.spark.scheduler.Task.run(Task.scala:89) at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:213) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:724) Caused by: java.io.IOException: MountRootFileSystem can not mkdir /user/hdp-guanggao/.sparkStaging/application_1544090606001_349710 at org.apache.hadoop.fs.viewfs.MountTree$MountRootFileSystem.mkdirs(MountTree.java:372) at org.apache.hadoop.fs.viewfs.ViewFs.mkdirs(ViewFs.java:365) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at net.qihoo.spinner.HYReflection.invoke(HYReflection.java:130) at net.qihoo.spinner.SpinnerDistributedFileSystem.mkdirs(SpinnerDistributedFileSystem.java:466) at org.apache.hadoop.fs.FileSystem.mkdirs(FileSystem.java:1900) at org.apache.hadoop.fs.FileSystem.mkdirs(FileSystem.java:617) at org.apache.spark.deploy.yarn.Client.prepareLocalResources(Client.scala:366) at org.apache.spark.deploy.yarn.Client.createContainerLaunchContext(Client.scala:732) at org.apache.spark.deploy.yarn.Client.submitApplication(Client.scala:142) at org.apache.spark.scheduler.cluster.YarnClientSchedulerBackend.start(YarnClientSchedulerBackend.scala:57) at org.apache.spark.scheduler.TaskSchedulerImpl.start(TaskSchedulerImpl.scala:144) at org.apache.spark.SparkContext. init (SparkContext.scala:542) at net.qihoo.scanns.Test$. init (Test.scala:18) at net.qihoo.scanns.Test$. clinit (Test.scala) ... 14 more \u5728\u65e5\u5fd7\u4e2d\uff0c\u6211\u4eec\u770b\u5230\uff1a Caused by: java.io.IOException: MountRootFileSystem can not mkdir /user/hdp-guanggao/.sparkStaging/application_1544090606001_349710 \u600e\u4e48\u4f1a\u83b7\u5f97application_1544090606001_349694\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd8\u4f1a\u6709application_1544090606001_349710\u3002\u4ed4\u7ec6\u67e5\u770b\u5176\u4ed6executor\u7684\u8f93\u51fa\uff0c\u53d1\u73b0\u8fd8\u6709\u5f88\u591a\u5176\u4ed6\u7684application id\u751f\u6210\u3002\u770b\u6765\u662f\u6bcf\u4e2aExecutor\u91cc\u9762\u90fd\u628aTest\u6267\u884c\u4e86\u4e00\u904d\u3002\u636e\u6b64\u6000\u7591\uff0c\u7528\u6237\u7684spark\u4ee3\u7801\u4f7f\u7528\u4e0a\u6709\u95ee\u9898\u3002 \u200b \u67e5\u770b\u7528\u6237\u7684\u4ee3\u7801\uff0c\u5982\u4e0b\uff1a object Test { private val sparkConfig = new SparkConf().setMaster( yarn-client ).setAppName( scanns ) private val sparkContext = new SparkContext(sparkConfig) ... def main(args: Array[String]): Unit = { val queryRaw = sparkContext.textFile(keyInput) ... } SparkContext\u5982\u679c\u5728main\u51fd\u6570\u5916\u521b\u5efa\uff0c\u5c06\u4f1a\u5728\u5404\u4e2aexecutor\u4e0a\u6267\u884c\u3002\u6539\u4e3amain\u51fd\u6570\u4e2d\u521b\u5efa\u540e\uff0c\u89e3\u51b3\u3002 1-2\u3001java.io.FileNotFoundException \u200b \u7528\u6237\u6267\u884c\u53d1\u751f\u9519\u8bef\uff1a java.lang.ExceptionInInitializerError Caused by: java.io.FileNotFoundException: File does not exist: /home/spark/spark_eventLog \u7528\u6237\u7684\u79c1\u6709\u96c6\u7fa4\u4e0d\u5b58\u5728\u6b64\u76ee\u5f55\uff0c\u4e14\u7528\u6237\u8d26\u53f7\u6ca1\u6709\u6743\u9650\uff0c\u5efa\u8bae\u8054\u7cfbhdfs\u540c\u5b66\u770b\u3002 1-3\u3001\u6ca1\u6709\u5b89\u88c5java8 \u7528\u6237\u63d0\u4ea4\u7684\u4f5c\u4e1a\u5728\u672a\u8fd0\u884ctask\u4e4b\u524d\uff0cAM\u5df2\u7ecf\u9000\u51fa\uff0c\u5bfc\u81f4\u4f5c\u4e1a\u5931\u8d25\u3002 Container exited with a non-zero exit code 127 Failing this attempt. Failing the application. ApplicationMaster host: N/A ApplicationMaster RPC port: -1 queue: root.default start time: 1546850986115 final status: FAILED tracking URL: http://xxxxxxxx:8888/cluster/app/application_1493705730010_45634 user: hdp-360sec Moved to trash: /home/spark/cache/.sparkStaging/application_1493705730010_45634 19/01/07 16:48:07 INFO Client: Deleted staging directory hdfs://xxxxxxx:9000/home/spark/cache/.sparkStaging/application_1493705730010_45634 19/01/07 16:48:07 ERROR SparkContext: Error initializing SparkContext. org.apache.spark.SparkException: Yarn application has already ended! It might have been killed or unable to launch application master. at org.apache.spark.scheduler.cluster.YarnClientSchedulerBackend.waitForApplication(YarnClientSchedulerBackend.scala:89) at org.apache.spark.scheduler.cluster.YarnClientSchedulerBackend.start(YarnClientSchedulerBackend.scala:63) at org.apache.spark.scheduler.TaskSchedulerImpl.start(TaskSchedulerImpl.scala:164) at org.apache.spark.SparkContext. init (SparkContext.scala:502) ... at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:497) at org.apache.spark.deploy.JavaMainApplication.start(SparkApplication.scala:52) at org.apache.spark.deploy.SparkSubmit$.org$apache$spark$deploy$SparkSubmit$$runMain(SparkSubmit.scala:879) at org.apache.spark.deploy.SparkSubmit$.doRunMain$1(SparkSubmit.scala:197) at org.apache.spark.deploy.SparkSubmit$.submit(SparkSubmit.scala:227) at org.apache.spark.deploy.SparkSubmit$.main(SparkSubmit.scala:136) at org.apache.spark.deploy.SparkSubmit.main(SparkSubmit.scala) Exception in thread main java.lang.ExceptionInInitializerError ... at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:497) at org.apache.spark.deploy.JavaMainApplication.start(SparkApplication.scala:52) at org.apache.spark.deploy.SparkSubmit$.org$apache$spark$deploy$SparkSubmit$$runMain(SparkSubmit.scala:879) at org.apache.spark.deploy.SparkSubmit$.doRunMain$1(SparkSubmit.scala:197) at org.apache.spark.deploy.SparkSubmit$.submit(SparkSubmit.scala:227) at org.apache.spark.deploy.SparkSubmit$.main(SparkSubmit.scala:136) at org.apache.spark.deploy.SparkSubmit.main(SparkSubmit.scala) Caused by: org.apache.spark.SparkException: Yarn application has already ended! It might have been killed or unable to launch application master. at org.apache.spark.scheduler.cluster.YarnClientSchedulerBackend.waitForApplication(YarnClientSchedulerBackend.scala:89) at org.apache.spark.scheduler.cluster.YarnClientSchedulerBackend.start(YarnClientSchedulerBackend.scala:63) at org.apache.spark.scheduler.TaskSchedulerImpl.start(TaskSchedulerImpl.scala:164) at org.apache.spark.SparkContext. init (SparkContext.scala:502) ... 11 more \u67e5\u770btracking URL\uff0c\u53d1\u73b0\u5982\u4e0b\u4fe1\u606f\uff1a /bin/bash: /home/xxx/xxxxx/java8/bin/java: ucirc; #65533; #65533; #65533; #504; #65533; #65533; #316; #65533; #65533; #65533; #319; frac14; \u548c\u660e\u663e\u662f\u96c6\u7fa4\u7684\u4e00\u4e9b\u673a\u5668\u6f0f\u88c5java8\u4e86 1-4\u3001SparkSession\u3001SparkContext\u7b49\u6838\u5fc3\u7c7b\uff0c\u4e0d\u8981\u5199\u5728main\u51fd\u6570\u5916 \u7528\u6237\u4f5c\u4e1a\u51fa\u73b0\u5982\u4e0b\u9519\u8bef\uff1a java.lang.ExceptionInInitializerError at A$$anonfun$transform1.apply(A.scala:62) at A.apply(A.scala:62)atAanonfunanonfuntransform1.apply(A.scala:62) at org.apache.spark.rdd.PairRDDFunctions1.apply(A.scala:62)atorg.apache.spark.rdd.PairRDDFunctionsanonfunanonfunmapValues11anonfunanonfunapply4141anonfunanonfunapply42.apply(PairRDDFunctions.scala:755) at org.apache.spark.rdd.PairRDDFunctions42.apply(PairRDDFunctions.scala:755)atorg.apache.spark.rdd.PairRDDFunctionsanonfunanonfunmapValues11anonfunanonfunapply4141anonfunanonfunapply42.apply(PairRDDFunctions.scala:755) at scala.collection.Iterator42.apply(PairRDDFunctions.scala:755)atscala.collection.Iterator$anon11.next(Iterator.scala:328) at scala.collection.Iterator11.next(Iterator.scala:328)atscala.collection.Iterator$anon13.hasNext(Iterator.scala:371) at org.apache.spark.shuffle.sort.UnsafeShuffleWriter.write(UnsafeShuffleWriter.java:163) at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:73) at org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:41) at org.apache.spark.scheduler.Task.run(Task.scala:89) at org.apache.spark.executor.Executor13.hasNext(Iterator.scala:371)atorg.apache.spark.shuffle.sort.UnsafeShuffleWriter.write(UnsafeShuffleWriter.java:163)atorg.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:73)atorg.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:41)atorg.apache.spark.scheduler.Task.run(Task.scala:89)atorg.apache.spark.executor.ExecutorTaskRunner.run(Executor.scala:213) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutorWorker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:724) Caused by: java.io.IOException: MountRootFileSystem can not mkdir /user/xxxxx/.sparkStaging/application_1544090606001_349710 at org.apache.hadoop.fs.viewfs.MountTreeWorker.run(ThreadPoolExecutor.java:615)atjava.lang.Thread.run(Thread.java:724)Causedby:java.io.IOException:MountRootFileSystemcannotmkdir/user/xxxxxxx/.sparkStaging/application1544090606001349710atorg.apache.hadoop.fs.viewfs.MountTreeMountRootFileSystem.mkdirs(MountTree.java:372) at org.apache.hadoop.fs.viewfs.ViewFs.mkdirs(ViewFs.java:365) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at net.qihoo.spinner.HYReflection.invoke(HYReflection.java:130) at net.qihoo.spinner.SpinnerDistributedFileSystem.mkdirs(SpinnerDistributedFileSystem.java:466) at org.apache.hadoop.fs.FileSystem.mkdirs(FileSystem.java:1900) at org.apache.hadoop.fs.FileSystem.mkdirs(FileSystem.java:617) at org.apache.spark.deploy.yarn.Client.prepareLocalResources(Client.scala:366) at org.apache.spark.deploy.yarn.Client.createContainerLaunchContext(Client.scala:732) at org.apache.spark.deploy.yarn.Client.submitApplication(Client.scala:142) at org.apache.spark.scheduler.cluster.YarnClientSchedulerBackend.start(YarnClientSchedulerBackend.scala:57) at org.apache.spark.scheduler.TaskSchedulerImpl.start(TaskSchedulerImpl.scala:144) at org.apache.spark.SparkContext.(SparkContext.scala:542) at A. init (sgktoHbase.scala:62) at A. init (sgktoHbase.scala:62)atA.(A.scala) \u2026 14 more \u7ecf\u8fc7\u6392\u67e5\u53d1\u73b0\u4ee3\u7801\u4f7f\u7528\u65b9\u5f0f\u4e0d\u5bf9\u3002 val sparkConf = new SparkConf().setAppName( xxxxxx ) .set( spark.driver.maxResultSize , 3g ) .setMaster( yarn-client ) val sc = new SparkContext(sparkConf) def main (args: Array[String]): Unit = { val checklist = sc.textFile( hdfs://xxxxxx:9000/home/xxxxx/xxxxx/*/*.txt ) .filter(x= x.split( , ).length==9).map(x= x.toString.replace( , )) 2\u3001java.lang.NullPointerException \u200b \u7528\u6237\u4ee3\u7801\u51fa\u73b0\u6b64\u5f02\u5e38\uff0c\u9700\u8981\u6839\u636e\u7ebf\u7a0b\u6808\u4fe1\u606f\uff0c\u81ea\u5df1\u4fee\u6539\u3002 3\u3001org.apache.spark.sql.AnalysisException: Table not found \u200b \u7528\u6237\u4f7f\u7528spark-submit\u63d0\u4ea4\u4f5c\u4e1a\uff0c\u51fa\u73b0\u6b64\u9519\u8bef\uff0c\u76ee\u524d\u6709\u4e09\u79cd\u53ef\u80fd\uff1a \u8868\u4e0d\u5b58\u5728 \u8fd9\u79cd\u60c5\u51b5\u6700\u4e3a\u5e38\u89c1\u3002\u4e00\u822c\u662f\u7528\u6237\u5199\u9519\u7684\u8868\u540d\u6216\u8005\u6ca1\u6709\u8fd9\u4e2a\u8868\u3002 Hive\u5143\u6570\u636e\u670d\u52a1\u4e0d\u6b63\u5e38 \u4e4b\u524d\u78b0\u5230\u8fc7Hive\u5143\u6570\u636e\u670d\u52a1\u5185\u5b58\u4e0d\u8db3\u3001\u9891\u7e41GC\u5bfc\u81f4\u670d\u52a1\u4e0d\u54cd\u5e94\u7684\u95ee\u9898\u3002 \u6ca1\u6709\u5207\u6362\u5230\u76f8\u5e94\u7684DB \u8fd9\u79cd\u60c5\u51b5\u7684\u51fa\u73b0\u5b8c\u5168\u662f\u7528\u6237\u4f7f\u7528\u4e60\u60ef\u5bfc\u81f4\u3002\u4f7f\u7528\u8fc7hive\u3001spark-hive\u7684\u7528\u6237\u6709\u8fd9\u6837\u4e00\u4e2a\u7ecf\u9a8c\uff1a\u8fdb\u5165\u547d\u4ee4\u884c\u540e\u5df2\u7ecf\u5728\u81ea\u5df1\u5f53\u524d\u8d26\u53f7\u7684\u6570\u636e\u5e93\u4e2d\u4e86\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u5207\u6362DB\u3002spark\u672c\u8eab\u4e0d\u5177\u5907\u8fd9\u4e2a\u529f\u80fd\uff0c\u662f\u7cfb\u7edf\u90e8\u5728spark-hive\u4e0a\u5b9a\u5236\u589e\u52a0\u7684\u4e00\u9879\u529f\u80fd\u3002\u6240\u4ee5\u5f53\u4f60\u4f7f\u7528\u5176\u4ed6spark\u547d\u4ee4\uff0c\u5982spark-shell\u3001spark-sql\u3001spark-submit\u65f6\u8981\u683c\u5916\u6ce8\u610f\u8fd9\u4e2a\u60c5\u51b5\u3002","title":"Spark1.6 Troubleshooting"},{"location":"troubleshooting/spark1.6-troubleshooting/#spark16","text":"","title":"Spark1.6\u7279\u6709\u6545\u969c"},{"location":"troubleshooting/spark1.6-troubleshooting/#_1","text":"","title":"\u4e00\u3001\u96c6\u7fa4\u73af\u5883\u7c7b"},{"location":"troubleshooting/spark1.6-troubleshooting/#spark-submit","text":"","title":"\u4e8c\u3001spark-submit\u4f7f\u7528"},{"location":"troubleshooting/spark2.3-troubleshooting/","text":"Spark2.3\u7279\u6709\u6545\u969c \u4e00\u3001\u96c6\u7fa4\u73af\u5883\u7c7b 1\u3001... 2\u3001... \u4e8c\u3001spark2.3\u7279\u6709\u95ee\u9898\u603b\u7ed3 1\u3001org.apache.spark.sql.AnalysisException: Table or view not found \u6709\u4e9b\u7528\u6237\u5728\u4f7f\u7528hive\u3001spark-hive\u6216\u8005spark-shell\u7684\u65f6\u5019\u80fd\u591f\u6b63\u786e\u64cd\u4f5cHive\u8868\uff0c\u4f46\u662f\u6539\u4e3a\u4f7f\u7528Spark API\uff0c\u5e76\u7528spark-submit\u63d0\u4ea4\u65f6\uff0c\u4f1a\u51fa\u73b0\u6b64\u95ee\u9898\u3002 \u8fd9\u91cc\u7ed9\u4e00\u4e2a\u4f8b\u5b50\uff1a def main(args: Array[String]): Unit = { val sparkConf = new SparkConf() val sc: SparkContext = new SparkContext(sparkConf) val sparkSession: SparkSession = SparkSession.builder().enableHiveSupport().getOrCreate() //\u7701\u7565\u5176\u4f59\u4ee3\u7801 \u63d0\u4ea4\u4efb\u52a1\u540e\uff0c\u51fa\u73b0\uff1a org.apache.spark.sql.AnalysisException: Table or view not found: `dbA`.`tableA`; line 1 pos 14; \u5f62\u5f0f\u7684\u9519\u8bef\u3002 \u8fd9\u79cd\u4f7f\u7528\u65b9\u6cd5\u662f\u6709\u95ee\u9898\u7684\uff0cSpark2.x.x\u63d0\u4f9b\u4e86\u4e00\u4e2a\u65b0\u7684API\u2014\u2014SparkSession\uff0c\u5c31\u662f\u60f3\u5c01\u88c5\u5e76\u66ff\u6362\u8001\u7248\u672c\u4e2d\u7684SparkContext\u3001SqlContext\u3001HiveContext\u7b49API\u3002\u5e94\u8be5\u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f\uff1a def main(args: Array[String]): Unit = { val sparkSession: SparkSession = SparkSession.builder().enableHiveSupport().getOrCreate() //\u7701\u7565\u5176\u4f59\u4ee3\u7801","title":"Spark2.3 Troubleshooting"},{"location":"troubleshooting/spark2.3-troubleshooting/#spark23","text":"","title":"Spark2.3\u7279\u6709\u6545\u969c"},{"location":"troubleshooting/spark2.3-troubleshooting/#_1","text":"","title":"\u4e00\u3001\u96c6\u7fa4\u73af\u5883\u7c7b"},{"location":"troubleshooting/spark2.3-troubleshooting/#spark23_1","text":"","title":"\u4e8c\u3001spark2.3\u7279\u6709\u95ee\u9898\u603b\u7ed3"},{"location":"tutorial/api/","text":"\u200b XSQL\u4f5c\u4e3a\u7edf\u4e00\u7684\u67e5\u8be2\u5e73\u53f0\uff0c\u5fc5\u7136\u9700\u8981\u63d0\u4f9b\u4e30\u5bcc\u7684\u63a5\u53e3\u5f62\u5f0f\u3002XSQL\u76ee\u524d\u652f\u6301CLI\u3001Scala\u3001Java\u3001Thrift\u3001HTTP REST\u3001JDBC\u7b49\u516d\u79cd\u7c7b\u578b\u7684API\uff0c\u672c\u6587\u5c06\u9010\u4e00\u8fdb\u884c\u4ecb\u7ecd\u3002 CLI \u200b \u547d\u4ee4\u884c\u63a5\u5165XSQL\uff0c\u53ef\u4ee5\u53c2\u8003 Running \u4e00\u8282\u7684\u5185\u5bb9\uff0c\u5728\u6b64\u4e0d\u518d\u8d58\u8ff0\u3002 Scala \u5728\u4f7f\u7528Scala API\u5f00\u53d1\u4e4b\u524d\uff0c\u8bf7\u5148\u4ecemaven\u4ed3\u5e93\u4e0b\u8f7dXSQL\u7684\u76f8\u5173jar\u5305\u3002\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\uff1a object XSQLScalaExample{ def main(args: Array[String]) { val spark = SparkSession .builder() .enableXSQLSupport() .appName( XSQL Scala Example ) .getOrCreate() spark.sql( SELECT * FROM src ).show() spark.stop() } } \u5c06XSQLScalaExample\u6253\u6210jar\u5305\u540e\uff0c\u4f7f\u7528${XSQL_HOME}/bin/spark-submit\u547d\u4ee4\u8fdb\u884c\u63d0\u4ea4\u5373\u53ef\u3002 Java \u5728\u4f7f\u7528Java API\u5f00\u53d1\u4e4b\u524d\uff0c\u8bf7\u5148\u4ecemaven\u4ed3\u5e93\u4e0b\u8f7dXSQL\u7684\u76f8\u5173jar\u5305\u3002\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\uff1a public class XSQLJavaExample { public static void main(String[] args) { SparkSession spark = SparkSession .builder() .appName( XSQL Java Example ) .enableXSQLSupport() .getOrCreate(); spark.sql( SELECT * FROM src ).show(); spark.stop(); } } \u5c06XSQLJavaExample\u6253\u6210jar\u5305\u540e\uff0c\u4f7f\u7528${XSQL_HOME}/bin/spark-submit\u547d\u4ee4\u8fdb\u884c\u63d0\u4ea4\u5373\u53ef\u3002 Thrift \u200b Hive\u548cSpark\u90fd\u63d0\u4f9b\u4e86\u5bf9Thrift\u534f\u8bae\u7684\u652f\u6301\uff0cXSQL\u4e5f\u4e0d\u4f8b\u5916\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u591a\u79cd\u8bed\u8a00\u6309\u7167Thrift\u534f\u8bae\u8fdb\u884c\u5f00\u53d1\u3002\u8fd9\u91cc\u4ec5\u7ed9\u51faJava\u8bed\u8a00\u7684\u3002 QueryTool.java public class QueryTool { public static TTransport getSocketInstance(String host, int port, String USER, String PASSWORD) throws TTransportException { TSocket tSocket = new TSocket(host, port); tSocket.setTimeout(100000); return tSocket; } public static TOpenSessionResp openSession(TCLIService.Client client) throws TException { TOpenSessionReq openSessionReq = new TOpenSessionReq(); return client.OpenSession(openSessionReq); } } QueryInstance.java public class QueryInstance { private static String host = 127.0.0.1 ; private static int port = 10000; private static String username = test ; private static String passsword = ; private static TTransport transport; private static TCLIService.Client client; private TOperationState tOperationState = null; private Map String, Object resultMap = new HashMap String, Object (); static { try { transport = QueryTool.getSocketInstance(host, port, username, passsword); client = new TCLIService.Client(new TBinaryProtocol(transport)); transport.open(); } catch (TTransportException e) { System.out.println( hive collection error! ); } } public TOperationHandle submitQuery(String command) throws Exception { TOperationHandle tOperationHandle; TExecuteStatementResp resp = null; TSessionHandle sessHandle = QueryTool.openSession(client) .getSessionHandle(); TExecuteStatementReq execReq = new TExecuteStatementReq(sessHandle, command); // \u5f02\u6b65\u8fd0\u884c execReq.setRunAsync(true); // \u6267\u884csql resp = client.ExecuteStatement(execReq);// \u6267\u884c\u8bed\u53e5 tOperationHandle = resp.getOperationHandle();// \u83b7\u53d6\u6267\u884c\u7684handle if (tOperationHandle == null) { // \u8bed\u53e5\u6267\u884c\u5f02\u5e38\u65f6\uff0c\u4f1a\u628a\u5f02\u5e38\u4fe1\u606f\u653e\u5728resp.getStatus()\u4e2d\u3002 throw new Exception(resp.getStatus().getErrorMessage()); } return tOperationHandle; } public String getQueryLog(TOperationHandle tOperationHandle) throws Exception { String log = ; return log; } public TOperationState getQueryHandleStatus(TOperationHandle tOperationHandle) throws Exception { if (tOperationHandle != null) { TGetOperationStatusReq statusReq = new TGetOperationStatusReq( tOperationHandle); TGetOperationStatusResp statusResp = client .GetOperationStatus(statusReq); tOperationState = statusResp.getOperationState(); } return tOperationState; } public List String getColumns(TOperationHandle tOperationHandle) throws Throwable { TGetResultSetMetadataResp metadataResp; TGetResultSetMetadataReq metadataReq; TTableSchema tableSchema; metadataReq = new TGetResultSetMetadataReq(tOperationHandle); metadataResp = client.GetResultSetMetadata(metadataReq); List TColumnDesc columnDescs; List String columns = null; tableSchema = metadataResp.getSchema(); if (tableSchema != null) { columnDescs = tableSchema.getColumns(); columns = new ArrayList String (); for (TColumnDesc tColumnDesc : columnDescs) { columns.add(tColumnDesc.getColumnName()); } } return columns; } /** * \u83b7\u53d6\u6267\u884c\u7ed3\u679c select\u8bed\u53e5 */ public List Object getResults(TOperationHandle tOperationHandle) throws Throwable { TFetchResultsReq fetchReq = new TFetchResultsReq(); fetchReq.setOperationHandle(tOperationHandle); fetchReq.setMaxRows(1000); TFetchResultsResp re = client.FetchResults(fetchReq); List TColumn list = re.getResults().getColumns(); List Object list_row = new ArrayList Object (); for (TColumn field : list) { if (field.isSetStringVal()) { list_row.add(field.getStringVal().getValues()); } else if (field.isSetDoubleVal()) { list_row.add(field.getDoubleVal().getValues()); } else if (field.isSetI16Val()) { list_row.add(field.getI16Val().getValues()); } else if (field.isSetI32Val()) { list_row.add(field.getI32Val().getValues()); } else if (field.isSetI64Val()) { list_row.add(field.getI64Val().getValues()); } else if (field.isSetBoolVal()) { list_row.add(field.getBoolVal().getValues()); } else if (field.isSetByteVal()) { list_row.add(field.getByteVal().getValues()); } } for (Object obj : list_row) { System.out.println(obj); } return list_row; } public void cancelQuery(TOperationHandle tOperationHandle) throws Throwable { if (tOperationState != TOperationState.FINISHED_STATE) { TCancelOperationReq cancelOperationReq = new TCancelOperationReq(); cancelOperationReq.setOperationHandle(tOperationHandle); client.CancelOperation(cancelOperationReq); } } } Test.java public class Test { public static void main(String[] args) { try { QueryInstance base = new QueryInstance(); String sql = SELECT * FROM src ; TOperationHandle handle = base.submitQuery(sql); TOperationState state = base.getQueryHandleStatus(handle); while(state.equals(TOperationState.RUNNING_STATE) || state.equals(TOperationState.INITIALIZED_STATE)) { TimeUnit.SECONDS.sleep(1); state = base.getQueryHandleStatus(handle); } if (state.equals(TOperationState.FINISHED_STATE)) { base.getResults(handle); } } catch (Throwable e) { e.printStackTrace(); } } } HTTP REST [\u672a\u5f00\u6e90] \u200b XSQL\u4f7f\u7528 Apache Livy \u5b9e\u73b0Restful\u670d\u52a1\uff0c\u8fd9\u91cc\u5185\u7f6e\u4e86 Livy REST API \uff0c\u8fd9\u91cc\u662f\u5e2e\u52a9\u60a8\u5feb\u901f\u5f00\u59cb\u7684 Livy\u63a5\u53e3\u4f7f\u7528Demo(JAVA\u3001PHP) \u3002XSQL\u5bf9Livy\u7684\u7ed3\u679c\u7f13\u5b58\u673a\u5236\u8fdb\u884c\u4e86\u4f18\u5316\uff0c\u4f18\u5316\u540e\u7684Livy\u67e5\u8be2\u72b6\u6001\u56fe\u5982\u4e0b\uff1a XSQL\u76ee\u524d\u53ea\u5f00\u6e90\u4e86\u5c06Livy\u9002\u914d\u5230XSQL\u7684\u5fc5\u8981\u4fee\u6539\uff0c\u8be6\u60c5\u89c1 GitHub\u94fe\u63a5 \uff0c\u4ee5\u4e0b\u5185\u5bb9\u4ec5\u9002\u7528\u4e8e\u5185\u90e8\u7528\u6237\u3002 \u8fd9\u91cc\u5217\u4e3e\u4e86\u4f7f\u7528XSQL Restful\u670d\u52a1\u4e4b\u524d\uff0c\u52a1\u5fc5\u77e5\u6653\u7684\u914d\u7f6e\u9879\uff1a Property Name Default Meaning livy.rsc.sql.interpreter.threadPool.size 1 \u6267\u884c\u7ebf\u7a0b\u6c60\u7684\u5927\u5c0f \uff0c\u5373\u6700\u591ax\u4e2a\u67e5\u8be2\u5904\u4e8eRunning\u72b6\u6001\uff08\u6240\u6709\u6267\u884c\u7ebf\u7a0b\u5171\u7528\u4e00\u4e2aSparkSession\uff0c\u5efa\u8bae\u914d\u7f6e\u4e3a5\uff09 livy.rsc.retained-statements 100 \u67e5\u8be2\u7ed3\u679c \u7f13\u51b2\u961f\u5217\u7684\u5927\u5c0f livy.rsc.result-discard.timeout 10m \u67e5\u8be2\u8fc7\u671f\u65f6\u95f4 \uff0c\u5f53\u7528\u6237\u83b7\u53d6\u67e5\u8be2\u7ed3\u679c\u4e4b\u540e\uff0c\u72b6\u6001\u7531Available\u53d8\u4e3aReaded\uff0c10\u5206\u949f\u540e\u81ea\u52a8\u53d8\u4e3aExpired\uff0c\u5f53\u7f13\u51b2\u961f\u5217\u7a7a\u95f4\u4e0d\u8db3\u65f6\uff0c\u53ef\u80fd\u88ab\u79fb\u51fa\u7f13\u51b2\u961f\u5217\u3002\uff08\u4e0d\u63a5\u53d7\u5c0f\u6570\uff0c\u65f6\u95f4\u5355\u4f4d=[us,ms,s,m,min,h,d]\uff09\uff080s\u8868\u793a\u9605\u540e\u5373\u711a\uff09 livy.rsc.result-retained.timeout 1h \u67e5\u8be2\u8fc7\u671f\u65f6\u95f4 \uff0c\u82e5\u7528\u6237\u5728\u67e5\u8be2\u7ed3\u679cAvailable\u76841\u4e2a\u5c0f\u65f6\u4e4b\u5185\uff0c\u4ecd\u672a\u83b7\u53d6\u67e5\u8be2\u7ed3\u679c\uff0c\u5219\u72b6\u6001\u81ea\u52a8\u53d8\u4e3aExpired\u3002 livy.rsc.server.session.timeout 0h Session\u8fc7\u671f\u65f6\u95f4 \uff0c\u82e5xx\u4e2a\u5c0f\u65f6\u4e4b\u5185\uff0cSparkSession\u672a\u6536\u5230\u4efb\u4f55\u67e5\u8be2\u8bf7\u6c42\uff0c\u5c06\u81ea\u52a8\u5173\u95ed\uff0c0h\u8868\u793a\u6c38\u4e0d\u8fc7\u671f\u3002 \u4e3a\u4e86\u5e2e\u52a9\u60a8\u5408\u7406\u5229\u7528\u96c6\u7fa4\u8d44\u6e90\uff0c\u6211\u4eec\u4e3a\u6bcf\u4e2aSession\u7ef4\u6301\u4e86SessionState\u3002 idle: \u5f53\u5df2\u63d0\u4ea4\u7684\u67e5\u8be2\u6570\u4e3a0\u65f6\uff0cSessionState\u4e3aidle\uff0c\u6b64\u65f6\u63d0\u4ea4\u7684\u67e5\u8be2\u53ef\u4ee5\u7acb\u5373\u83b7\u5f97\u6267\u884c\u7ebf\u7a0b\uff0c\u67e5\u8be2\u72b6\u6001\u8868\u73b0\u4e3aRunning\u3002 busy: \u5f53\u5df2\u63d0\u4ea4\u7684\u67e5\u8be2\u6570\u5927\u4e8e0\uff0c\u5c0f\u4e8elivy.rsc.sql.interpreter.threadPool.size\u65f6\uff0cSessionState\u4e3abusy\uff0c\u6b64\u65f6\u63d0\u4ea4\u67e5\u8be2\u53ef\u5373\u65f6\u8fdb\u884c\u8ba1\u7b97\uff0c\u4f46\u65e0\u6cd5\u83b7\u5f97SparkSession\u7684\u5168\u90e8\u8d44\u6e90\uff0c\u67e5\u8be2\u6548\u7387\u6709\u6240\u4e0b\u964d\uff0c\u67e5\u8be2\u72b6\u6001\u8868\u73b0\u4e3aRunning\u3002 queued: \u5f53\u5df2\u63d0\u4ea4\u7684\u67e5\u8be2\u6570\u5927\u4e8elivy.rsc.sql.interpreter.threadPool.size\uff0c\u5c0f\u4e8elivy.rsc.retained-statements\u65f6\uff0cSessionState\u4e3aQueued\uff0c\u6b64\u65f6\u63d0\u4ea4\u67e5\u8be2\u8fdb\u884cFIFO\u7b49\u5f85\uff0c\u67e5\u8be2\u72b6\u6001\u8868\u73b0\u4e3aWaiting\u3002 exhaust: \u5f53\u5df2\u63d0\u4ea4\u7684\u67e5\u8be2\u6570\u7b49\u4e8elivy.rsc.retained-statements\u65f6\uff0cSessionState\u4e3aexhaust\uff0c\u6b64\u65f6\u63d0\u4ea4\u7684\u67e5\u8be2\u5c06\u88ab\u62d2\u7edd\u670d\u52a1\uff0c\u67e5\u8be2\u72b6\u6001\u8868\u73b0\u4e3aRejected\u3002\u7528\u6237\u53ef\u4ee5\u9009\u62e9\u5916\u90e8\u7a0b\u5e8f\u8f6e\u8be2\u7b49\u5f85\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9\u7533\u8bf7\u521b\u5efa\u65b0\u7684Sesssion\u3002 \u63a8\u8350\u7684\u4f7f\u7528\u65b9\u5f0f\uff1a \u5efa\u8bae\u603b\u662f\u4fdd\u6301\u4e00\u4e2a\u6216\u591a\u4e2a\u957f\u9a7b\u7684Sesssion\uff0c\u5f53\u5e76\u53d1\u6570\u4e0d\u8db3\u65f6\uff0c\u5229\u7528livy.rsc.server.session.timeout\u521b\u5efa\u53ef\u81ea\u52a8\u9500\u6bc1\u7684Session\uff0c\u4ece\u800c\u6700\u5927\u7a0b\u5ea6\u7684\u5b9e\u73b0\u5373\u65f6\u67e5\u8be2\u540c\u65f6\u8282\u7701\u961f\u5217\u8d44\u6e90\u3002 \u6211\u4eec\u5728 http://client01v.qss.zzzc.qihoo.net:11224/#/ \u4e3a\u60a8\u63d0\u4f9b\u4e86Zeppelin\u9875\u9762\uff0c\u7528\u516c\u53f8\u57df\u8d26\u53f7\u767b\u5f55\u540e\uff0c\u521b\u5efaLivy\u7c7b\u578b\u7684note\uff0c\u5c31\u53ef\u4ee5\u8bd5\u7528XSQL\u7684\u5404\u79cd\u529f\u80fd\u4e86\u3002\u8be5\u9875\u9762\u7531XSQL\u56e2\u961f\u63d0\u4f9b\u7ed9XSQL\u7528\u6237\u5b66\u4e60\u4ee5\u53ca\u6d4b\u8bd5\u4f7f\u7528\uff0c\u5185\u7f6e\u7684xsql\u8bd5\u7528\u90e8\u7f72\u5305\u542b\u56db\u79cd\u6570\u636e\u6e90\uff1ahive\u3001es\u3001mysql\u3001redis\uff0c\u5747\u4e3a\u6d4b\u8bd5\u6570\u636e\u5e93\uff08\u53ea\u8bfb\u6743\u9650\uff09\u3002 \u5982\u679c\u60a8\u60f3\u8981\u8bbf\u95ee\u81ea\u5df1\u7684\u6570\u636e\u6e90\uff0c\u53ef\u4ee5\u52a0\u5165\u4e00\u4e2a\u4e91\u56fe\u9879\u76ee\uff0c\u7531\u9879\u76ee\u8d1f\u8d23\u4eba\u5411weiwenda@360.cn\u7533\u8bf7XSQL Restful\u670d\u52a1\uff0c\u7533\u8bf7\u6210\u529f\u540e\u5728note\u9875\u9762\u5c06\u51fa\u73b0 your_project\u9879\u76ee\u90e8\u7f72 \u7684\u53ef\u9009\u4e0b\u62c9\u3002 \u5177\u4f53\u7684\u64cd\u4f5c\u6d41\u7a0b\u5982\u89c6\u9891\u6240\u793a\uff1a Your browser does not support the video tag. JDBC \u200b Hive\u548cSpark\u90fd\u63d0\u4f9b\u4e86\u5bf9JDBC\u7684\u652f\u6301\uff0cXSQL\u4e5f\u4e0d\u4f8b\u5916\u3002\u8fd9\u91cc\u7ed9\u51faJava\u8bed\u8a00\u4f7f\u7528JDBC\u8fde\u63a5XSQL\u7684\u4f8b\u5b50\u3002 public class XSQLJdbcExample { private static String driverName = org.apache.hive.jdbc.HiveDriver ; public static void main(String[] args) throws SQLException { try { Class.forName(driverName); } catch (ClassNotFoundException e) { e.printStackTrace(); System.exit(1); } Connection con = null; Statement stmt = null; ResultSet res = null; try { con = DriverManager. getConnection( jdbc:hive2://127.0.0.1:10000/test;auth=noSasl , test , test ); stmt = con.createStatement(); String sql = SELECT * FROM src ; res = stmt.executeQuery(sql); while (res.next()) { System.out.println(res.getString( ip )); } } catch (Exception e) { e.printStackTrace(); } finally { if (res != null) { res.close(); } if (stmt != null) { stmt.close(); } if (con != null) { con.close(); } } } } \u7531\u4e8eXSQL\u7ee7\u627f\u4e86HIVE\u5b9e\u73b0JDBC\u7684\u8bbe\u8ba1\uff0c\u56e0\u6b64\u8fd9\u91cc\u7684JDBC Driver\u4f9d\u7136\u662forg.apache.hive.jdbc.HiveDriver\u3002","title":"API"},{"location":"tutorial/api/#cli","text":"\u200b \u547d\u4ee4\u884c\u63a5\u5165XSQL\uff0c\u53ef\u4ee5\u53c2\u8003 Running \u4e00\u8282\u7684\u5185\u5bb9\uff0c\u5728\u6b64\u4e0d\u518d\u8d58\u8ff0\u3002","title":"CLI"},{"location":"tutorial/api/#scala","text":"\u5728\u4f7f\u7528Scala API\u5f00\u53d1\u4e4b\u524d\uff0c\u8bf7\u5148\u4ecemaven\u4ed3\u5e93\u4e0b\u8f7dXSQL\u7684\u76f8\u5173jar\u5305\u3002\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\uff1a object XSQLScalaExample{ def main(args: Array[String]) { val spark = SparkSession .builder() .enableXSQLSupport() .appName( XSQL Scala Example ) .getOrCreate() spark.sql( SELECT * FROM src ).show() spark.stop() } } \u5c06XSQLScalaExample\u6253\u6210jar\u5305\u540e\uff0c\u4f7f\u7528${XSQL_HOME}/bin/spark-submit\u547d\u4ee4\u8fdb\u884c\u63d0\u4ea4\u5373\u53ef\u3002","title":"Scala"},{"location":"tutorial/api/#java","text":"\u5728\u4f7f\u7528Java API\u5f00\u53d1\u4e4b\u524d\uff0c\u8bf7\u5148\u4ecemaven\u4ed3\u5e93\u4e0b\u8f7dXSQL\u7684\u76f8\u5173jar\u5305\u3002\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\uff1a public class XSQLJavaExample { public static void main(String[] args) { SparkSession spark = SparkSession .builder() .appName( XSQL Java Example ) .enableXSQLSupport() .getOrCreate(); spark.sql( SELECT * FROM src ).show(); spark.stop(); } } \u5c06XSQLJavaExample\u6253\u6210jar\u5305\u540e\uff0c\u4f7f\u7528${XSQL_HOME}/bin/spark-submit\u547d\u4ee4\u8fdb\u884c\u63d0\u4ea4\u5373\u53ef\u3002","title":"Java"},{"location":"tutorial/api/#thrift","text":"\u200b Hive\u548cSpark\u90fd\u63d0\u4f9b\u4e86\u5bf9Thrift\u534f\u8bae\u7684\u652f\u6301\uff0cXSQL\u4e5f\u4e0d\u4f8b\u5916\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u591a\u79cd\u8bed\u8a00\u6309\u7167Thrift\u534f\u8bae\u8fdb\u884c\u5f00\u53d1\u3002\u8fd9\u91cc\u4ec5\u7ed9\u51faJava\u8bed\u8a00\u7684\u3002 QueryTool.java public class QueryTool { public static TTransport getSocketInstance(String host, int port, String USER, String PASSWORD) throws TTransportException { TSocket tSocket = new TSocket(host, port); tSocket.setTimeout(100000); return tSocket; } public static TOpenSessionResp openSession(TCLIService.Client client) throws TException { TOpenSessionReq openSessionReq = new TOpenSessionReq(); return client.OpenSession(openSessionReq); } } QueryInstance.java public class QueryInstance { private static String host = 127.0.0.1 ; private static int port = 10000; private static String username = test ; private static String passsword = ; private static TTransport transport; private static TCLIService.Client client; private TOperationState tOperationState = null; private Map String, Object resultMap = new HashMap String, Object (); static { try { transport = QueryTool.getSocketInstance(host, port, username, passsword); client = new TCLIService.Client(new TBinaryProtocol(transport)); transport.open(); } catch (TTransportException e) { System.out.println( hive collection error! ); } } public TOperationHandle submitQuery(String command) throws Exception { TOperationHandle tOperationHandle; TExecuteStatementResp resp = null; TSessionHandle sessHandle = QueryTool.openSession(client) .getSessionHandle(); TExecuteStatementReq execReq = new TExecuteStatementReq(sessHandle, command); // \u5f02\u6b65\u8fd0\u884c execReq.setRunAsync(true); // \u6267\u884csql resp = client.ExecuteStatement(execReq);// \u6267\u884c\u8bed\u53e5 tOperationHandle = resp.getOperationHandle();// \u83b7\u53d6\u6267\u884c\u7684handle if (tOperationHandle == null) { // \u8bed\u53e5\u6267\u884c\u5f02\u5e38\u65f6\uff0c\u4f1a\u628a\u5f02\u5e38\u4fe1\u606f\u653e\u5728resp.getStatus()\u4e2d\u3002 throw new Exception(resp.getStatus().getErrorMessage()); } return tOperationHandle; } public String getQueryLog(TOperationHandle tOperationHandle) throws Exception { String log = ; return log; } public TOperationState getQueryHandleStatus(TOperationHandle tOperationHandle) throws Exception { if (tOperationHandle != null) { TGetOperationStatusReq statusReq = new TGetOperationStatusReq( tOperationHandle); TGetOperationStatusResp statusResp = client .GetOperationStatus(statusReq); tOperationState = statusResp.getOperationState(); } return tOperationState; } public List String getColumns(TOperationHandle tOperationHandle) throws Throwable { TGetResultSetMetadataResp metadataResp; TGetResultSetMetadataReq metadataReq; TTableSchema tableSchema; metadataReq = new TGetResultSetMetadataReq(tOperationHandle); metadataResp = client.GetResultSetMetadata(metadataReq); List TColumnDesc columnDescs; List String columns = null; tableSchema = metadataResp.getSchema(); if (tableSchema != null) { columnDescs = tableSchema.getColumns(); columns = new ArrayList String (); for (TColumnDesc tColumnDesc : columnDescs) { columns.add(tColumnDesc.getColumnName()); } } return columns; } /** * \u83b7\u53d6\u6267\u884c\u7ed3\u679c select\u8bed\u53e5 */ public List Object getResults(TOperationHandle tOperationHandle) throws Throwable { TFetchResultsReq fetchReq = new TFetchResultsReq(); fetchReq.setOperationHandle(tOperationHandle); fetchReq.setMaxRows(1000); TFetchResultsResp re = client.FetchResults(fetchReq); List TColumn list = re.getResults().getColumns(); List Object list_row = new ArrayList Object (); for (TColumn field : list) { if (field.isSetStringVal()) { list_row.add(field.getStringVal().getValues()); } else if (field.isSetDoubleVal()) { list_row.add(field.getDoubleVal().getValues()); } else if (field.isSetI16Val()) { list_row.add(field.getI16Val().getValues()); } else if (field.isSetI32Val()) { list_row.add(field.getI32Val().getValues()); } else if (field.isSetI64Val()) { list_row.add(field.getI64Val().getValues()); } else if (field.isSetBoolVal()) { list_row.add(field.getBoolVal().getValues()); } else if (field.isSetByteVal()) { list_row.add(field.getByteVal().getValues()); } } for (Object obj : list_row) { System.out.println(obj); } return list_row; } public void cancelQuery(TOperationHandle tOperationHandle) throws Throwable { if (tOperationState != TOperationState.FINISHED_STATE) { TCancelOperationReq cancelOperationReq = new TCancelOperationReq(); cancelOperationReq.setOperationHandle(tOperationHandle); client.CancelOperation(cancelOperationReq); } } } Test.java public class Test { public static void main(String[] args) { try { QueryInstance base = new QueryInstance(); String sql = SELECT * FROM src ; TOperationHandle handle = base.submitQuery(sql); TOperationState state = base.getQueryHandleStatus(handle); while(state.equals(TOperationState.RUNNING_STATE) || state.equals(TOperationState.INITIALIZED_STATE)) { TimeUnit.SECONDS.sleep(1); state = base.getQueryHandleStatus(handle); } if (state.equals(TOperationState.FINISHED_STATE)) { base.getResults(handle); } } catch (Throwable e) { e.printStackTrace(); } } }","title":"Thrift"},{"location":"tutorial/api/#http-rest","text":"\u200b XSQL\u4f7f\u7528 Apache Livy \u5b9e\u73b0Restful\u670d\u52a1\uff0c\u8fd9\u91cc\u5185\u7f6e\u4e86 Livy REST API \uff0c\u8fd9\u91cc\u662f\u5e2e\u52a9\u60a8\u5feb\u901f\u5f00\u59cb\u7684 Livy\u63a5\u53e3\u4f7f\u7528Demo(JAVA\u3001PHP) \u3002XSQL\u5bf9Livy\u7684\u7ed3\u679c\u7f13\u5b58\u673a\u5236\u8fdb\u884c\u4e86\u4f18\u5316\uff0c\u4f18\u5316\u540e\u7684Livy\u67e5\u8be2\u72b6\u6001\u56fe\u5982\u4e0b\uff1a XSQL\u76ee\u524d\u53ea\u5f00\u6e90\u4e86\u5c06Livy\u9002\u914d\u5230XSQL\u7684\u5fc5\u8981\u4fee\u6539\uff0c\u8be6\u60c5\u89c1 GitHub\u94fe\u63a5 \uff0c\u4ee5\u4e0b\u5185\u5bb9\u4ec5\u9002\u7528\u4e8e\u5185\u90e8\u7528\u6237\u3002 \u8fd9\u91cc\u5217\u4e3e\u4e86\u4f7f\u7528XSQL Restful\u670d\u52a1\u4e4b\u524d\uff0c\u52a1\u5fc5\u77e5\u6653\u7684\u914d\u7f6e\u9879\uff1a Property Name Default Meaning livy.rsc.sql.interpreter.threadPool.size 1 \u6267\u884c\u7ebf\u7a0b\u6c60\u7684\u5927\u5c0f \uff0c\u5373\u6700\u591ax\u4e2a\u67e5\u8be2\u5904\u4e8eRunning\u72b6\u6001\uff08\u6240\u6709\u6267\u884c\u7ebf\u7a0b\u5171\u7528\u4e00\u4e2aSparkSession\uff0c\u5efa\u8bae\u914d\u7f6e\u4e3a5\uff09 livy.rsc.retained-statements 100 \u67e5\u8be2\u7ed3\u679c \u7f13\u51b2\u961f\u5217\u7684\u5927\u5c0f livy.rsc.result-discard.timeout 10m \u67e5\u8be2\u8fc7\u671f\u65f6\u95f4 \uff0c\u5f53\u7528\u6237\u83b7\u53d6\u67e5\u8be2\u7ed3\u679c\u4e4b\u540e\uff0c\u72b6\u6001\u7531Available\u53d8\u4e3aReaded\uff0c10\u5206\u949f\u540e\u81ea\u52a8\u53d8\u4e3aExpired\uff0c\u5f53\u7f13\u51b2\u961f\u5217\u7a7a\u95f4\u4e0d\u8db3\u65f6\uff0c\u53ef\u80fd\u88ab\u79fb\u51fa\u7f13\u51b2\u961f\u5217\u3002\uff08\u4e0d\u63a5\u53d7\u5c0f\u6570\uff0c\u65f6\u95f4\u5355\u4f4d=[us,ms,s,m,min,h,d]\uff09\uff080s\u8868\u793a\u9605\u540e\u5373\u711a\uff09 livy.rsc.result-retained.timeout 1h \u67e5\u8be2\u8fc7\u671f\u65f6\u95f4 \uff0c\u82e5\u7528\u6237\u5728\u67e5\u8be2\u7ed3\u679cAvailable\u76841\u4e2a\u5c0f\u65f6\u4e4b\u5185\uff0c\u4ecd\u672a\u83b7\u53d6\u67e5\u8be2\u7ed3\u679c\uff0c\u5219\u72b6\u6001\u81ea\u52a8\u53d8\u4e3aExpired\u3002 livy.rsc.server.session.timeout 0h Session\u8fc7\u671f\u65f6\u95f4 \uff0c\u82e5xx\u4e2a\u5c0f\u65f6\u4e4b\u5185\uff0cSparkSession\u672a\u6536\u5230\u4efb\u4f55\u67e5\u8be2\u8bf7\u6c42\uff0c\u5c06\u81ea\u52a8\u5173\u95ed\uff0c0h\u8868\u793a\u6c38\u4e0d\u8fc7\u671f\u3002 \u4e3a\u4e86\u5e2e\u52a9\u60a8\u5408\u7406\u5229\u7528\u96c6\u7fa4\u8d44\u6e90\uff0c\u6211\u4eec\u4e3a\u6bcf\u4e2aSession\u7ef4\u6301\u4e86SessionState\u3002 idle: \u5f53\u5df2\u63d0\u4ea4\u7684\u67e5\u8be2\u6570\u4e3a0\u65f6\uff0cSessionState\u4e3aidle\uff0c\u6b64\u65f6\u63d0\u4ea4\u7684\u67e5\u8be2\u53ef\u4ee5\u7acb\u5373\u83b7\u5f97\u6267\u884c\u7ebf\u7a0b\uff0c\u67e5\u8be2\u72b6\u6001\u8868\u73b0\u4e3aRunning\u3002 busy: \u5f53\u5df2\u63d0\u4ea4\u7684\u67e5\u8be2\u6570\u5927\u4e8e0\uff0c\u5c0f\u4e8elivy.rsc.sql.interpreter.threadPool.size\u65f6\uff0cSessionState\u4e3abusy\uff0c\u6b64\u65f6\u63d0\u4ea4\u67e5\u8be2\u53ef\u5373\u65f6\u8fdb\u884c\u8ba1\u7b97\uff0c\u4f46\u65e0\u6cd5\u83b7\u5f97SparkSession\u7684\u5168\u90e8\u8d44\u6e90\uff0c\u67e5\u8be2\u6548\u7387\u6709\u6240\u4e0b\u964d\uff0c\u67e5\u8be2\u72b6\u6001\u8868\u73b0\u4e3aRunning\u3002 queued: \u5f53\u5df2\u63d0\u4ea4\u7684\u67e5\u8be2\u6570\u5927\u4e8elivy.rsc.sql.interpreter.threadPool.size\uff0c\u5c0f\u4e8elivy.rsc.retained-statements\u65f6\uff0cSessionState\u4e3aQueued\uff0c\u6b64\u65f6\u63d0\u4ea4\u67e5\u8be2\u8fdb\u884cFIFO\u7b49\u5f85\uff0c\u67e5\u8be2\u72b6\u6001\u8868\u73b0\u4e3aWaiting\u3002 exhaust: \u5f53\u5df2\u63d0\u4ea4\u7684\u67e5\u8be2\u6570\u7b49\u4e8elivy.rsc.retained-statements\u65f6\uff0cSessionState\u4e3aexhaust\uff0c\u6b64\u65f6\u63d0\u4ea4\u7684\u67e5\u8be2\u5c06\u88ab\u62d2\u7edd\u670d\u52a1\uff0c\u67e5\u8be2\u72b6\u6001\u8868\u73b0\u4e3aRejected\u3002\u7528\u6237\u53ef\u4ee5\u9009\u62e9\u5916\u90e8\u7a0b\u5e8f\u8f6e\u8be2\u7b49\u5f85\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9\u7533\u8bf7\u521b\u5efa\u65b0\u7684Sesssion\u3002 \u63a8\u8350\u7684\u4f7f\u7528\u65b9\u5f0f\uff1a \u5efa\u8bae\u603b\u662f\u4fdd\u6301\u4e00\u4e2a\u6216\u591a\u4e2a\u957f\u9a7b\u7684Sesssion\uff0c\u5f53\u5e76\u53d1\u6570\u4e0d\u8db3\u65f6\uff0c\u5229\u7528livy.rsc.server.session.timeout\u521b\u5efa\u53ef\u81ea\u52a8\u9500\u6bc1\u7684Session\uff0c\u4ece\u800c\u6700\u5927\u7a0b\u5ea6\u7684\u5b9e\u73b0\u5373\u65f6\u67e5\u8be2\u540c\u65f6\u8282\u7701\u961f\u5217\u8d44\u6e90\u3002 \u6211\u4eec\u5728 http://client01v.qss.zzzc.qihoo.net:11224/#/ \u4e3a\u60a8\u63d0\u4f9b\u4e86Zeppelin\u9875\u9762\uff0c\u7528\u516c\u53f8\u57df\u8d26\u53f7\u767b\u5f55\u540e\uff0c\u521b\u5efaLivy\u7c7b\u578b\u7684note\uff0c\u5c31\u53ef\u4ee5\u8bd5\u7528XSQL\u7684\u5404\u79cd\u529f\u80fd\u4e86\u3002\u8be5\u9875\u9762\u7531XSQL\u56e2\u961f\u63d0\u4f9b\u7ed9XSQL\u7528\u6237\u5b66\u4e60\u4ee5\u53ca\u6d4b\u8bd5\u4f7f\u7528\uff0c\u5185\u7f6e\u7684xsql\u8bd5\u7528\u90e8\u7f72\u5305\u542b\u56db\u79cd\u6570\u636e\u6e90\uff1ahive\u3001es\u3001mysql\u3001redis\uff0c\u5747\u4e3a\u6d4b\u8bd5\u6570\u636e\u5e93\uff08\u53ea\u8bfb\u6743\u9650\uff09\u3002 \u5982\u679c\u60a8\u60f3\u8981\u8bbf\u95ee\u81ea\u5df1\u7684\u6570\u636e\u6e90\uff0c\u53ef\u4ee5\u52a0\u5165\u4e00\u4e2a\u4e91\u56fe\u9879\u76ee\uff0c\u7531\u9879\u76ee\u8d1f\u8d23\u4eba\u5411weiwenda@360.cn\u7533\u8bf7XSQL Restful\u670d\u52a1\uff0c\u7533\u8bf7\u6210\u529f\u540e\u5728note\u9875\u9762\u5c06\u51fa\u73b0 your_project\u9879\u76ee\u90e8\u7f72 \u7684\u53ef\u9009\u4e0b\u62c9\u3002 \u5177\u4f53\u7684\u64cd\u4f5c\u6d41\u7a0b\u5982\u89c6\u9891\u6240\u793a\uff1a Your browser does not support the video tag.","title":"HTTP REST [\u672a\u5f00\u6e90]"},{"location":"tutorial/api/#jdbc","text":"\u200b Hive\u548cSpark\u90fd\u63d0\u4f9b\u4e86\u5bf9JDBC\u7684\u652f\u6301\uff0cXSQL\u4e5f\u4e0d\u4f8b\u5916\u3002\u8fd9\u91cc\u7ed9\u51faJava\u8bed\u8a00\u4f7f\u7528JDBC\u8fde\u63a5XSQL\u7684\u4f8b\u5b50\u3002 public class XSQLJdbcExample { private static String driverName = org.apache.hive.jdbc.HiveDriver ; public static void main(String[] args) throws SQLException { try { Class.forName(driverName); } catch (ClassNotFoundException e) { e.printStackTrace(); System.exit(1); } Connection con = null; Statement stmt = null; ResultSet res = null; try { con = DriverManager. getConnection( jdbc:hive2://127.0.0.1:10000/test;auth=noSasl , test , test ); stmt = con.createStatement(); String sql = SELECT * FROM src ; res = stmt.executeQuery(sql); while (res.next()) { System.out.println(res.getString( ip )); } } catch (Exception e) { e.printStackTrace(); } finally { if (res != null) { res.close(); } if (stmt != null) { stmt.close(); } if (con != null) { con.close(); } } } } \u7531\u4e8eXSQL\u7ee7\u627f\u4e86HIVE\u5b9e\u73b0JDBC\u7684\u8bbe\u8ba1\uff0c\u56e0\u6b64\u8fd9\u91cc\u7684JDBC Driver\u4f9d\u7136\u662forg.apache.hive.jdbc.HiveDriver\u3002","title":"JDBC"},{"location":"tutorial/configuration/","text":"\u914d\u7f6e\u6e05\u5355 Property Name Default Meaning spark.xsql.properties.file xsql.conf \u7528\u4e8e\u6307\u5b9a\u5305\u542b\u6240\u6709XSQL\u914d\u7f6e\u7684\u5c5e\u6027\u6587\u4ef6\u3002\u5355\u72ec\u7684XSQL\u5c5e\u6027\u6587\u4ef6\u4fbf\u4e8e\u5bf9XSQL\u914d\u7f6e\u4fe1\u606f\u8fdb\u884c\u8fd0\u7ef4\u3001\u7ba1\u7406\u3002\u5982\u679c\u4e0d\u6307\u5b9a\u6b64\u5c5e\u6027\uff0c\u7528\u6237\u9700\u8981\u5c06XSQL\u53c2\u6570\u914d\u7f6e\u5230spark-default.conf\u6216\u8005\u901a\u8fc7--conf\u4f20\u9012\u3002 spark.xsql.datasources None \u7528\u4e8e\u6307\u5b9a\u7528\u6237\u4f7f\u7528\u7684\u6570\u636e\u6e90\u3002\u6570\u636e\u6e90\u53ef\u4ee5\u6709\u591a\u4e2a\uff0c\u4e4b\u95f4\u4f7f\u7528\u82f1\u6587\u9017\u53f7\u5206\u9694\uff0c\u4f8b\u5982\uff1adefault,customer,order\u3002 spark.xsql.default.datasource default \u7528\u4e8e\u6307\u5b9aXSQL\u9ed8\u8ba4\u7684\u6570\u636e\u6e90\u3002 spark.xsql.default.database default \u7528\u4e8e\u6307\u5b9aXSQL\u5728\u9ed8\u8ba4\u6570\u636e\u6e90\u4e2d\u9ed8\u8ba4\u4f7f\u7528\u7684\u6570\u636e\u5e93\u3002 spark.xsql.datasource.$dataSource.type None \u7528\u4e8e\u6307\u5b9a\u6570\u636e\u6e90\u7684\u7c7b\u578b\uff0c\u4f8b\u5982\uff1amysql\u3002 spark.xsql.datasource.$dataSource.url None \u7528\u4e8e\u6307\u5b9a\u6570\u636e\u6e90\u7684url\u5730\u5740\uff0c\u4e0d\u540c\u6570\u636e\u6e90\u7684Url\u683c\u5f0f\u4e0d\u540c\uff0c\u8bf7\u5206\u522b\u67e5\u770b\u5404\u6570\u636e\u6e90Configuration\u914d\u7f6e\u3002 spark.xsql.datasource.$dataSource.user None \u7528\u4e8e\u6307\u5b9a\u6570\u636e\u6e90\u8d26\u53f7\u7684\u7528\u6237\u540d\u3002 spark.xsql.datasource.$dataSource.password None \u7528\u4e8e\u6307\u5b9a\u6570\u636e\u6e90\u8d26\u53f7\u7684\u5bc6\u7801\u3002 spark.xsql.datasource.$dataSource.version None \u7528\u4e8e\u6307\u5b9a\u6570\u636e\u6e90\u7684\u7248\u672c\uff0c\u4f8b\u5982MySQL\u7684\u7248\u672c\u67095.6.19\u3002 spark.xsql.datasource.$dataSource.whitelist None \u7528\u4e8e\u6307\u5b9a\u6570\u636e\u6e90\u7684Database\u53caTable\u767d\u540d\u5355\u3002\u7531\u4e8e\u4e00\u4e9b\u6570\u636e\u6e90\u4e2d\u6709\u5927\u91cf\u7684Database\u53caTable\uff0c\u6240\u4ee5\u4f1a\u5bfc\u81f4\u542f\u52a8XSQL\u65f6\u82b1\u8d39\u5927\u91cf\u7684\u65f6\u95f4\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u6bcf\u4e2a\u7528\u6237\u53ea\u5bf9\u5176\u4e2d\u7684\u5c11\u6570Database\u53caTable\u611f\u5174\u8da3\uff0c\u56e0\u6b64\u53ef\u4ee5\u63d0\u4f9b\u767d\u540d\u5355\u52a0\u901fXSQL\u7684\u542f\u52a8\u3002 spark.xsql.datasource.$dataSource.pushdown true \u7528\u4e8e\u63a7\u5236\u6307\u5b9a\u6570\u636e\u6e90\u7684\u67e5\u8be2\u662f\u5426\u4f18\u5148\u91c7\u7528\u4e0b\u63a8\u65b9\u5f0f\u3002\u6b64\u914d\u7f6e\u5c06\u5efa\u8baeXSQL\u5bf9\u6b64\u6570\u636e\u6e90\u7684\u67e5\u8be2\u4f7f\u7528\u4e0b\u63a8\u65b9\u5f0f\uff0c\u4f46\u662f\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u3002\u5f88\u591a\u60c5\u51b5\u4e0b\uff0cXSQL\u5e76\u4e0d\u4f1a\u4e0b\u63a8\uff0c\u4f8b\u5982\uff1a\u6570\u636e\u6e90\u67e5\u8be2\u8fd8\u5305\u542b\u6709\u5176\u4ed6\u6570\u636e\u6e90\u7684\u5b50\u67e5\u8be2\uff0c\u6216\u8005\u5f15\u7528\u4e86\u5916\u90e8\u67e5\u8be2\u7684\u522b\u540d\u3002 spark.xsql.datasource.$dataSource.schemas None \u7528\u4e8e\u5b9a\u4e49\u6570\u636e\u6e90\u4e2d\u8868\u7684Schema\u4fe1\u606f\u3002\u53ea\u9002\u7528\u4e8e\u65e0\u4e25\u683cSchema\u7684\u6570\u636e\u6e90\uff0c\u4f8b\u5982\uff1aRedis\u3001HBASE\u3001MongoDB spark.xsql.datasource.$dataSource.cache.level 1 \u7528\u4e8e\u6307\u5b9a\u6570\u636e\u6e90\u7684\u5143\u6570\u636e\u7f13\u5b58\u7ea7\u522b\uff0c1\u8868\u793aLevel One\uff0c2\u8868\u793aLevel Two\u3002 spark.xsql.datasource.$dataSource.cluster None \u7528\u4e8e\u5b9a\u4e49\u6570\u636e\u6e90\u4f18\u5148\u91c7\u7528\u7684Yarn\u96c6\u7fa4\u3002\u5982\u679c\u7528\u6237\u9996\u6b21\u63d0\u4ea4\u975e\u4e0b\u63a8\u7684\u4efb\u52a1\uff0c\u90a3\u4e48\u6b64\u4efb\u52a1\u5c06\u4f1a\u88ab\u63d0\u4ea4\u5230\u5bf9\u5e94\u7684Yarn\u96c6\u7fa4\u3002\u5982\u679c\u672a\u6307\u5b9a\u6b64\u914d\u7f6e\uff0c\u5bf9\u4e8eHive\u5c06\u9009\u62e9Hive\u5143\u6570\u636e\u670d\u52a1\u6240\u5728\u7684\u96c6\u7fa4\uff0c\u5176\u4ed6\u6570\u636e\u6e90\u5219\u4ecd\u7136\u9009\u62e9$XSQL_HOME/hadoopconf/yarn-site.xml\u6587\u4ef6\u6240\u914d\u7f6e\u7684Yarn\u96c6\u7fa4\u3002 spark.xsql.yarn.$clusterName None \u7528\u4e8e\u6307\u5b9a\u7528\u6237\u4f7f\u7528\u7684Yarn\u96c6\u7fa4\u7684\u540d\u79f0\u53ca\u76f8\u5173\u914d\u7f6e\u6587\u4ef6\u3002 \u914d\u7f6e\u6570\u636e\u6e90\u5e93\u8868\u767d\u540d\u5355 \u200b \u767d\u540d\u5355\u662f\u901a\u8fc7json\u683c\u5f0f\u7684\u914d\u7f6e\u6587\u4ef6\u8fdb\u884c\u914d\u7f6e\u7684\uff0c\u4e3a\u4fbf\u4e8e\u7528\u6237\u7406\u89e3\uff0c\u6211\u4eec\u6307\u5b9adefault\u6570\u636e\u6e90\u7684\u767d\u540d\u5355\u914d\u7f6e\u6587\u4ef6\u4e3ahive-whitelist.conf\uff1a spark.xsql.datasource.default.whitelist hive-whitelist.conf \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684hive-whitelist.conf\u7684\u914d\u7f6e\u5185\u5bb9\uff1a { default : { includes : [ tableA , tableB , tableC , tableD , tableE , tableF ], excludes : [ tableD ] } } default\u662f\u6570\u636e\u5e93\u540d\u79f0\u3002\u6570\u636e\u5e93\u7ea7\u522b\u53ea\u6709\u767d\u540d\u5355\uff0c\u800c\u6ca1\u6709\u9ed1\u540d\u5355\uff0c\u4e5f\u5c31\u662f\u8bf4XSQL\u4e2d\u53ea\u6709\u5728\u767d\u540d\u5355\u4e2d\u660e\u786e\u914d\u7f6e\u7684\u6570\u636e\u5e93\u624d\u662f\u53ef\u89c1\u7684\u3002\u6bcf\u4e2a\u6570\u636e\u5e93\u90fd\u53ef\u4ee5\u914d\u7f6eincludes\u548cexcludes\u4e24\u4e2a\u5c5e\u6027\uff0c\u5206\u522b\u8868\u793a\u767d\u540d\u5355\u548c\u9ed1\u540d\u5355\u3002\u5728\u767d\u540d\u5355\u4e2d\u5305\u62ec\u4e86table[A-F]\u51716\u5f20\u8868\uff0c\u540c\u65f6\u9ed1\u540d\u5355\u4e2d\u5305\u62ec\u4e86tableD\u4e00\u5f20\u8868\u3002\u5728XSQL\u4e2d\u9ed1\u540d\u5355\u62e5\u6709\u6700\u9ad8\u7684\u4f18\u5148\u7ea7\uff0c\u5c06\u4f1a\u4ece\u767d\u540d\u5355\u4e2d\u6e05\u695a\u8868\uff0c\u56e0\u6b64\u5728XSQL\u4e2d\u53ea\u6709table[A-D]\u3001tableE\u3001tableF\u51715\u5f20\u8868\u53ef\u89c1\u3002\u8868\u9ed8\u8ba4\u662f\u5c5e\u4e8e\u767d\u540d\u5355\u7684\uff0c\u6240\u4ee5\u5f53\u7528\u6237\u9700\u8981\u6570\u636e\u5e93\u4e2d\u7684\u6240\u6709\u8868\u90fd\u53ef\u89c1\u65f6\uff0c\u53ef\u4ee5\u4e0d\u914d\u7f6eincludes\u3002 \u914d\u7f6eNoSQL\u6570\u636e\u6e90\u7684Schema\u6587\u4ef6 \u200b \u6709\u4e9b\u7c7b\u578b\u7684\u6570\u636e\u6e90\u6ca1\u6709\u660e\u786e\u3001\u4e25\u683c\u7684Schema\u5b9a\u4e49\uff0cXSQL\u65e0\u6cd5\u901a\u8fc7\u8bbf\u95ee\u6570\u636e\u6e90\u5f97\u5230\u5404\u4e2a\u8868\u7684Schema\u4fe1\u606f\u3002\u4e3a\u4e86\u80fd\u591f\u63a5\u5165XSQL\uff0c\u9700\u8981\u7528\u6237\u624b\u52a8\u914d\u7f6e\u6570\u636e\u6e90\u7684Schema\u4fe1\u606f\u3002\u914d\u7f6e\u91c7\u7528\u4e86json\u683c\u5f0f\uff0c\u5c31\u50cf\u4e0b\u9762\u7684\u4f8b\u5b50\u4e00\u6837\uff1a { database_A : [{ table : table_A_1 , fields : [{ name : _id , type : object_Id , hidden : false }, { name : item , type : string , hidden : false }, { name : qty , type : int , hidden : false }, { name : tags , type : array string , hidden : false }, { name : dim_cm , type : array int , hidden : false } ] }, { table : table_A_2 , fields : [{ name : id , type : long , hidden : false }, { name : name , type : string , hidden : false }, { name : is_man , type : boolean , hidden : false }, { name : age , type : int , hidden : false }, { name : salary , type : double , hidden : false }, { name : format_salary , type : decimal(12,2) , hidden : false }, { name : graduation_time , type : date , hidden : false }, { name : birthday , type : string , hidden : false }, { name : score , type : decimal(5,1) , hidden : false } ] } ], database_B : [{ table : table_B_1 , fields : [{ name : _id , type : object_Id , hidden : false }, { name : VendorID , type : int , hidden : false }, { name : pickup_datetime , type : string , hidden : false }, { name : total_amount , type : double , hidden : false } ] }] } \u6b64\u5904\u4ee5MongoDB\u7684Schema\u4e3a\u4f8b\u3002\u5176\u4ed6\u6570\u636e\u6e90\u4e3b\u8981\u662f\u5b57\u6bb5\u5141\u8bb8\u7684\u7c7b\u578b\u4e0d\u540c\u3002 \u9009\u62e9\u8fd0\u884c\u96c6\u7fa4 \u6709\u65f6\u5019\uff0c\u7528\u6237\u7684\u6570\u636e\u6e90\u4f4d\u4e8e\u4e0d\u540c\u7684\u96c6\u7fa4\u73af\u5883\u4e2d\u3002\u4e3a\u4e86\u4f7f\u5f97Yarn\u5206\u914d\u7684\u8d44\u6e90\u4e0e\u6570\u636e\u4e4b\u95f4\u66f4\u52a0\u63a5\u8fd1\uff0c\u53ef\u4ee5\u4e3a\u6570\u636e\u6e90\u663e\u793a\u6307\u5b9aYarn\u96c6\u7fa4\u3002spark.xsql.yarn.$clusterName\u5c5e\u6027\u4e2d\u7684clusterName\u662f\u7528\u6237\u7ed9Yarn\u96c6\u7fa4\u8d77\u7684\u522b\u540d\uff0c\u5bf9\u5e94\u7684\u503c\u5fc5\u987b\u662f\u4e00\u4e2a\u6709\u6548\u7684\u5c5e\u6027\u914d\u7f6e\u6587\u4ef6\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3ayarn-cluster0\u7684Yarn\u96c6\u7fa4\uff0c\u5e76\u6307\u5b9a\u4e86\u5bf9\u5e94\u7684\u914d\u7f6e\u6587\u4ef6\u4e3a spark.xsql.yarn.cluster0 yarn-cluster0.conf yarn-cluster0.conf\u6587\u4ef6\u4e2d\u7684\u914d\u7f6e\u4fe1\u606f\u53ef\u80fd\u4e3a\uff1a spark.yarn.stagingDir hdfs://namenode.dfs.cluster0.yahoo.com:9000/home/spark/cache spark.hadoop.yarn.resourcemanager.cluster-id cluster0-yarn spark.hadoop.yarn.resourcemanager.zk-state-store.address m2.dfs.cluster0.qihoo.net:2181,m3.dfs.cluster0.yahoo.com:2181,m4.dfs.cluster0.yahoo.com:2181,m5.dfs.cluster0.yahoo.com:2181,m6.dfs.cluster0.yahoo.com:2181 spark.hadoop.yarn.resourcemanager.zk-address m2.dfs.cluster0.yahoo.com:2181,m3.dfs.cluster0.yahoo.com:2181,m4.dfs.cluster0.yahoo.com:2181,m5.dfs.cluster0.yahoo.com:2181,m6.dfs.cluster0.yahoo.com:2181 spark.hadoop.yarn.resourcemanager.zk-state-store.parent-path /cluster0/yarn/rmstore spark.hadoop.yarn.resourcemanager.hostname.rm1 m7.dfs.cluster0.yahoo.com spark.hadoop.yarn.resourcemanager.hostname.rm2 m8.dfs.cluster0.yahoo.com spark.hadoop.yarn.resourcemanager.scheduler.address.rm1 m7.dfs.cluster0.yahoo.com:8830 spark.hadoop.yarn.resourcemanager.resource-tracker.address.rm1 m7.dfs.cluster0.yahoo.com:8831 spark.hadoop.yarn.resourcemanager.address.rm1 m7.dfs.cluster0.yahoo.com:8832 spark.hadoop.yarn.resourcemanager.admin.address.rm1 m7.dfs.cluster0.yahoo.com:8833 spark.hadoop.yarn.resourcemanager.webapp.address.rm1 m7.dfs.cluster0.yahoo.com:8888 spark.hadoop.yarn.resourcemanager.ha.admin.address.rm1 m7.dfs.cluster0.yahoo.com:23142 spark.hadoop.yarn.resourcemanager.scheduler.address.rm2 m8.dfs.cluster0.yahoo.com:8830 spark.hadoop.yarn.resourcemanager.resource-tracker.address.rm2 m8.dfs.cluster0.yahoo.com:8831 spark.hadoop.yarn.resourcemanager.address.rm2 m8.dfs.cluster0.yahoo.com:8832 spark.hadoop.yarn.resourcemanager.admin.address.rm2 m8.dfs.cluster0.yahoo.com:8833 spark.hadoop.yarn.resourcemanager.webapp.address.rm2 m8.dfs.cluster0.yahoo.com:8888 spark.hadoop.yarn.resourcemanager.ha.admin.address.rm2 m8.dfs.cluster0.yahoo.com:23142 spark.hadoop.yarn.log.server.url http://m8.dfs.cluster0.yahoo.com:19888/jobhistory/logs \u4e0b\u63a8\u6267\u884c\u65f6\u7684\u6761\u6570\u9650\u5236 \u5f53\u5bf9\u6570\u636e\u6e90\u7684\u67e5\u8be2\u5b9e\u9645\u91c7\u7528\u4e86\u4e0b\u63a8\u65b9\u5f0f\u65f6\uff0cXSQL\u5c06\u5728\u7528\u6237\u672a\u6307\u5b9alimit\u65f6\uff0c\u9ed8\u8ba4\u4f1a\u52a0\u4e0alimit 10\u7684\u9650\u5236\u3002\u8fd9\u6837\u505a\u5f97\u76ee\u7684\u6709\u4e24\u70b9\uff1a \u9996\u5148\uff0cPushdown\u5b9e\u9645\u8fd0\u884c\u5728Driver\u8fdb\u7a0b\u4e2d\uff0cDriver\u7684\u5185\u5b58\u5f80\u5f80\u662f\u6709\u9650\u7684\u3002\u5982\u679c\u4e0d\u52a0\u4ee5\u9650\u5236\uff0c\u5c06\u6570GB\u751a\u81f3\u66f4\u591a\u7684\u6570\u636e\u8bfb\u53d6\u5230Driver\uff0c\u5c06\u4f1a\u5f15\u53d1XSQL\u7684\u5185\u5b58\u95ee\u9898\uff0c\u8b6c\u5982\uff1aGC\u9891\u7e41\u3001OOM\u3002 \u5176\u6b21\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u6570\u636e\u6e90\uff0c\u5982\u679c\u6ca1\u6709\u663e\u5f0f\u7684limit\u9650\u5236\uff0c\u6570\u636e\u6e90\u672c\u8eab\u4e5f\u6709\u9650\u5236\uff08\u4f8b\u5982Elasticsearch\u4f1a\u52a0\u4e0alimit 10\u7684\u9650\u5236\uff09\u3002 \u5982\u679c\u7528\u6237\u9700\u8981\u66f4\u591a\u7684\u8fd4\u56de\u6570\u636e\uff0c\u8bf7\u663e\u5f0f\u589e\u52a0limit\u8bed\u53e5\u3002\u76ee\u524dXSQL\u80fd\u591f\u63a5\u53d7\u7684limit\u7684\u6700\u5927\u503c\u662f10000\u3002 \u4f7f\u7528\u79c1\u6709\u7684xsql.conf \u4e3a\u4e86\u9632\u6b62\u7528\u6237\u7684\u6570\u636e\u6e90\u8fde\u63a5\u5e10\u53f7\u5bc6\u7801\u6cc4\u9732\uff0cXSQL\u63d0\u4f9b\u4e86\u4f7f\u7528\u79c1\u6709xsql.conf\u7684\u914d\u7f6e\u65b9\u6cd5\uff1a spark.xsql.properties.file customer_name.conf spark.xsql.conf.dir /home/username/xxx/xx \u4e0e\u4e4b\u914d\u5408\u7684\u5728\u76ee\u5f55/home/username/xxx/xx\u4e0b\u521b\u5efacustomer_name.conf\uff0c\u5199\u5165\u9002\u5f53\u7684\u6570\u636e\u6e90\u8fde\u63a5\u4fe1\u606f\u3002\u6b64\u7c7b\u914d\u7f6e\u4e0d\u5efa\u8bae\u4fee\u6539\u5728spark-defaults.conf\u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u5b8c\u6574\u7684\u63d0\u4ea4\u547d\u4ee4\u5982\u4e0b\uff1a /usr/bin/hadoop/software/spark-xsql/bin/spark-xsql --conf spark.xsql.properties.file=customer_name.conf --conf spark.xsql.conf.dir=/home/username/xxx/xx \u4f7f\u7528\u5b57\u7b26\u4e32\u53d8\u91cf\u62fc\u63a5SQL\u67e5\u8be2 \u5bf9\u4e8e\u4e00\u4e9b\u5b9a\u65f6\u4efb\u52a1\uff0c\u67e5\u8be2\u8bed\u53e5\u4e2d\u9700\u8981\u4f20\u5165\u968f\u65f6\u95f4\u53d8\u5316\u7684\u67e5\u8be2\u53d8\u91cf\uff0cXSQL\u540c\u6837\u63d0\u4f9b\u4e86\u8fd9\u6837\u7684\u529f\u80fd\uff0c\u9996\u5148\u770b\u4e0b\u9762\u7684\u793a\u4f8b\u63d0\u4ea4\u547d\u4ee4\uff1a /usr/bin/hadoop/software/spark-xsql/bin/spark-xsql --conf spark.key=value \u90a3\u4e48\uff0c\u5728\u4e4b\u540e\u7684\u67e5\u8be2\u8bed\u53e5\u53ef\u4ee5\u4ee5\u4e0b\u8868\u8fbe\u5f0f\uff1a select '${spark.key}' as date from example_table; \u6ce8\u610f\uff0c${}\u7b26\u53f7\u5fc5\u987b\u88ab\u5355\u5f15\u53f7\u6216\u53cc\u5f15\u53f7\u6240\u5305\u88f9\uff0c\u4e0d\u80fd\u591f\u72ec\u7acb\u5b58\u5728\uff0c\u5426\u5219\u4f1a\u8bed\u6cd5\u89e3\u6790\u62a5\u9519\u3002\u7531\u4e8eSparkConf\u8981\u6c42\u6240\u6709\u7684\u914d\u7f6e\u9879\u5fc5\u987b\u4ee5 spark. \u5f00\u5934\uff0c\u56e0\u6b64\\${}\u5185\u7684\u67e5\u8be2\u53d8\u91cf\u4e5f\u5fc5\u987b\u4ee5 spark. \u5f00\u5934\u3002 \u5f00\u542fHBase\u6216Druid\u6570\u636e\u6e90 \u4e3a\u4e86\u63a7\u5236XSQL\u4f9d\u8d56jar\u5305\u7684\u6570\u91cf\uff0cXSQL\u9ed8\u8ba4\u4e0d\u5f00\u542f\u4f9d\u8d56\u8f83\u591a\u7684HBase\u6a21\u5757\u548cDruid\u6a21\u5757\uff0c\u5f53\u9700\u8981\u4f7f\u7528\u8fd9\u4e9b\u6a21\u5757\u65f6\uff0c\u53ef\u4ee5\u6dfb\u52a0\u4ee5\u4e0b\u914d\u7f6e\uff1a spark.driver.extraClassPath /usr/bin/hadoop/software/spark-xsql/hbase/*:/usr/bin/hadoop/software/spark-xsql/druid/* spark.xsql.extraDatasourceManagers org.apache.spark.sql.xsql.manager.HBaseManager,org.apache.spark.sql.xsql.manager.DruidManager \u5f00\u542fhive\u6743\u9650\u63a7\u5236 \u5bf9\u4e8eXSQL\u5e26\u6743\u9650\u63a7\u5236\u7684\u90e8\u7f72\u7248\u672c\uff0c\u8981\u60f3\u5f00\u542f\u6743\u9650\u63a7\u5236\uff0c\u8fd8\u9700\u8981\u6dfb\u52a0\u989d\u5916\u7684\u914d\u7f6e\uff1a spark.sql.extensions org.apache.ranger.authorization.spark.authorizer.RangerSparkSQLExtension hive-site.mxl\u4e5f\u9700\u8981\u6dfb\u52a0\u5982\u4e0b\u914d\u7f6e\uff1a property name hive.security.authorization.enabled /name value false /value /property property name hive.security.authorization.manager /name value org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory /value /property property name hive.security.authenticator.manager /name value org.apache.hadoop.hive.ql.security.SessionStateUserAuthenticator /value /property property name hive.conf.restricted.list /name value hive.security.authorization.enabled,hive.security.authorization.manager,hive.security.authenticator.manager /value /property \u5f00\u542f\u81ea\u9002\u5e94\u6267\u884c \u5bf9\u4e8eXSQL\u5e26\u81ea\u9002\u5e94\u6267\u884c\u7684\u90e8\u7f72\u7248\u672c\uff0c\u8981\u60f3\u5f00\u542f\u81ea\u9002\u5e94\u6267\u884c\uff0c\u8fd8\u9700\u8981\u6dfb\u52a0\u989d\u5916\u7684\u914d\u7f6e\uff1a spark.sql.adaptive.enabled true spark.sql.adaptive.shuffle.targetPostShuffleInputSize 134217728 spark.sql.adaptive.join.enabled true spark.sql.adaptive.skewedJoin.enabled true spark.sql.adaptive.skewedPartitionFactor 5 spark.sql.adaptive.skewedPartitionSizeThreshold 134217728 spark.sql.adaptive.skewedPartitionRowCountThreshold 20000000 spark.shuffle.statistics.verbose true spark.shuffle.service.enabled false spark.dynamicAllocation.enabled false spark.executor.instances 150","title":"Configuration"},{"location":"tutorial/configuration/#_1","text":"Property Name Default Meaning spark.xsql.properties.file xsql.conf \u7528\u4e8e\u6307\u5b9a\u5305\u542b\u6240\u6709XSQL\u914d\u7f6e\u7684\u5c5e\u6027\u6587\u4ef6\u3002\u5355\u72ec\u7684XSQL\u5c5e\u6027\u6587\u4ef6\u4fbf\u4e8e\u5bf9XSQL\u914d\u7f6e\u4fe1\u606f\u8fdb\u884c\u8fd0\u7ef4\u3001\u7ba1\u7406\u3002\u5982\u679c\u4e0d\u6307\u5b9a\u6b64\u5c5e\u6027\uff0c\u7528\u6237\u9700\u8981\u5c06XSQL\u53c2\u6570\u914d\u7f6e\u5230spark-default.conf\u6216\u8005\u901a\u8fc7--conf\u4f20\u9012\u3002 spark.xsql.datasources None \u7528\u4e8e\u6307\u5b9a\u7528\u6237\u4f7f\u7528\u7684\u6570\u636e\u6e90\u3002\u6570\u636e\u6e90\u53ef\u4ee5\u6709\u591a\u4e2a\uff0c\u4e4b\u95f4\u4f7f\u7528\u82f1\u6587\u9017\u53f7\u5206\u9694\uff0c\u4f8b\u5982\uff1adefault,customer,order\u3002 spark.xsql.default.datasource default \u7528\u4e8e\u6307\u5b9aXSQL\u9ed8\u8ba4\u7684\u6570\u636e\u6e90\u3002 spark.xsql.default.database default \u7528\u4e8e\u6307\u5b9aXSQL\u5728\u9ed8\u8ba4\u6570\u636e\u6e90\u4e2d\u9ed8\u8ba4\u4f7f\u7528\u7684\u6570\u636e\u5e93\u3002 spark.xsql.datasource.$dataSource.type None \u7528\u4e8e\u6307\u5b9a\u6570\u636e\u6e90\u7684\u7c7b\u578b\uff0c\u4f8b\u5982\uff1amysql\u3002 spark.xsql.datasource.$dataSource.url None \u7528\u4e8e\u6307\u5b9a\u6570\u636e\u6e90\u7684url\u5730\u5740\uff0c\u4e0d\u540c\u6570\u636e\u6e90\u7684Url\u683c\u5f0f\u4e0d\u540c\uff0c\u8bf7\u5206\u522b\u67e5\u770b\u5404\u6570\u636e\u6e90Configuration\u914d\u7f6e\u3002 spark.xsql.datasource.$dataSource.user None \u7528\u4e8e\u6307\u5b9a\u6570\u636e\u6e90\u8d26\u53f7\u7684\u7528\u6237\u540d\u3002 spark.xsql.datasource.$dataSource.password None \u7528\u4e8e\u6307\u5b9a\u6570\u636e\u6e90\u8d26\u53f7\u7684\u5bc6\u7801\u3002 spark.xsql.datasource.$dataSource.version None \u7528\u4e8e\u6307\u5b9a\u6570\u636e\u6e90\u7684\u7248\u672c\uff0c\u4f8b\u5982MySQL\u7684\u7248\u672c\u67095.6.19\u3002 spark.xsql.datasource.$dataSource.whitelist None \u7528\u4e8e\u6307\u5b9a\u6570\u636e\u6e90\u7684Database\u53caTable\u767d\u540d\u5355\u3002\u7531\u4e8e\u4e00\u4e9b\u6570\u636e\u6e90\u4e2d\u6709\u5927\u91cf\u7684Database\u53caTable\uff0c\u6240\u4ee5\u4f1a\u5bfc\u81f4\u542f\u52a8XSQL\u65f6\u82b1\u8d39\u5927\u91cf\u7684\u65f6\u95f4\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u6bcf\u4e2a\u7528\u6237\u53ea\u5bf9\u5176\u4e2d\u7684\u5c11\u6570Database\u53caTable\u611f\u5174\u8da3\uff0c\u56e0\u6b64\u53ef\u4ee5\u63d0\u4f9b\u767d\u540d\u5355\u52a0\u901fXSQL\u7684\u542f\u52a8\u3002 spark.xsql.datasource.$dataSource.pushdown true \u7528\u4e8e\u63a7\u5236\u6307\u5b9a\u6570\u636e\u6e90\u7684\u67e5\u8be2\u662f\u5426\u4f18\u5148\u91c7\u7528\u4e0b\u63a8\u65b9\u5f0f\u3002\u6b64\u914d\u7f6e\u5c06\u5efa\u8baeXSQL\u5bf9\u6b64\u6570\u636e\u6e90\u7684\u67e5\u8be2\u4f7f\u7528\u4e0b\u63a8\u65b9\u5f0f\uff0c\u4f46\u662f\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u3002\u5f88\u591a\u60c5\u51b5\u4e0b\uff0cXSQL\u5e76\u4e0d\u4f1a\u4e0b\u63a8\uff0c\u4f8b\u5982\uff1a\u6570\u636e\u6e90\u67e5\u8be2\u8fd8\u5305\u542b\u6709\u5176\u4ed6\u6570\u636e\u6e90\u7684\u5b50\u67e5\u8be2\uff0c\u6216\u8005\u5f15\u7528\u4e86\u5916\u90e8\u67e5\u8be2\u7684\u522b\u540d\u3002 spark.xsql.datasource.$dataSource.schemas None \u7528\u4e8e\u5b9a\u4e49\u6570\u636e\u6e90\u4e2d\u8868\u7684Schema\u4fe1\u606f\u3002\u53ea\u9002\u7528\u4e8e\u65e0\u4e25\u683cSchema\u7684\u6570\u636e\u6e90\uff0c\u4f8b\u5982\uff1aRedis\u3001HBASE\u3001MongoDB spark.xsql.datasource.$dataSource.cache.level 1 \u7528\u4e8e\u6307\u5b9a\u6570\u636e\u6e90\u7684\u5143\u6570\u636e\u7f13\u5b58\u7ea7\u522b\uff0c1\u8868\u793aLevel One\uff0c2\u8868\u793aLevel Two\u3002 spark.xsql.datasource.$dataSource.cluster None \u7528\u4e8e\u5b9a\u4e49\u6570\u636e\u6e90\u4f18\u5148\u91c7\u7528\u7684Yarn\u96c6\u7fa4\u3002\u5982\u679c\u7528\u6237\u9996\u6b21\u63d0\u4ea4\u975e\u4e0b\u63a8\u7684\u4efb\u52a1\uff0c\u90a3\u4e48\u6b64\u4efb\u52a1\u5c06\u4f1a\u88ab\u63d0\u4ea4\u5230\u5bf9\u5e94\u7684Yarn\u96c6\u7fa4\u3002\u5982\u679c\u672a\u6307\u5b9a\u6b64\u914d\u7f6e\uff0c\u5bf9\u4e8eHive\u5c06\u9009\u62e9Hive\u5143\u6570\u636e\u670d\u52a1\u6240\u5728\u7684\u96c6\u7fa4\uff0c\u5176\u4ed6\u6570\u636e\u6e90\u5219\u4ecd\u7136\u9009\u62e9$XSQL_HOME/hadoopconf/yarn-site.xml\u6587\u4ef6\u6240\u914d\u7f6e\u7684Yarn\u96c6\u7fa4\u3002 spark.xsql.yarn.$clusterName None \u7528\u4e8e\u6307\u5b9a\u7528\u6237\u4f7f\u7528\u7684Yarn\u96c6\u7fa4\u7684\u540d\u79f0\u53ca\u76f8\u5173\u914d\u7f6e\u6587\u4ef6\u3002","title":"\u914d\u7f6e\u6e05\u5355"},{"location":"tutorial/configuration/#_2","text":"\u200b \u767d\u540d\u5355\u662f\u901a\u8fc7json\u683c\u5f0f\u7684\u914d\u7f6e\u6587\u4ef6\u8fdb\u884c\u914d\u7f6e\u7684\uff0c\u4e3a\u4fbf\u4e8e\u7528\u6237\u7406\u89e3\uff0c\u6211\u4eec\u6307\u5b9adefault\u6570\u636e\u6e90\u7684\u767d\u540d\u5355\u914d\u7f6e\u6587\u4ef6\u4e3ahive-whitelist.conf\uff1a spark.xsql.datasource.default.whitelist hive-whitelist.conf \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684hive-whitelist.conf\u7684\u914d\u7f6e\u5185\u5bb9\uff1a { default : { includes : [ tableA , tableB , tableC , tableD , tableE , tableF ], excludes : [ tableD ] } } default\u662f\u6570\u636e\u5e93\u540d\u79f0\u3002\u6570\u636e\u5e93\u7ea7\u522b\u53ea\u6709\u767d\u540d\u5355\uff0c\u800c\u6ca1\u6709\u9ed1\u540d\u5355\uff0c\u4e5f\u5c31\u662f\u8bf4XSQL\u4e2d\u53ea\u6709\u5728\u767d\u540d\u5355\u4e2d\u660e\u786e\u914d\u7f6e\u7684\u6570\u636e\u5e93\u624d\u662f\u53ef\u89c1\u7684\u3002\u6bcf\u4e2a\u6570\u636e\u5e93\u90fd\u53ef\u4ee5\u914d\u7f6eincludes\u548cexcludes\u4e24\u4e2a\u5c5e\u6027\uff0c\u5206\u522b\u8868\u793a\u767d\u540d\u5355\u548c\u9ed1\u540d\u5355\u3002\u5728\u767d\u540d\u5355\u4e2d\u5305\u62ec\u4e86table[A-F]\u51716\u5f20\u8868\uff0c\u540c\u65f6\u9ed1\u540d\u5355\u4e2d\u5305\u62ec\u4e86tableD\u4e00\u5f20\u8868\u3002\u5728XSQL\u4e2d\u9ed1\u540d\u5355\u62e5\u6709\u6700\u9ad8\u7684\u4f18\u5148\u7ea7\uff0c\u5c06\u4f1a\u4ece\u767d\u540d\u5355\u4e2d\u6e05\u695a\u8868\uff0c\u56e0\u6b64\u5728XSQL\u4e2d\u53ea\u6709table[A-D]\u3001tableE\u3001tableF\u51715\u5f20\u8868\u53ef\u89c1\u3002\u8868\u9ed8\u8ba4\u662f\u5c5e\u4e8e\u767d\u540d\u5355\u7684\uff0c\u6240\u4ee5\u5f53\u7528\u6237\u9700\u8981\u6570\u636e\u5e93\u4e2d\u7684\u6240\u6709\u8868\u90fd\u53ef\u89c1\u65f6\uff0c\u53ef\u4ee5\u4e0d\u914d\u7f6eincludes\u3002","title":"\u914d\u7f6e\u6570\u636e\u6e90\u5e93\u8868\u767d\u540d\u5355"},{"location":"tutorial/configuration/#nosqlschema","text":"\u200b \u6709\u4e9b\u7c7b\u578b\u7684\u6570\u636e\u6e90\u6ca1\u6709\u660e\u786e\u3001\u4e25\u683c\u7684Schema\u5b9a\u4e49\uff0cXSQL\u65e0\u6cd5\u901a\u8fc7\u8bbf\u95ee\u6570\u636e\u6e90\u5f97\u5230\u5404\u4e2a\u8868\u7684Schema\u4fe1\u606f\u3002\u4e3a\u4e86\u80fd\u591f\u63a5\u5165XSQL\uff0c\u9700\u8981\u7528\u6237\u624b\u52a8\u914d\u7f6e\u6570\u636e\u6e90\u7684Schema\u4fe1\u606f\u3002\u914d\u7f6e\u91c7\u7528\u4e86json\u683c\u5f0f\uff0c\u5c31\u50cf\u4e0b\u9762\u7684\u4f8b\u5b50\u4e00\u6837\uff1a { database_A : [{ table : table_A_1 , fields : [{ name : _id , type : object_Id , hidden : false }, { name : item , type : string , hidden : false }, { name : qty , type : int , hidden : false }, { name : tags , type : array string , hidden : false }, { name : dim_cm , type : array int , hidden : false } ] }, { table : table_A_2 , fields : [{ name : id , type : long , hidden : false }, { name : name , type : string , hidden : false }, { name : is_man , type : boolean , hidden : false }, { name : age , type : int , hidden : false }, { name : salary , type : double , hidden : false }, { name : format_salary , type : decimal(12,2) , hidden : false }, { name : graduation_time , type : date , hidden : false }, { name : birthday , type : string , hidden : false }, { name : score , type : decimal(5,1) , hidden : false } ] } ], database_B : [{ table : table_B_1 , fields : [{ name : _id , type : object_Id , hidden : false }, { name : VendorID , type : int , hidden : false }, { name : pickup_datetime , type : string , hidden : false }, { name : total_amount , type : double , hidden : false } ] }] } \u6b64\u5904\u4ee5MongoDB\u7684Schema\u4e3a\u4f8b\u3002\u5176\u4ed6\u6570\u636e\u6e90\u4e3b\u8981\u662f\u5b57\u6bb5\u5141\u8bb8\u7684\u7c7b\u578b\u4e0d\u540c\u3002","title":"\u914d\u7f6eNoSQL\u6570\u636e\u6e90\u7684Schema\u6587\u4ef6"},{"location":"tutorial/configuration/#_3","text":"\u6709\u65f6\u5019\uff0c\u7528\u6237\u7684\u6570\u636e\u6e90\u4f4d\u4e8e\u4e0d\u540c\u7684\u96c6\u7fa4\u73af\u5883\u4e2d\u3002\u4e3a\u4e86\u4f7f\u5f97Yarn\u5206\u914d\u7684\u8d44\u6e90\u4e0e\u6570\u636e\u4e4b\u95f4\u66f4\u52a0\u63a5\u8fd1\uff0c\u53ef\u4ee5\u4e3a\u6570\u636e\u6e90\u663e\u793a\u6307\u5b9aYarn\u96c6\u7fa4\u3002spark.xsql.yarn.$clusterName\u5c5e\u6027\u4e2d\u7684clusterName\u662f\u7528\u6237\u7ed9Yarn\u96c6\u7fa4\u8d77\u7684\u522b\u540d\uff0c\u5bf9\u5e94\u7684\u503c\u5fc5\u987b\u662f\u4e00\u4e2a\u6709\u6548\u7684\u5c5e\u6027\u914d\u7f6e\u6587\u4ef6\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3ayarn-cluster0\u7684Yarn\u96c6\u7fa4\uff0c\u5e76\u6307\u5b9a\u4e86\u5bf9\u5e94\u7684\u914d\u7f6e\u6587\u4ef6\u4e3a spark.xsql.yarn.cluster0 yarn-cluster0.conf yarn-cluster0.conf\u6587\u4ef6\u4e2d\u7684\u914d\u7f6e\u4fe1\u606f\u53ef\u80fd\u4e3a\uff1a spark.yarn.stagingDir hdfs://namenode.dfs.cluster0.yahoo.com:9000/home/spark/cache spark.hadoop.yarn.resourcemanager.cluster-id cluster0-yarn spark.hadoop.yarn.resourcemanager.zk-state-store.address m2.dfs.cluster0.qihoo.net:2181,m3.dfs.cluster0.yahoo.com:2181,m4.dfs.cluster0.yahoo.com:2181,m5.dfs.cluster0.yahoo.com:2181,m6.dfs.cluster0.yahoo.com:2181 spark.hadoop.yarn.resourcemanager.zk-address m2.dfs.cluster0.yahoo.com:2181,m3.dfs.cluster0.yahoo.com:2181,m4.dfs.cluster0.yahoo.com:2181,m5.dfs.cluster0.yahoo.com:2181,m6.dfs.cluster0.yahoo.com:2181 spark.hadoop.yarn.resourcemanager.zk-state-store.parent-path /cluster0/yarn/rmstore spark.hadoop.yarn.resourcemanager.hostname.rm1 m7.dfs.cluster0.yahoo.com spark.hadoop.yarn.resourcemanager.hostname.rm2 m8.dfs.cluster0.yahoo.com spark.hadoop.yarn.resourcemanager.scheduler.address.rm1 m7.dfs.cluster0.yahoo.com:8830 spark.hadoop.yarn.resourcemanager.resource-tracker.address.rm1 m7.dfs.cluster0.yahoo.com:8831 spark.hadoop.yarn.resourcemanager.address.rm1 m7.dfs.cluster0.yahoo.com:8832 spark.hadoop.yarn.resourcemanager.admin.address.rm1 m7.dfs.cluster0.yahoo.com:8833 spark.hadoop.yarn.resourcemanager.webapp.address.rm1 m7.dfs.cluster0.yahoo.com:8888 spark.hadoop.yarn.resourcemanager.ha.admin.address.rm1 m7.dfs.cluster0.yahoo.com:23142 spark.hadoop.yarn.resourcemanager.scheduler.address.rm2 m8.dfs.cluster0.yahoo.com:8830 spark.hadoop.yarn.resourcemanager.resource-tracker.address.rm2 m8.dfs.cluster0.yahoo.com:8831 spark.hadoop.yarn.resourcemanager.address.rm2 m8.dfs.cluster0.yahoo.com:8832 spark.hadoop.yarn.resourcemanager.admin.address.rm2 m8.dfs.cluster0.yahoo.com:8833 spark.hadoop.yarn.resourcemanager.webapp.address.rm2 m8.dfs.cluster0.yahoo.com:8888 spark.hadoop.yarn.resourcemanager.ha.admin.address.rm2 m8.dfs.cluster0.yahoo.com:23142 spark.hadoop.yarn.log.server.url http://m8.dfs.cluster0.yahoo.com:19888/jobhistory/logs","title":"\u9009\u62e9\u8fd0\u884c\u96c6\u7fa4"},{"location":"tutorial/configuration/#_4","text":"\u5f53\u5bf9\u6570\u636e\u6e90\u7684\u67e5\u8be2\u5b9e\u9645\u91c7\u7528\u4e86\u4e0b\u63a8\u65b9\u5f0f\u65f6\uff0cXSQL\u5c06\u5728\u7528\u6237\u672a\u6307\u5b9alimit\u65f6\uff0c\u9ed8\u8ba4\u4f1a\u52a0\u4e0alimit 10\u7684\u9650\u5236\u3002\u8fd9\u6837\u505a\u5f97\u76ee\u7684\u6709\u4e24\u70b9\uff1a \u9996\u5148\uff0cPushdown\u5b9e\u9645\u8fd0\u884c\u5728Driver\u8fdb\u7a0b\u4e2d\uff0cDriver\u7684\u5185\u5b58\u5f80\u5f80\u662f\u6709\u9650\u7684\u3002\u5982\u679c\u4e0d\u52a0\u4ee5\u9650\u5236\uff0c\u5c06\u6570GB\u751a\u81f3\u66f4\u591a\u7684\u6570\u636e\u8bfb\u53d6\u5230Driver\uff0c\u5c06\u4f1a\u5f15\u53d1XSQL\u7684\u5185\u5b58\u95ee\u9898\uff0c\u8b6c\u5982\uff1aGC\u9891\u7e41\u3001OOM\u3002 \u5176\u6b21\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u6570\u636e\u6e90\uff0c\u5982\u679c\u6ca1\u6709\u663e\u5f0f\u7684limit\u9650\u5236\uff0c\u6570\u636e\u6e90\u672c\u8eab\u4e5f\u6709\u9650\u5236\uff08\u4f8b\u5982Elasticsearch\u4f1a\u52a0\u4e0alimit 10\u7684\u9650\u5236\uff09\u3002 \u5982\u679c\u7528\u6237\u9700\u8981\u66f4\u591a\u7684\u8fd4\u56de\u6570\u636e\uff0c\u8bf7\u663e\u5f0f\u589e\u52a0limit\u8bed\u53e5\u3002\u76ee\u524dXSQL\u80fd\u591f\u63a5\u53d7\u7684limit\u7684\u6700\u5927\u503c\u662f10000\u3002","title":"\u4e0b\u63a8\u6267\u884c\u65f6\u7684\u6761\u6570\u9650\u5236"},{"location":"tutorial/configuration/#xsqlconf","text":"\u4e3a\u4e86\u9632\u6b62\u7528\u6237\u7684\u6570\u636e\u6e90\u8fde\u63a5\u5e10\u53f7\u5bc6\u7801\u6cc4\u9732\uff0cXSQL\u63d0\u4f9b\u4e86\u4f7f\u7528\u79c1\u6709xsql.conf\u7684\u914d\u7f6e\u65b9\u6cd5\uff1a spark.xsql.properties.file customer_name.conf spark.xsql.conf.dir /home/username/xxx/xx \u4e0e\u4e4b\u914d\u5408\u7684\u5728\u76ee\u5f55/home/username/xxx/xx\u4e0b\u521b\u5efacustomer_name.conf\uff0c\u5199\u5165\u9002\u5f53\u7684\u6570\u636e\u6e90\u8fde\u63a5\u4fe1\u606f\u3002\u6b64\u7c7b\u914d\u7f6e\u4e0d\u5efa\u8bae\u4fee\u6539\u5728spark-defaults.conf\u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u5b8c\u6574\u7684\u63d0\u4ea4\u547d\u4ee4\u5982\u4e0b\uff1a /usr/bin/hadoop/software/spark-xsql/bin/spark-xsql --conf spark.xsql.properties.file=customer_name.conf --conf spark.xsql.conf.dir=/home/username/xxx/xx","title":"\u4f7f\u7528\u79c1\u6709\u7684xsql.conf"},{"location":"tutorial/configuration/#sql","text":"\u5bf9\u4e8e\u4e00\u4e9b\u5b9a\u65f6\u4efb\u52a1\uff0c\u67e5\u8be2\u8bed\u53e5\u4e2d\u9700\u8981\u4f20\u5165\u968f\u65f6\u95f4\u53d8\u5316\u7684\u67e5\u8be2\u53d8\u91cf\uff0cXSQL\u540c\u6837\u63d0\u4f9b\u4e86\u8fd9\u6837\u7684\u529f\u80fd\uff0c\u9996\u5148\u770b\u4e0b\u9762\u7684\u793a\u4f8b\u63d0\u4ea4\u547d\u4ee4\uff1a /usr/bin/hadoop/software/spark-xsql/bin/spark-xsql --conf spark.key=value \u90a3\u4e48\uff0c\u5728\u4e4b\u540e\u7684\u67e5\u8be2\u8bed\u53e5\u53ef\u4ee5\u4ee5\u4e0b\u8868\u8fbe\u5f0f\uff1a select '${spark.key}' as date from example_table; \u6ce8\u610f\uff0c${}\u7b26\u53f7\u5fc5\u987b\u88ab\u5355\u5f15\u53f7\u6216\u53cc\u5f15\u53f7\u6240\u5305\u88f9\uff0c\u4e0d\u80fd\u591f\u72ec\u7acb\u5b58\u5728\uff0c\u5426\u5219\u4f1a\u8bed\u6cd5\u89e3\u6790\u62a5\u9519\u3002\u7531\u4e8eSparkConf\u8981\u6c42\u6240\u6709\u7684\u914d\u7f6e\u9879\u5fc5\u987b\u4ee5 spark. \u5f00\u5934\uff0c\u56e0\u6b64\\${}\u5185\u7684\u67e5\u8be2\u53d8\u91cf\u4e5f\u5fc5\u987b\u4ee5 spark. \u5f00\u5934\u3002","title":"\u4f7f\u7528\u5b57\u7b26\u4e32\u53d8\u91cf\u62fc\u63a5SQL\u67e5\u8be2"},{"location":"tutorial/configuration/#hbasedruid","text":"\u4e3a\u4e86\u63a7\u5236XSQL\u4f9d\u8d56jar\u5305\u7684\u6570\u91cf\uff0cXSQL\u9ed8\u8ba4\u4e0d\u5f00\u542f\u4f9d\u8d56\u8f83\u591a\u7684HBase\u6a21\u5757\u548cDruid\u6a21\u5757\uff0c\u5f53\u9700\u8981\u4f7f\u7528\u8fd9\u4e9b\u6a21\u5757\u65f6\uff0c\u53ef\u4ee5\u6dfb\u52a0\u4ee5\u4e0b\u914d\u7f6e\uff1a spark.driver.extraClassPath /usr/bin/hadoop/software/spark-xsql/hbase/*:/usr/bin/hadoop/software/spark-xsql/druid/* spark.xsql.extraDatasourceManagers org.apache.spark.sql.xsql.manager.HBaseManager,org.apache.spark.sql.xsql.manager.DruidManager","title":"\u5f00\u542fHBase\u6216Druid\u6570\u636e\u6e90"},{"location":"tutorial/configuration/#hive","text":"\u5bf9\u4e8eXSQL\u5e26\u6743\u9650\u63a7\u5236\u7684\u90e8\u7f72\u7248\u672c\uff0c\u8981\u60f3\u5f00\u542f\u6743\u9650\u63a7\u5236\uff0c\u8fd8\u9700\u8981\u6dfb\u52a0\u989d\u5916\u7684\u914d\u7f6e\uff1a spark.sql.extensions org.apache.ranger.authorization.spark.authorizer.RangerSparkSQLExtension hive-site.mxl\u4e5f\u9700\u8981\u6dfb\u52a0\u5982\u4e0b\u914d\u7f6e\uff1a property name hive.security.authorization.enabled /name value false /value /property property name hive.security.authorization.manager /name value org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory /value /property property name hive.security.authenticator.manager /name value org.apache.hadoop.hive.ql.security.SessionStateUserAuthenticator /value /property property name hive.conf.restricted.list /name value hive.security.authorization.enabled,hive.security.authorization.manager,hive.security.authenticator.manager /value /property","title":"\u5f00\u542fhive\u6743\u9650\u63a7\u5236"},{"location":"tutorial/configuration/#_5","text":"\u5bf9\u4e8eXSQL\u5e26\u81ea\u9002\u5e94\u6267\u884c\u7684\u90e8\u7f72\u7248\u672c\uff0c\u8981\u60f3\u5f00\u542f\u81ea\u9002\u5e94\u6267\u884c\uff0c\u8fd8\u9700\u8981\u6dfb\u52a0\u989d\u5916\u7684\u914d\u7f6e\uff1a spark.sql.adaptive.enabled true spark.sql.adaptive.shuffle.targetPostShuffleInputSize 134217728 spark.sql.adaptive.join.enabled true spark.sql.adaptive.skewedJoin.enabled true spark.sql.adaptive.skewedPartitionFactor 5 spark.sql.adaptive.skewedPartitionSizeThreshold 134217728 spark.sql.adaptive.skewedPartitionRowCountThreshold 20000000 spark.shuffle.statistics.verbose true spark.shuffle.service.enabled false spark.dynamicAllocation.enabled false spark.executor.instances 150","title":"\u5f00\u542f\u81ea\u9002\u5e94\u6267\u884c"},{"location":"tutorial/rest-api/","text":"Livy REST API GET /sessions Returns all the active interactive sessions. Request Parameters Name Description Type from The start index to fetch sessions int size Number of sessions to fetch int Response Body Name Description Type from The start index to fetch sessions int total Number of sessions to fetch int sessions Session list list POST /sessions Creates a new interactive Scala, Python, or R shell in the cluster. Request Body Name Description Type kind The session kind [1] session kind proxyUser User to impersonate when starting the session string jars jars to be used in this session List of string pyFiles Python files to be used in this session List of string files files to be used in this session List of string driverMemory Amount of memory to use for the driver process string driverCores Number of cores to use for the driver process int executorMemory Amount of memory to use per executor process string executorCores Number of cores to use for each executor int numExecutors Number of executors to launch for this session int archives Archives to be used in this session List of string queue The name of the YARN queue to which submitted string name The name of this session string conf Spark configuration properties Map of key=val heartbeatTimeoutInSecond Timeout in second to which session be orphaned int 1 : Starting with version 0.5.0-incubating this field is not required. To be compatible with previous versions users can still specify this with spark, pyspark or sparkr, implying that the submitted code snippet is the corresponding kind. Response Body The created Session . GET /sessions/{sessionId} Returns the session information. Response Body The Session . GET /sessions/{sessionId}/state Returns the state of session Response Name Description Type id Session id int state The current state of session string DELETE /sessions/{sessionId} Kills the Session job. GET /sessions/{sessionId}/log Gets the log lines from this session. Request Parameters Name Description Type from Offset int size Max number of log lines to return int Response Body Name Description Type id The session id int from Offset from start of log int size Max number of log lines int log The log lines list of strings GET /sessions/{sessionId}/statements Returns all the statements in a session. Response Body Name Description Type statements statement list list POST /sessions/{sessionId}/statements Runs a statement in a session. Request Body Name Description Type code The code to execute string kind The kind of code to execute [2] code kind 2 : If session kind is not specified or the submitted code is not the kind specified in session creation, this field should be filled with correct kind. Otherwise Livy will use kind specified in session creation as the default code kind. Response Body The statement object. GET /sessions/{sessionId}/statements/{statementId} Returns a specified statement in a session. Response Body The statement object. POST /sessions/{sessionId}/statements/{statementId}/cancel Cancel the specified statement in this session. Response Body Name Description Type msg is always \"cancelled\" string POST /sessions/{sessionId}/completion Runs a statement in a session. Request Body Name Description Type code The code for which completion proposals are requested string kind The kind of code to execute [2] code kind cursor cursor position to get proposals string Response Body Name Description Type candidates Code completions proposals array[string] GET /batches Returns all the active batch sessions. Request Parameters Name Description Type from The start index to fetch sessions int size Number of sessions to fetch int Response Body Name Description Type from The start index of fetched sessions int total Number of sessions fetched int sessions Batch list list POST /batches Request Body Name Description Type file File containing the application to execute path (required) proxyUser User to impersonate when running the job string className Application Java/Spark main class string args Command line arguments for the application list of strings jars jars to be used in this session list of strings pyFiles Python files to be used in this session list of strings files files to be used in this session list of strings driverMemory Amount of memory to use for the driver process string driverCores Number of cores to use for the driver process int executorMemory Amount of memory to use per executor process string executorCores Number of cores to use for each executor int numExecutors Number of executors to launch for this session int archives Archives to be used in this session List of string queue The name of the YARN queue to which submitted string name The name of this session string conf Spark configuration properties Map of key=val Response Body The created Batch object. GET /batches/{batchId} Returns the batch session information. Response Body The Batch . GET /batches/{batchId}/state Returns the state of batch session Response Name Description Type id Batch session id int state The current state of batch session string DELETE /batches/{batchId} Kills the Batch job. GET /batches/{batchId}/log Gets the log lines from this batch. Request Parameters Name Description Type from Offset int size Max number of log lines to return int Response Body Name Description Type id The batch id int from Offset from start of log int size Number of log lines int log The log lines list of strings REST Objects Session A session represents an interactive shell. Name Description Type id The session id int appId The application id of this session string owner Remote user who submitted this session string proxyUser User to impersonate when running string kind Session kind (spark, pyspark, or sparkr) session kind log The log lines list of strings state The session state string appInfo The detailed application info Map of key=val Session State Value Description not_started Session has not been started starting Session is starting idle Session is waiting for input busy Session is executing a statement shutting_down Session is shutting down error Session errored out dead Session has exited killed Session has been killed success Session is successfully stopped Session Kind Value Description spark Interactive Scala Spark session pyspark Interactive Python Spark session sparkr Interactive R Spark session sql Interactive SQL Spark session Starting with version 0.5.0-incubating, each session can support all four Scala, Python and R interpreters with newly added SQL interpreter. The kind field in session creation is no longer required, instead users should specify code kind (spark, pyspark, sparkr or sql) during statement submission. To be compatible with previous versions, users can still specify kind in session creation, while ignoring kind in statement submission. Livy will then use this session kind as default kind for all the submitted statements. If users want to submit code other than default kind specified in session creation, users need to specify code kind (spark, pyspark, sparkr or sql) during statement submission. pyspark To change the Python executable the session uses, Livy reads the path from environment variable PYSPARK_PYTHON (Same as pyspark). Starting with version 0.5.0-incubating, session kind \"pyspark3\" is removed, instead users require to set PYSPARK_PYTHON to python3 executable. Like pyspark, if Livy is running in local mode, just set the environment variable. If the session is running in yarn-cluster mode, please set spark.yarn.appMasterEnv.PYSPARK_PYTHON in SparkConf so the environment variable is passed to the driver. Statement A statement represents the result of an execution statement. Name Description Type id The statement id integer code The execution code string state The execution state statement state output The execution output statement output Statement State Value Description waiting Statement is enqueued but execution hasn't started running Statement is currently running available Statement has a response ready error Statement failed cancelling Statement is being cancelling cancelled Statement is cancelled Statement Output Name Description Type status Execution status string execution_count A monotonically increasing number integer data Statement output An object mapping a mime type to the result. If the mime type is ``application/json``, the value is a JSON value. Batch Name Description Type id The session id int appId The application id of this session string appInfo The detailed application info Map of key=val log The log lines list of strings state The batch state string","title":"REST API"},{"location":"tutorial/rest-api/#livy-rest-api","text":"","title":"Livy REST API"},{"location":"tutorial/rest-api/#get-sessions","text":"Returns all the active interactive sessions.","title":"GET /sessions"},{"location":"tutorial/rest-api/#post-sessions","text":"Creates a new interactive Scala, Python, or R shell in the cluster.","title":"POST /sessions"},{"location":"tutorial/rest-api/#get-sessionssessionid","text":"Returns the session information.","title":"GET /sessions/{sessionId}"},{"location":"tutorial/rest-api/#get-sessionssessionidstate","text":"Returns the state of session","title":"GET /sessions/{sessionId}/state"},{"location":"tutorial/rest-api/#delete-sessionssessionid","text":"Kills the Session job.","title":"DELETE /sessions/{sessionId}"},{"location":"tutorial/rest-api/#get-sessionssessionidlog","text":"Gets the log lines from this session.","title":"GET /sessions/{sessionId}/log"},{"location":"tutorial/rest-api/#get-sessionssessionidstatements","text":"Returns all the statements in a session.","title":"GET /sessions/{sessionId}/statements"},{"location":"tutorial/rest-api/#post-sessionssessionidstatements","text":"Runs a statement in a session.","title":"POST /sessions/{sessionId}/statements"},{"location":"tutorial/rest-api/#get-sessionssessionidstatementsstatementid","text":"Returns a specified statement in a session.","title":"GET /sessions/{sessionId}/statements/{statementId}"},{"location":"tutorial/rest-api/#post-sessionssessionidstatementsstatementidcancel","text":"Cancel the specified statement in this session.","title":"POST /sessions/{sessionId}/statements/{statementId}/cancel"},{"location":"tutorial/rest-api/#post-sessionssessionidcompletion","text":"Runs a statement in a session.","title":"POST /sessions/{sessionId}/completion"},{"location":"tutorial/rest-api/#get-batches","text":"Returns all the active batch sessions.","title":"GET /batches"},{"location":"tutorial/rest-api/#post-batches","text":"","title":"POST /batches"},{"location":"tutorial/rest-api/#get-batchesbatchid","text":"Returns the batch session information.","title":"GET /batches/{batchId}"},{"location":"tutorial/rest-api/#get-batchesbatchidstate","text":"Returns the state of batch session","title":"GET /batches/{batchId}/state"},{"location":"tutorial/rest-api/#delete-batchesbatchid","text":"Kills the Batch job.","title":"DELETE /batches/{batchId}"},{"location":"tutorial/rest-api/#get-batchesbatchidlog","text":"Gets the log lines from this batch.","title":"GET /batches/{batchId}/log"},{"location":"tutorial/rest-api/#rest-objects","text":"","title":"REST Objects"},{"location":"tutorial/rest-api/#session","text":"A session represents an interactive shell. Name Description Type id The session id int appId The application id of this session string owner Remote user who submitted this session string proxyUser User to impersonate when running string kind Session kind (spark, pyspark, or sparkr) session kind log The log lines list of strings state The session state string appInfo The detailed application info Map of key=val","title":"Session"},{"location":"tutorial/rest-api/#statement","text":"A statement represents the result of an execution statement. Name Description Type id The statement id integer code The execution code string state The execution state statement state output The execution output statement output","title":"Statement"},{"location":"tutorial/rest-api/#batch","text":"Name Description Type id The session id int appId The application id of this session string appInfo The detailed application info Map of key=val log The log lines list of strings state The batch state string","title":"Batch"},{"location":"tutorial/syntax/","text":"XSQL\u652f\u6301SQL2003\u6807\u51c6\uff0c\u5e76\u4e14\u80fd\u591f\u8fd0\u884c\u6240\u670999 TPC-DS\u4e2d\u7684\u67e5\u8be2\u3002\u66f4\u4e3a\u7a81\u51fa\u7684\u662f\uff0cXSQL\u5df2\u7ecf\u652f\u6301\uff1a \u5bf9ANSI-SQL\u548cHive QL\u8fdb\u884c\u652f\u6301\u7684\u672c\u5730SQL\u89e3\u6790\u5668\u3002 \u672c\u5730DDL\u547d\u4ee4\u7684\u5b9e\u73b0\u3002 \u5b50\u67e5\u8be2\u7684\u652f\u6301\uff0c\u5305\u62ec\uff1a \u4e0d\u76f8\u5173\u7684\u6807\u91cf\u5b50\u67e5\u8be2\u3002 \u76f8\u5173\u7684\u6807\u91cf\u5b50\u67e5\u8be2\u3002 \u8c13\u8bcdIn\u4e2d\u7684\u5b50\u67e5\u8be2\uff08\u5728WHERE/HAVING\u4ece\u53e5\u4e2d\uff09\u3002 \u8c13\u8bcdNot In\u4e2d\u7684\u5b50\u67e5\u8be2\uff08\u5728WHERE/HAVING\u4ece\u53e5\u4e2d\uff09\u3002 \u8c13\u8bcdExists\u4e2d\u7684\u5b50\u67e5\u8be2\uff08\u5728WHERE/HAVING\u4ece\u53e5\u4e2d\uff09\u3002 \u8c13\u8bcdNot Exists\u4e2d\u7684\u5b50\u67e5\u8be2\uff08\u5728WHERE/HAVING\u4ece\u53e5\u4e2d\uff09\u3002 \u89c6\u56fe\u7684\u652f\u6301\u3002 \u9664\u4e86\u4ee5\u4e0a\u7279\u70b9\u5916\uff0cXSQL\u7531\u4e8e\u5f15\u5165\u4e86DataSource\u7684\u6982\u5ff5\uff0c\u56e0\u6b64XSQL\u589e\u52a0\u4e86\u4e00\u4e9bSQL2003\u4e2d\u4e0d\u5b58\u5728\u7684\u8bed\u6cd5\uff0c\u5e76\u6269\u5c55\u4e86\u4e00\u4e9bSQL2003\u7684\u8bed\u6cd5\u3002\u4e0b\u9762\u5c06\u57fa\u4e8e Getting Started \u4e2d\u7684MySQL\u5b9e\u4f8b\uff0c\u5bf9\u8fd9\u4e9b\u989d\u5916\u7684\u8bed\u6cd5\u8fdb\u884c\u4ecb\u7ecd\u3002 DataSource\u76f8\u5173\u8bed\u6cd5 \u200b \u4e3a\u4e86\u4fbf\u4e8e\u7528\u6237\u67e5\u770bXSQL\u4e2d\u76ee\u524d\u5df2\u7ecf\u914d\u7f6e\u53ef\u8bbf\u95ee\u7684DataSource\uff0c\u6211\u4eec\u589e\u52a0\u4e86\u4ee5\u4e0b\u547d\u4ee4\uff1a show datasources; Single DataSource \u5728XSQL\u4e2d\u6267\u884c\u6b64DDL\u8bed\u53e5\uff0c\u5c06\u8f93\u51fa\u6bcf\u4e2a\u6570\u636e\u6e90\u5728xsql.conf\u4e2d\u914d\u7f6e\u7684\u540d\u79f0\uff1a spark-xsql show datasources; 18/10/29 18:51:23 INFO SparkXSQLShell: current SQL: show datasources 18/10/29 18:51:23 WARN SparkXSQLShell: hive.cli.print.header not configured, so doesn't print colum's name. default Time taken: 0.039 s spark-xsql Multi DataSource \u6211\u4eec\u6682\u65f6\u5148\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u9000\u51faXSQL\uff1a exit; \u6211\u4eec\u5728xsql.conf\u914d\u7f6e\u4e2d\u589e\u52a0\u4e00\u4e2aElasticsearch\u6570\u636e\u6e90\uff0c\u547d\u540d\u4e3amyes\u3002\u73b0\u5728\u518d\u6b21\u8fdb\u5165XSQL\u547d\u4ee4\u884c\uff0c\u5e76\u518d\u6b21\u67e5\u770b\u6709\u54ea\u4e9b\u6570\u636e\u6e90\uff1a spark-xsql show datasources; 18/10/29 19:26:37 INFO SparkXSQLShell: current SQL: show datasources 18/10/29 19:26:37 WARN SparkXSQLShell: hive.cli.print.header not configured, so doesn't print colum's name. myes default Time taken: 0.02 s spark-xsql Current DataSource \u200b \u5728 Configurations \u4e2d\u66fe\u7ecf\u4ecb\u7ecd\u8fc7spark.xsql.default.datasource\u5c5e\u6027\uff0c\u8be5\u5c5e\u6027\u7684\u9ed8\u8ba4\u503c\u662fdefault\uff0c\u7528\u4e8e\u6307\u5b9a\u9ed8\u8ba4\u7684\u5f53\u524d\u6570\u636e\u6e90\u3002\u5047\u5982\u6211\u4eec\u73b0\u5728\u7684\u5f53\u524d\u6570\u636e\u6e90\u5c31\u662fdefault\uff0c\u90a3\u4e48\u6267\u884c\u7684\u6240\u6709SQL\uff0c\u90fd\u9ed8\u8ba4\u5728\u5f53\u524d\u6570\u636e\u6e90\u4e2d\uff0c\u9664\u975e\u5728SQL\u4e2d\u660e\u786e\u6307\u5b9a\u4e86\u6570\u636e\u6e90\u3002 \u200b \u6b64\u5904\u4ee5\u5c55\u793aDatabase\u6e05\u5355\u4e3a\u4f8b\uff0c\u5982\u679c\u53ea\u8f93\u5165\u4e86\uff1a show databases; \u90a3\u4e48\uff0c\u5c55\u793a\u7684\u662f\u6570\u636e\u6e90myes\u4e2d\u7684Database\u6e05\u5355\uff0c\u8fd8\u662f\u6570\u636e\u6e90default\u4e2d\u7684Database\u6e05\u5355\uff1fXSQL\u5728\u7528\u6237\u672a\u660e\u786e\u6307\u5b9aDataSource\u7684\u60c5\u51b5\u4e0b\uff0c\u5c06\u5728\u5f53\u524d\u6570\u636e\u6e90\u4e2d\u3002\u56e0\u6b64\uff0c\u5c06\u5c55\u793a\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a spark-xsql show databases; 18/10/29 15:23:44 INFO SparkXSQLShell: spark.enable.hiverc:true 18/10/29 15:23:44 INFO SparkXSQLShell: current SQL: show databases 18/10/29 15:23:48 WARN SparkXSQLShell: hive.cli.print.header not configured, so doesn't print colum's name. default MYSQL mysqltest Time taken: 0.028 s spark-xsql \u5373default\u6570\u636e\u6e90\u4e2d\u7684Database\u6e05\u5355\u3002 \u200b \u6211\u6dfb\u52a0\u7684\u6570\u636e\u6e90myes\u4e2d\u6709xitong_xsql_test\u3001yarn_use_ms_2018\u548cxsql_test\u4e09\u5f20\u8868\uff0c\u90a3\u4e48\u5982\u4f55\u5c55\u793a\u5b83\u4eec\u5462\uff1f\u53ef\u4ee5\u589e\u52a0DataSource\u8fdb\u884c\u9650\u5b9a\uff1a show databases [In|From] myes; \u4f7f\u7528\u4ee5\u4e0a\u547d\u4ee4\uff0c\u5c06\u5f97\u5230\u7c7b\u4f3c\u4e0b\u9762\u7684\u8f93\u51fa\uff1a spark-xsql show databases in myes; 18/10/30 10:27:28 INFO SparkXSQLShell: current SQL: show databases in myes 18/10/30 10:27:28 WARN SparkXSQLShell: hive.cli.print.header not configured, so doesn't print colum's name. myes ELASTICSEARCH xitong_xsql_test myes ELASTICSEARCH yarn_use_ms_2018 myes ELASTICSEARCH xsql_test Time taken: 0.084 s spark-xsql \u6216\u8005\uff1a spark-xsql show databases from myes; 18/10/30 10:30:27 INFO SparkXSQLShell: current SQL: show databases from myes 18/10/30 10:30:27 WARN SparkXSQLShell: hive.cli.print.header not configured, so doesn't print colum's name. myes ELASTICSEARCH xitong_xsql_test myes ELASTICSEARCH yarn_use_ms_2018 myes ELASTICSEARCH xsql_test Time taken: 0.035 s spark-xsql \u5176\u4ed6SQL\u90fd\u6709\u7c7b\u4f3c\u7684\u5f53\u524d\u6570\u636e\u6e90\u8bed\u4e49\u3002 Current Database \u200b \u540cMySQL\u6216Hive\u76f8\u7c7b\u4f3c\uff0cXSQL\u4e5f\u63d0\u4f9b\u4e86\u5f53\u524d\u7684Database\u3002\u5728 Configurations \u4e2d\u66fe\u7ecf\u4ecb\u7ecd\u8fc7spark.xsql.default.database\u5c5e\u6027\uff0c\u8be5\u5c5e\u6027\u7684\u9ed8\u8ba4\u503c\u662fdefault\uff0c\u7528\u4e8e\u6307\u5b9a\u9ed8\u8ba4\u7684\u5f53\u524d\u6570\u636e\u5e93\u3002\u5047\u5982\u6211\u4eec\u73b0\u5728\u7684\u5f53\u524d\u6570\u636e\u6e90\u4f9d\u7136\u662fdefault\uff0c\u5f53\u524d\u6570\u636e\u5e93\u662fmysqltest\uff0c\u90a3\u4e48\u6267\u884c\u7684\u6240\u6709SQL\uff0c\u90fd\u9ed8\u8ba4\u5728\u5f53\u524d\u6570\u636e\u6e90\u7684\u5f53\u524d\u6570\u636e\u5e93\u4e2d\uff0c\u9664\u975e\u5728SQL\u4e2d\u660e\u786e\u6307\u5b9a\u4e86\u6570\u636e\u6e90\u548c\u6570\u636e\u5e93\u3002 \u200b \u6b64\u5904\u4ee5\u5c55\u793aTable\u6e05\u5355\u4e3a\u4f8b\uff0c\u5982\u679c\u53ea\u8f93\u5165\u4e86\uff1a show tables; \u6839\u636e Current DataSource \u5c0f\u8282\u7684\u4ecb\u7ecd\uff0c\u5f53\u524d\u6570\u636e\u6e90\u4e3adefault\uff0c\u56e0\u6b64\u67e5\u770b\u7684\u5fc5\u7136\u662fdefault\u6570\u636e\u6e90\u4e2d\u67d0\u4e2aDatabase\u4e2d\u7684Table\u6e05\u5355\u3002\u7531\u4e8e\uff0c\u5f53\u524d\u6570\u636e\u5e93\u662fmysqltest\uff0c\u56e0\u6b64\u5c06\u5c55\u793a\u51famysqltest\u4e2d\u7684Table\u6e05\u5355\uff1a spark-xsql show tables; 18/10/30 11:25:11 INFO SparkXSQLShell: current SQL: show tables 18/10/30 11:25:11 WARN SparkXSQLShell: hive.cli.print.header not configured, so doesn't print colum's name. default mysqltest activities false default mysqltest course false default mysqltest geonames false default mysqltest geonames_small false default mysqltest person false default mysqltest taxis false default mysqltest taxis_type false default mysqltest test123 false Time taken: 0.013 s spark-xsql \u5982\u679c\u7528\u6237\u4e0d\u60f3\u901a\u8fc7use\u6765\u5207\u6362\u5f53\u524d\u6570\u636e\u6e90\u548c\u6570\u636e\u5e93\uff0c\u4f46\u662f\u53c8\u60f3\u67e5\u770b\u6570\u636e\u6e90myes\u4e2d\u6570\u636e\u5e93xsql_test\u7684Table\u6e05\u5355\uff0c\u90a3\u4e48\u8be5\u5982\u4f55\u64cd\u4f5c\uff1f\u53ef\u4ee5\u589e\u52a0DataSource\u548cDatabase\u8fdb\u884c\u9650\u5b9a\uff1a show tables [In|From] myes.xsql_test; \u4f7f\u7528\u4ee5\u4e0a\u547d\u4ee4\uff0c\u5c06\u5f97\u5230\u7c7b\u4f3c\u4e0b\u9762\u7684\u8f93\u51fa\uff1a spark-xsql show tables in myes.xsql_test; 18/10/30 11:29:56 INFO SparkXSQLShell: current SQL: show tables in myes.xsql_test 18/10/30 11:29:56 WARN SparkXSQLShell: hive.cli.print.header not configured, so doesn't print colum's name. myes xsql_test city false myes xsql_test class_room false myes xsql_test doc false myes xsql_test es_test false myes xsql_test user false Time taken: 0.03 s spark-xsql \u6216\u8005\uff1a spark-xsql show tables from myes.xsql_test; 18/10/30 11:29:56 INFO SparkXSQLShell: current SQL: show tables in myes.xsql_test 18/10/30 11:29:56 WARN SparkXSQLShell: hive.cli.print.header not configured, so doesn't print colum's name. myes xsql_test city false myes xsql_test class_room false myes xsql_test doc false myes xsql_test es_test false myes xsql_test user false Time taken: 0.03 s spark-xsql Current DataSource\u4e0eCurrent Database\u5bf9SQL\u7684\u5f71\u54cd \u8fd9\u91cc\uff0c\u6211\u4eec\u518d\u6b21\u5f3a\u8c03\u5f53\u524d\u6570\u636e\u6e90\u662f default \uff0c\u5f53\u524d\u6570\u636e\u5e93\u662f mysqltest \uff0c\u7136\u540e\u5bf9\u5404\u79cdSQL\u4e0eCurrent DataSource\u53caCurrent Database\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u901a\u8fc7\u4e00\u4e2a\u8868\u683c\u6765\u8bf4\u660e\uff1a \u4e0d\u6307\u5b9aDataSource\u7684SQL \u7b49\u6548SQL use mysqltest use default.mysqltest use myes.xsql_test use myes.xsql_test show databases show databases [in|from] default show databases [in|from] myes show databases [in|from] myes show tables show tables [in|from] default.mysqltest show tables [in|from] mysqltest show tables [in|from] default.mysqltest show tables [in|from] myes.xsql_test show tables [in|from] myes.xsql_test create table test (key String,value String) ... create table default.mysqltest.test (key String,value String) ... create table mysqltest.test (key String,value String) ... create table default.mysqltest.test (key String,value String) ... create table myes.xsql_test.test (key String,value String) ... create table myes.xsql_test.test (key String,value String) ... select * from course select * from default.mysqltest.course select * from mysqltest.course select * from default.mysqltest.course select * from myes.xsql_test.city select * from myes.xsql_test.city XSQL\u652f\u6301\u7684\u5404\u79cd\u6570\u636e\u6e90\uff0c\u6240\u80fd\u652f\u6301\u7684SQL\u8bed\u6cd5\u4e0d\u540c\uff0c\u5177\u4f53\u8bf7\u9605\u8bfb\u5404\u4e2a\u6570\u636e\u6e90\u5bf9SQL\u7684\u4ecb\u7ecd\u3002 Create table\u8bed\u6cd5\uff1a\u521b\u5efa\u7a7a\u7684\u6570\u636e\u6e90\u8868 \u200b XSQL\u5c3d\u91cf\u5c06\u5404\u79cd\u5f02\u6784\u6570\u636e\u6e90\u7684\u8868\u521b\u5efa\u8bed\u6cd5\u7edf\u4e00\u8d77\u6765\u3002\u4f46\u662f\u5404\u79cd\u6570\u636e\u6e90\u5929\u751f\u652f\u6301\u7684create table\u8bed\u6cd5\u5c31\u662f\u4e0d\u540c\u7684\uff0c\u6bd4\u5982Hive\u7684\u7c7b\u4f3c\u4e8e\u4e0b\u9762\u8fd9\u6837\uff1a create table test ( key String, value String, other String ) ROW FORMAT DELIMITED FIELDS TERMINATED BY '\\t' STORED AS TEXTFILE \u4f46\u662f\uff0cMySQL\u7684\u5219\u662f\uff1a CREATE TABLE person ( id int NOT NULL AUTO_INCREMENT, name varchar(8), birthday datetime, CONSTRAINT pk__person PRIMARY KEY (id) ) \u4e24\u8005\u652f\u6301\u7684\u6570\u636e\u7c7b\u578b\u9996\u5148\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u6b64\u5916\u8bed\u6cd5\u4e0a\u4e5f\u6709\u5dee\u5f02\uff08\u6bd4\u5982Hive\u53ef\u4ee5\u6307\u5b9a\u884c\u683c\u5f0f\uff0c\u800cMySQL\u53ef\u4ee5\u652f\u6301\u81ea\u589e\u4e3b\u952e\uff09\u3002 \u8fd8\u6709\u4e9b\u6570\u636e\u6e90\u4e0d\u652f\u6301SQL\u6216\u8005\u652f\u6301\u7684SQL\u975e\u5e38\u6709\u9650\uff0c\u56e0\u6b64\u4ece\u5e95\u5c42\u5c31\u51b3\u5b9a\u4e86XSQL\u63d0\u4f9b\u7684create table\u8bed\u6cd5\u56e0\u6570\u636e\u6e90\u7684\u4e0d\u540c\u800c\u4e0d\u540c\u3002XSQL\u79cd\u521b\u5efaHive\u4e4b\u5916\u7684\u5176\u4ed6\u6570\u636e\u6e90\u7684\u8868\u65f6\uff0c\u9700\u8981\u6307\u5b9a\u6570\u636e\u6e90\u3002 \u4ee5MySQL\u4e3a\u4f8b\uff0c\u4f7f\u7528XSQL\u521b\u5efa\u8868\u7684SQL\u662f\uff1a CREATE TABLE person ( id int NOT NULL AUTO_INCREMENT, name varchar(8), birthday datetime, CONSTRAINT pk__person PRIMARY KEY (id) ) using mysql \u53ef\u4ee5\u770b\u5230\u521b\u5efaMySQL\u8868\u65f6\uff0c\u5728using\u540e\u8ddf\u4e86\"mysql\"\u8fd9\u4e2a\u6570\u636e\u6e90\u6807\u8bc6\u3002\u90a3\u4e48\u5176\u4ed6\u7c7b\u578b\u7684\u6570\u636e\u6e90\u9700\u8981\u8ddf\u4ec0\u4e48\u6807\u8bc6\u5462\uff1f\u8bf7\u770b\u4e0b\u8868\uff1a \u5404\u6570\u636e\u6e90\u5bf9\u5e94using\u6807\u8bc6\u8868 \u5e8f\u53f7 \u6570\u636e\u6e90\u7c7b\u578b \u6570\u636e\u6e90\u6807\u8bc6 \u5907\u6ce8 1 Hive - \u64cd\u4f5chive\u6570\u636e\u6e90\u4e0d\u9700\u8981using 2 MySQL mysql 3 Elasticsearch es 4 MongoDB mongo 5 HBASE hbase 6 Redis redis Redis\u7684create table\u6682\u672a\u5b9e\u73b0 7 Druid druid Druid\u7684create table\u6682\u672a\u5b9e\u73b0 8 Kafka kafka Kafka\u7684create table\u6682\u672a\u5b9e\u73b0 9 Oracle\uff08Pending\uff09 - 10 Clickhouse\uff08Pending\uff09 - CTAS\u8bed\u6cd5\uff1a\u4f7f\u7528\u67e5\u8be2\u7ed3\u679c\u521b\u5efa\u6570\u636e\u6e90\u8868 XSQL\u76ee\u524d\u652f\u6301\u5c06select\u67e5\u8be2\u7ed3\u679c\u76f4\u63a5\u521b\u5efa\u4e3ahive\u8868\u6216mysql\u8868\uff0c\u5bf9\u5e94\u547d\u4ee4\u5982\u4e0b\uff1a //\u67e5\u8be2\u7ed3\u679c\u521b\u5efa\u4e3ahive\u8868 create table dst_ds.dst_db.dst_tb as select * from src_ds.src_db.dst_tb; //\u67e5\u8be2\u7ed3\u679c\u521b\u5efa\u4e3amysql\u8868 create table dst_ds.dst_db.dst_tb using mysql as select * from src_ds.src_db.dst_tb; Insert into\u8bed\u6cd5\uff1a\u5c06\u67e5\u8be2\u7ed3\u679c\u6dfb\u52a0\u5230\u5df2\u5b58\u5728\u7684\u6570\u636e\u6e90\u8868 XSQL\u76ee\u524d\u652f\u6301\u5c06select\u67e5\u8be2\u7ed3\u679c\u76f4\u63a5\u6dfb\u52a0\u5230hive\u8868\u6216mysql\u8868\uff0c\u5bf9\u5e94\u547d\u4ee4\u5982\u4e0b\uff1a //\u67e5\u8be2\u7ed3\u679c\u8ffd\u52a0\u5230hive\u8868 insert into (table)? dst_table select * from src_table; //\u67e5\u8be2\u7ed3\u679c\u8ffd\u52a0\u5230mysql\u8868 insert into (table)? dst_table using mysql select * from src_table; //\u4f7f\u7528\u67e5\u8be2\u7ed3\u679c\u66ff\u6362hive\u8868 insert overwrite table dst_table select * from src_table; //\u4f7f\u7528\u67e5\u8be2\u7ed3\u679c\u66ff\u6362mysql\u8868 insert overwrite table dst_table using mysql select * from src_table; Insert overwrite directory\u8bed\u6cd5\uff1a\u8f93\u51fa\u5230hdfs\u76ee\u5f55\u6216\u672c\u5730\u78c1\u76d8 XSQL\u652f\u6301\u5c06select\u67e5\u8be2\u7ed3\u679c\u76f4\u63a5\u8f93\u51fa\u5230hdfs\u76ee\u5f55\u6216\u672c\u5730\u78c1\u76d8\u76ee\u5f55\uff0c\u5bf9\u5e94\u547d\u4ee4\u5982\u4e0b\uff1a //\u5c06\u67e5\u8be2\u7ed3\u679c\u8f93\u51fa\u5230hdfs\u76ee\u5f55 insert overwrite directory (path='hdfspath') (row format xxx)?; //\u5c06\u67e5\u8be2\u7ed3\u679c\u8f93\u51fa\u5230\u672c\u5730\u76ee\u5f55 insert overwrite local directory (path='localpath') (row format xxx)?; Add/Remove/Refresh datasource\u8bed\u6cd5\uff1a\u64cd\u7eb5\u4e34\u65f6\u6570\u636e\u6e90 \u4e3a\u4e86\u5e94\u5bf9\u4e00\u4e9bXSQL\u4f5c\u4e3a\u5e38\u9a7b\u67e5\u8be2\u670d\u52a1\uff08thrift jdbc\u670d\u52a1\u3001rest\u670d\u52a1\uff09\u7684\u5e94\u7528\u573a\u666f\u4e0b\uff0c\u7528\u6237\u6240\u8981\u67e5\u8be2\u7684\u6570\u636e\u6e90\u53d1\u751f\u53d8\u5316\uff0c\u4f46\u4fee\u6539xsql.conf\u540e\u91cd\u542fSparkSession\u4f1a\u6253\u65ad\u4efb\u52a1\u6d41\u7a0b\u7684\u95ee\u9898\u3002XSQL\u7279\u522b\u63d0\u4f9b\u4e86\u4e0d\u9700\u8981\u91cd\u542fSparkSession\u7684\u6570\u636e\u6e90\u6dfb\u52a0/\u5220\u9664/\u5237\u65b0\u63a5\u53e3\uff1a //\u6dfb\u52a0\u4e34\u65f6\u6570\u636e\u6e90 add datasource ds_name ( type='', url='', user='', password='', version='' ) //\u79fb\u9664\u4e34\u65f6\u6570\u636e\u6e90 remove datasurce (if exists)? ds_name //\u5237\u65b0\u6570\u636e\u6e90\u5143\u6570\u636e refresh datasource ds_name \u5176\u4e2d\uff0cadd datasource\u62ec\u53f7\u5185\u7684\u914d\u7f6e\u9879\u4e0e xsql.conf\u4e2d\u6570\u636e\u6e90\u914d\u7f6e\u65b9\u5f0f \u76f8\u540c\uff0c\u4e3a\u4e86\u4ee3\u7801\u7b80\u6d01\uff0c\u8fd9\u91cc\u4e0d\u518d\u9700\u8981spark.xsql.datasource.ds_name\u7684\u914d\u7f6e\u9879\u524d\u7f00\u3002 Create temproary view\u8bed\u6cd5\uff1a\u64cd\u7eb5\u4e34\u65f6\u6570\u636e\u8868 \u6dfb\u52a0\u4e34\u65f6\u6570\u636e\u8868\u7684\u9700\u6c42\u80cc\u666f\u4e0e\u6dfb\u52a0\u4e34\u65f6\u6570\u636e\u6e90\u7684\u5982\u51fa\u4e00\u8f99\uff0c\u4e14\u6dfb\u52a0\u4e34\u65f6\u6570\u636e\u8868\u7684\u89e3\u6790\u4ee3\u4ef7\u8f83\u5c0f\uff0c\u662fSparkSQL\u539f\u751f\u652f\u6301\u7684\u4e00\u79cd\u8bed\u6cd5\uff0c\u547d\u4ee4\u5177\u4f53\u683c\u5f0f\u5982\u4e0b\uff1a create (or replace)? temporary view view_name using mysql options( url= jdbc:mysql://hostname:port/db \uff0c user= your_username , password= your_password , dbtable= tb ) \u5176\u4e2d\uff0cusing\u7684\u53ef\u9009\u9879\u89c1 \u5404\u6570\u636e\u6e90\u5bf9\u5e94using\u6807\u8bc6\u8868 \uff0c\u4e0d\u540c\u6570\u636e\u6e90\u7684options\u53ef\u80fd\u4e0d\u5c3d\u76f8\u540c\u3002\u4e34\u65f6\u6570\u636e\u8868\u5728\u4f7f\u7528\u5b8c\u6bd5\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528drop table\u8bed\u6cd5\u5220\u9664\uff0c\u4e34\u65f6\u6570\u636e\u8868\u7684\u5220\u9664\u662f\u53cd\u6ce8\u518c\uff0c\u800c\u4e0d\u4f1a\u5b9e\u9645\u5220\u9664\u539f\u8868\uff0c\u4e14XSQL\u4f18\u5148\u5c06\u8868\u540d\u89e3\u6790\u4e3a\u4e34\u65f6\u6570\u636e\u8868\uff0c\u5982\u679c\u4e34\u65f6\u6570\u636e\u8868\u548c\u539f\u8868\u8868\u540d\u76f8\u540c\uff0cdrop table\u4e5f\u4e0d\u4f1a\u51fa\u73b0\u89e3\u6790\u5931\u51c6\u3002\u4f46\u4e3a\u4e86\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u9ebb\u70e6\uff0c\u8fd8\u662f\u5efa\u8bae\u4e34\u65f6\u6570\u636e\u8868\u4e0d\u8981\u4f7f\u7528\u539f\u8868\u8868\u540d\u3002 Examples: \u5c06hdfs\u6587\u4ef6\u6ce8\u518c\u4e3a\u4e34\u65f6\u6570\u636e\u8868 create or replace temporary view view_name using json/csv/orc/parquet/libsvm/text options(path='hdfspath');","title":"Special Syntax"},{"location":"tutorial/syntax/#datasource","text":"\u200b \u4e3a\u4e86\u4fbf\u4e8e\u7528\u6237\u67e5\u770bXSQL\u4e2d\u76ee\u524d\u5df2\u7ecf\u914d\u7f6e\u53ef\u8bbf\u95ee\u7684DataSource\uff0c\u6211\u4eec\u589e\u52a0\u4e86\u4ee5\u4e0b\u547d\u4ee4\uff1a show datasources; Single DataSource \u5728XSQL\u4e2d\u6267\u884c\u6b64DDL\u8bed\u53e5\uff0c\u5c06\u8f93\u51fa\u6bcf\u4e2a\u6570\u636e\u6e90\u5728xsql.conf\u4e2d\u914d\u7f6e\u7684\u540d\u79f0\uff1a spark-xsql show datasources; 18/10/29 18:51:23 INFO SparkXSQLShell: current SQL: show datasources 18/10/29 18:51:23 WARN SparkXSQLShell: hive.cli.print.header not configured, so doesn't print colum's name. default Time taken: 0.039 s spark-xsql Multi DataSource \u6211\u4eec\u6682\u65f6\u5148\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u9000\u51faXSQL\uff1a exit; \u6211\u4eec\u5728xsql.conf\u914d\u7f6e\u4e2d\u589e\u52a0\u4e00\u4e2aElasticsearch\u6570\u636e\u6e90\uff0c\u547d\u540d\u4e3amyes\u3002\u73b0\u5728\u518d\u6b21\u8fdb\u5165XSQL\u547d\u4ee4\u884c\uff0c\u5e76\u518d\u6b21\u67e5\u770b\u6709\u54ea\u4e9b\u6570\u636e\u6e90\uff1a spark-xsql show datasources; 18/10/29 19:26:37 INFO SparkXSQLShell: current SQL: show datasources 18/10/29 19:26:37 WARN SparkXSQLShell: hive.cli.print.header not configured, so doesn't print colum's name. myes default Time taken: 0.02 s spark-xsql Current DataSource \u200b \u5728 Configurations \u4e2d\u66fe\u7ecf\u4ecb\u7ecd\u8fc7spark.xsql.default.datasource\u5c5e\u6027\uff0c\u8be5\u5c5e\u6027\u7684\u9ed8\u8ba4\u503c\u662fdefault\uff0c\u7528\u4e8e\u6307\u5b9a\u9ed8\u8ba4\u7684\u5f53\u524d\u6570\u636e\u6e90\u3002\u5047\u5982\u6211\u4eec\u73b0\u5728\u7684\u5f53\u524d\u6570\u636e\u6e90\u5c31\u662fdefault\uff0c\u90a3\u4e48\u6267\u884c\u7684\u6240\u6709SQL\uff0c\u90fd\u9ed8\u8ba4\u5728\u5f53\u524d\u6570\u636e\u6e90\u4e2d\uff0c\u9664\u975e\u5728SQL\u4e2d\u660e\u786e\u6307\u5b9a\u4e86\u6570\u636e\u6e90\u3002 \u200b \u6b64\u5904\u4ee5\u5c55\u793aDatabase\u6e05\u5355\u4e3a\u4f8b\uff0c\u5982\u679c\u53ea\u8f93\u5165\u4e86\uff1a show databases; \u90a3\u4e48\uff0c\u5c55\u793a\u7684\u662f\u6570\u636e\u6e90myes\u4e2d\u7684Database\u6e05\u5355\uff0c\u8fd8\u662f\u6570\u636e\u6e90default\u4e2d\u7684Database\u6e05\u5355\uff1fXSQL\u5728\u7528\u6237\u672a\u660e\u786e\u6307\u5b9aDataSource\u7684\u60c5\u51b5\u4e0b\uff0c\u5c06\u5728\u5f53\u524d\u6570\u636e\u6e90\u4e2d\u3002\u56e0\u6b64\uff0c\u5c06\u5c55\u793a\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a spark-xsql show databases; 18/10/29 15:23:44 INFO SparkXSQLShell: spark.enable.hiverc:true 18/10/29 15:23:44 INFO SparkXSQLShell: current SQL: show databases 18/10/29 15:23:48 WARN SparkXSQLShell: hive.cli.print.header not configured, so doesn't print colum's name. default MYSQL mysqltest Time taken: 0.028 s spark-xsql \u5373default\u6570\u636e\u6e90\u4e2d\u7684Database\u6e05\u5355\u3002 \u200b \u6211\u6dfb\u52a0\u7684\u6570\u636e\u6e90myes\u4e2d\u6709xitong_xsql_test\u3001yarn_use_ms_2018\u548cxsql_test\u4e09\u5f20\u8868\uff0c\u90a3\u4e48\u5982\u4f55\u5c55\u793a\u5b83\u4eec\u5462\uff1f\u53ef\u4ee5\u589e\u52a0DataSource\u8fdb\u884c\u9650\u5b9a\uff1a show databases [In|From] myes; \u4f7f\u7528\u4ee5\u4e0a\u547d\u4ee4\uff0c\u5c06\u5f97\u5230\u7c7b\u4f3c\u4e0b\u9762\u7684\u8f93\u51fa\uff1a spark-xsql show databases in myes; 18/10/30 10:27:28 INFO SparkXSQLShell: current SQL: show databases in myes 18/10/30 10:27:28 WARN SparkXSQLShell: hive.cli.print.header not configured, so doesn't print colum's name. myes ELASTICSEARCH xitong_xsql_test myes ELASTICSEARCH yarn_use_ms_2018 myes ELASTICSEARCH xsql_test Time taken: 0.084 s spark-xsql \u6216\u8005\uff1a spark-xsql show databases from myes; 18/10/30 10:30:27 INFO SparkXSQLShell: current SQL: show databases from myes 18/10/30 10:30:27 WARN SparkXSQLShell: hive.cli.print.header not configured, so doesn't print colum's name. myes ELASTICSEARCH xitong_xsql_test myes ELASTICSEARCH yarn_use_ms_2018 myes ELASTICSEARCH xsql_test Time taken: 0.035 s spark-xsql \u5176\u4ed6SQL\u90fd\u6709\u7c7b\u4f3c\u7684\u5f53\u524d\u6570\u636e\u6e90\u8bed\u4e49\u3002 Current Database \u200b \u540cMySQL\u6216Hive\u76f8\u7c7b\u4f3c\uff0cXSQL\u4e5f\u63d0\u4f9b\u4e86\u5f53\u524d\u7684Database\u3002\u5728 Configurations \u4e2d\u66fe\u7ecf\u4ecb\u7ecd\u8fc7spark.xsql.default.database\u5c5e\u6027\uff0c\u8be5\u5c5e\u6027\u7684\u9ed8\u8ba4\u503c\u662fdefault\uff0c\u7528\u4e8e\u6307\u5b9a\u9ed8\u8ba4\u7684\u5f53\u524d\u6570\u636e\u5e93\u3002\u5047\u5982\u6211\u4eec\u73b0\u5728\u7684\u5f53\u524d\u6570\u636e\u6e90\u4f9d\u7136\u662fdefault\uff0c\u5f53\u524d\u6570\u636e\u5e93\u662fmysqltest\uff0c\u90a3\u4e48\u6267\u884c\u7684\u6240\u6709SQL\uff0c\u90fd\u9ed8\u8ba4\u5728\u5f53\u524d\u6570\u636e\u6e90\u7684\u5f53\u524d\u6570\u636e\u5e93\u4e2d\uff0c\u9664\u975e\u5728SQL\u4e2d\u660e\u786e\u6307\u5b9a\u4e86\u6570\u636e\u6e90\u548c\u6570\u636e\u5e93\u3002 \u200b \u6b64\u5904\u4ee5\u5c55\u793aTable\u6e05\u5355\u4e3a\u4f8b\uff0c\u5982\u679c\u53ea\u8f93\u5165\u4e86\uff1a show tables; \u6839\u636e Current DataSource \u5c0f\u8282\u7684\u4ecb\u7ecd\uff0c\u5f53\u524d\u6570\u636e\u6e90\u4e3adefault\uff0c\u56e0\u6b64\u67e5\u770b\u7684\u5fc5\u7136\u662fdefault\u6570\u636e\u6e90\u4e2d\u67d0\u4e2aDatabase\u4e2d\u7684Table\u6e05\u5355\u3002\u7531\u4e8e\uff0c\u5f53\u524d\u6570\u636e\u5e93\u662fmysqltest\uff0c\u56e0\u6b64\u5c06\u5c55\u793a\u51famysqltest\u4e2d\u7684Table\u6e05\u5355\uff1a spark-xsql show tables; 18/10/30 11:25:11 INFO SparkXSQLShell: current SQL: show tables 18/10/30 11:25:11 WARN SparkXSQLShell: hive.cli.print.header not configured, so doesn't print colum's name. default mysqltest activities false default mysqltest course false default mysqltest geonames false default mysqltest geonames_small false default mysqltest person false default mysqltest taxis false default mysqltest taxis_type false default mysqltest test123 false Time taken: 0.013 s spark-xsql \u5982\u679c\u7528\u6237\u4e0d\u60f3\u901a\u8fc7use\u6765\u5207\u6362\u5f53\u524d\u6570\u636e\u6e90\u548c\u6570\u636e\u5e93\uff0c\u4f46\u662f\u53c8\u60f3\u67e5\u770b\u6570\u636e\u6e90myes\u4e2d\u6570\u636e\u5e93xsql_test\u7684Table\u6e05\u5355\uff0c\u90a3\u4e48\u8be5\u5982\u4f55\u64cd\u4f5c\uff1f\u53ef\u4ee5\u589e\u52a0DataSource\u548cDatabase\u8fdb\u884c\u9650\u5b9a\uff1a show tables [In|From] myes.xsql_test; \u4f7f\u7528\u4ee5\u4e0a\u547d\u4ee4\uff0c\u5c06\u5f97\u5230\u7c7b\u4f3c\u4e0b\u9762\u7684\u8f93\u51fa\uff1a spark-xsql show tables in myes.xsql_test; 18/10/30 11:29:56 INFO SparkXSQLShell: current SQL: show tables in myes.xsql_test 18/10/30 11:29:56 WARN SparkXSQLShell: hive.cli.print.header not configured, so doesn't print colum's name. myes xsql_test city false myes xsql_test class_room false myes xsql_test doc false myes xsql_test es_test false myes xsql_test user false Time taken: 0.03 s spark-xsql \u6216\u8005\uff1a spark-xsql show tables from myes.xsql_test; 18/10/30 11:29:56 INFO SparkXSQLShell: current SQL: show tables in myes.xsql_test 18/10/30 11:29:56 WARN SparkXSQLShell: hive.cli.print.header not configured, so doesn't print colum's name. myes xsql_test city false myes xsql_test class_room false myes xsql_test doc false myes xsql_test es_test false myes xsql_test user false Time taken: 0.03 s spark-xsql","title":"DataSource\u76f8\u5173\u8bed\u6cd5"},{"location":"tutorial/syntax/#current-datasourcecurrent-databasesql","text":"\u8fd9\u91cc\uff0c\u6211\u4eec\u518d\u6b21\u5f3a\u8c03\u5f53\u524d\u6570\u636e\u6e90\u662f default \uff0c\u5f53\u524d\u6570\u636e\u5e93\u662f mysqltest \uff0c\u7136\u540e\u5bf9\u5404\u79cdSQL\u4e0eCurrent DataSource\u53caCurrent Database\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u901a\u8fc7\u4e00\u4e2a\u8868\u683c\u6765\u8bf4\u660e\uff1a \u4e0d\u6307\u5b9aDataSource\u7684SQL \u7b49\u6548SQL use mysqltest use default.mysqltest use myes.xsql_test use myes.xsql_test show databases show databases [in|from] default show databases [in|from] myes show databases [in|from] myes show tables show tables [in|from] default.mysqltest show tables [in|from] mysqltest show tables [in|from] default.mysqltest show tables [in|from] myes.xsql_test show tables [in|from] myes.xsql_test create table test (key String,value String) ... create table default.mysqltest.test (key String,value String) ... create table mysqltest.test (key String,value String) ... create table default.mysqltest.test (key String,value String) ... create table myes.xsql_test.test (key String,value String) ... create table myes.xsql_test.test (key String,value String) ... select * from course select * from default.mysqltest.course select * from mysqltest.course select * from default.mysqltest.course select * from myes.xsql_test.city select * from myes.xsql_test.city XSQL\u652f\u6301\u7684\u5404\u79cd\u6570\u636e\u6e90\uff0c\u6240\u80fd\u652f\u6301\u7684SQL\u8bed\u6cd5\u4e0d\u540c\uff0c\u5177\u4f53\u8bf7\u9605\u8bfb\u5404\u4e2a\u6570\u636e\u6e90\u5bf9SQL\u7684\u4ecb\u7ecd\u3002","title":"Current DataSource\u4e0eCurrent Database\u5bf9SQL\u7684\u5f71\u54cd"},{"location":"tutorial/syntax/#create-table","text":"\u200b XSQL\u5c3d\u91cf\u5c06\u5404\u79cd\u5f02\u6784\u6570\u636e\u6e90\u7684\u8868\u521b\u5efa\u8bed\u6cd5\u7edf\u4e00\u8d77\u6765\u3002\u4f46\u662f\u5404\u79cd\u6570\u636e\u6e90\u5929\u751f\u652f\u6301\u7684create table\u8bed\u6cd5\u5c31\u662f\u4e0d\u540c\u7684\uff0c\u6bd4\u5982Hive\u7684\u7c7b\u4f3c\u4e8e\u4e0b\u9762\u8fd9\u6837\uff1a create table test ( key String, value String, other String ) ROW FORMAT DELIMITED FIELDS TERMINATED BY '\\t' STORED AS TEXTFILE \u4f46\u662f\uff0cMySQL\u7684\u5219\u662f\uff1a CREATE TABLE person ( id int NOT NULL AUTO_INCREMENT, name varchar(8), birthday datetime, CONSTRAINT pk__person PRIMARY KEY (id) ) \u4e24\u8005\u652f\u6301\u7684\u6570\u636e\u7c7b\u578b\u9996\u5148\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u6b64\u5916\u8bed\u6cd5\u4e0a\u4e5f\u6709\u5dee\u5f02\uff08\u6bd4\u5982Hive\u53ef\u4ee5\u6307\u5b9a\u884c\u683c\u5f0f\uff0c\u800cMySQL\u53ef\u4ee5\u652f\u6301\u81ea\u589e\u4e3b\u952e\uff09\u3002 \u8fd8\u6709\u4e9b\u6570\u636e\u6e90\u4e0d\u652f\u6301SQL\u6216\u8005\u652f\u6301\u7684SQL\u975e\u5e38\u6709\u9650\uff0c\u56e0\u6b64\u4ece\u5e95\u5c42\u5c31\u51b3\u5b9a\u4e86XSQL\u63d0\u4f9b\u7684create table\u8bed\u6cd5\u56e0\u6570\u636e\u6e90\u7684\u4e0d\u540c\u800c\u4e0d\u540c\u3002XSQL\u79cd\u521b\u5efaHive\u4e4b\u5916\u7684\u5176\u4ed6\u6570\u636e\u6e90\u7684\u8868\u65f6\uff0c\u9700\u8981\u6307\u5b9a\u6570\u636e\u6e90\u3002 \u4ee5MySQL\u4e3a\u4f8b\uff0c\u4f7f\u7528XSQL\u521b\u5efa\u8868\u7684SQL\u662f\uff1a CREATE TABLE person ( id int NOT NULL AUTO_INCREMENT, name varchar(8), birthday datetime, CONSTRAINT pk__person PRIMARY KEY (id) ) using mysql \u53ef\u4ee5\u770b\u5230\u521b\u5efaMySQL\u8868\u65f6\uff0c\u5728using\u540e\u8ddf\u4e86\"mysql\"\u8fd9\u4e2a\u6570\u636e\u6e90\u6807\u8bc6\u3002\u90a3\u4e48\u5176\u4ed6\u7c7b\u578b\u7684\u6570\u636e\u6e90\u9700\u8981\u8ddf\u4ec0\u4e48\u6807\u8bc6\u5462\uff1f\u8bf7\u770b\u4e0b\u8868\uff1a \u5404\u6570\u636e\u6e90\u5bf9\u5e94using\u6807\u8bc6\u8868 \u5e8f\u53f7 \u6570\u636e\u6e90\u7c7b\u578b \u6570\u636e\u6e90\u6807\u8bc6 \u5907\u6ce8 1 Hive - \u64cd\u4f5chive\u6570\u636e\u6e90\u4e0d\u9700\u8981using 2 MySQL mysql 3 Elasticsearch es 4 MongoDB mongo 5 HBASE hbase 6 Redis redis Redis\u7684create table\u6682\u672a\u5b9e\u73b0 7 Druid druid Druid\u7684create table\u6682\u672a\u5b9e\u73b0 8 Kafka kafka Kafka\u7684create table\u6682\u672a\u5b9e\u73b0 9 Oracle\uff08Pending\uff09 - 10 Clickhouse\uff08Pending\uff09 -","title":"Create table\u8bed\u6cd5\uff1a\u521b\u5efa\u7a7a\u7684\u6570\u636e\u6e90\u8868"},{"location":"tutorial/syntax/#ctas","text":"XSQL\u76ee\u524d\u652f\u6301\u5c06select\u67e5\u8be2\u7ed3\u679c\u76f4\u63a5\u521b\u5efa\u4e3ahive\u8868\u6216mysql\u8868\uff0c\u5bf9\u5e94\u547d\u4ee4\u5982\u4e0b\uff1a //\u67e5\u8be2\u7ed3\u679c\u521b\u5efa\u4e3ahive\u8868 create table dst_ds.dst_db.dst_tb as select * from src_ds.src_db.dst_tb; //\u67e5\u8be2\u7ed3\u679c\u521b\u5efa\u4e3amysql\u8868 create table dst_ds.dst_db.dst_tb using mysql as select * from src_ds.src_db.dst_tb;","title":"CTAS\u8bed\u6cd5\uff1a\u4f7f\u7528\u67e5\u8be2\u7ed3\u679c\u521b\u5efa\u6570\u636e\u6e90\u8868"},{"location":"tutorial/syntax/#insert-into","text":"XSQL\u76ee\u524d\u652f\u6301\u5c06select\u67e5\u8be2\u7ed3\u679c\u76f4\u63a5\u6dfb\u52a0\u5230hive\u8868\u6216mysql\u8868\uff0c\u5bf9\u5e94\u547d\u4ee4\u5982\u4e0b\uff1a //\u67e5\u8be2\u7ed3\u679c\u8ffd\u52a0\u5230hive\u8868 insert into (table)? dst_table select * from src_table; //\u67e5\u8be2\u7ed3\u679c\u8ffd\u52a0\u5230mysql\u8868 insert into (table)? dst_table using mysql select * from src_table; //\u4f7f\u7528\u67e5\u8be2\u7ed3\u679c\u66ff\u6362hive\u8868 insert overwrite table dst_table select * from src_table; //\u4f7f\u7528\u67e5\u8be2\u7ed3\u679c\u66ff\u6362mysql\u8868 insert overwrite table dst_table using mysql select * from src_table;","title":"Insert into\u8bed\u6cd5\uff1a\u5c06\u67e5\u8be2\u7ed3\u679c\u6dfb\u52a0\u5230\u5df2\u5b58\u5728\u7684\u6570\u636e\u6e90\u8868"},{"location":"tutorial/syntax/#insert-overwrite-directoryhdfs","text":"XSQL\u652f\u6301\u5c06select\u67e5\u8be2\u7ed3\u679c\u76f4\u63a5\u8f93\u51fa\u5230hdfs\u76ee\u5f55\u6216\u672c\u5730\u78c1\u76d8\u76ee\u5f55\uff0c\u5bf9\u5e94\u547d\u4ee4\u5982\u4e0b\uff1a //\u5c06\u67e5\u8be2\u7ed3\u679c\u8f93\u51fa\u5230hdfs\u76ee\u5f55 insert overwrite directory (path='hdfspath') (row format xxx)?; //\u5c06\u67e5\u8be2\u7ed3\u679c\u8f93\u51fa\u5230\u672c\u5730\u76ee\u5f55 insert overwrite local directory (path='localpath') (row format xxx)?;","title":"Insert overwrite directory\u8bed\u6cd5\uff1a\u8f93\u51fa\u5230hdfs\u76ee\u5f55\u6216\u672c\u5730\u78c1\u76d8"},{"location":"tutorial/syntax/#addremoverefresh-datasource","text":"\u4e3a\u4e86\u5e94\u5bf9\u4e00\u4e9bXSQL\u4f5c\u4e3a\u5e38\u9a7b\u67e5\u8be2\u670d\u52a1\uff08thrift jdbc\u670d\u52a1\u3001rest\u670d\u52a1\uff09\u7684\u5e94\u7528\u573a\u666f\u4e0b\uff0c\u7528\u6237\u6240\u8981\u67e5\u8be2\u7684\u6570\u636e\u6e90\u53d1\u751f\u53d8\u5316\uff0c\u4f46\u4fee\u6539xsql.conf\u540e\u91cd\u542fSparkSession\u4f1a\u6253\u65ad\u4efb\u52a1\u6d41\u7a0b\u7684\u95ee\u9898\u3002XSQL\u7279\u522b\u63d0\u4f9b\u4e86\u4e0d\u9700\u8981\u91cd\u542fSparkSession\u7684\u6570\u636e\u6e90\u6dfb\u52a0/\u5220\u9664/\u5237\u65b0\u63a5\u53e3\uff1a //\u6dfb\u52a0\u4e34\u65f6\u6570\u636e\u6e90 add datasource ds_name ( type='', url='', user='', password='', version='' ) //\u79fb\u9664\u4e34\u65f6\u6570\u636e\u6e90 remove datasurce (if exists)? ds_name //\u5237\u65b0\u6570\u636e\u6e90\u5143\u6570\u636e refresh datasource ds_name \u5176\u4e2d\uff0cadd datasource\u62ec\u53f7\u5185\u7684\u914d\u7f6e\u9879\u4e0e xsql.conf\u4e2d\u6570\u636e\u6e90\u914d\u7f6e\u65b9\u5f0f \u76f8\u540c\uff0c\u4e3a\u4e86\u4ee3\u7801\u7b80\u6d01\uff0c\u8fd9\u91cc\u4e0d\u518d\u9700\u8981spark.xsql.datasource.ds_name\u7684\u914d\u7f6e\u9879\u524d\u7f00\u3002","title":"Add/Remove/Refresh datasource\u8bed\u6cd5\uff1a\u64cd\u7eb5\u4e34\u65f6\u6570\u636e\u6e90"},{"location":"tutorial/syntax/#create-temproary-view","text":"\u6dfb\u52a0\u4e34\u65f6\u6570\u636e\u8868\u7684\u9700\u6c42\u80cc\u666f\u4e0e\u6dfb\u52a0\u4e34\u65f6\u6570\u636e\u6e90\u7684\u5982\u51fa\u4e00\u8f99\uff0c\u4e14\u6dfb\u52a0\u4e34\u65f6\u6570\u636e\u8868\u7684\u89e3\u6790\u4ee3\u4ef7\u8f83\u5c0f\uff0c\u662fSparkSQL\u539f\u751f\u652f\u6301\u7684\u4e00\u79cd\u8bed\u6cd5\uff0c\u547d\u4ee4\u5177\u4f53\u683c\u5f0f\u5982\u4e0b\uff1a create (or replace)? temporary view view_name using mysql options( url= jdbc:mysql://hostname:port/db \uff0c user= your_username , password= your_password , dbtable= tb ) \u5176\u4e2d\uff0cusing\u7684\u53ef\u9009\u9879\u89c1 \u5404\u6570\u636e\u6e90\u5bf9\u5e94using\u6807\u8bc6\u8868 \uff0c\u4e0d\u540c\u6570\u636e\u6e90\u7684options\u53ef\u80fd\u4e0d\u5c3d\u76f8\u540c\u3002\u4e34\u65f6\u6570\u636e\u8868\u5728\u4f7f\u7528\u5b8c\u6bd5\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528drop table\u8bed\u6cd5\u5220\u9664\uff0c\u4e34\u65f6\u6570\u636e\u8868\u7684\u5220\u9664\u662f\u53cd\u6ce8\u518c\uff0c\u800c\u4e0d\u4f1a\u5b9e\u9645\u5220\u9664\u539f\u8868\uff0c\u4e14XSQL\u4f18\u5148\u5c06\u8868\u540d\u89e3\u6790\u4e3a\u4e34\u65f6\u6570\u636e\u8868\uff0c\u5982\u679c\u4e34\u65f6\u6570\u636e\u8868\u548c\u539f\u8868\u8868\u540d\u76f8\u540c\uff0cdrop table\u4e5f\u4e0d\u4f1a\u51fa\u73b0\u89e3\u6790\u5931\u51c6\u3002\u4f46\u4e3a\u4e86\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u9ebb\u70e6\uff0c\u8fd8\u662f\u5efa\u8bae\u4e34\u65f6\u6570\u636e\u8868\u4e0d\u8981\u4f7f\u7528\u539f\u8868\u8868\u540d\u3002 Examples: \u5c06hdfs\u6587\u4ef6\u6ce8\u518c\u4e3a\u4e34\u65f6\u6570\u636e\u8868 create or replace temporary view view_name using json/csv/orc/parquet/libsvm/text options(path='hdfspath');","title":"Create temproary view\u8bed\u6cd5\uff1a\u64cd\u7eb5\u4e34\u65f6\u6570\u636e\u8868"}]}